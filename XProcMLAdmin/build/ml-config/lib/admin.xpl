<p:library xmlns:xhtml="http://www.w3.org/1999/xhtml"
           xmlns:cxml="http://xmlcalabash.com/ns/extensions/marklogic"
           xmlns:p="http://www.w3.org/ns/xproc"
           xmlns:apidoc="http://marklogic.com/xdmp/apidoc"
           xmlns:c="http://www.w3.org/ns/xproc-step"
           xmlns:ml="http://www.marklogic.com"
           xmlns:admin="http://marklogic.com/xdmp/admin"
           version="1.0">
   <p:import href="ml-server.xpl"/>

   <p:documentation>The Admin module is an XQuery library module that allows 
you to script administrative tasks that you otherwise would 
need the Admin Interface to perform.  Most functions in this library 
perform adminstrative tasks and therefore require the user who runs the 
XQuery program to have the Admin role. Many of these functions provide new configuration information.  In most
cases, you must save the configuration (with 
admin:save-configuration, for example) in the same 
statement that you use the functions in order for them to take
effect. To use the Admin module as part of your own XQuery module, 
include the following line in your XQuery prolog:  import module namespace admin = "http://marklogic.com/xdmp/admin" 
		  at "/MarkLogic/admin.xqy" ;
 The library namespace prefix admin is not 
	predefined in the server.</p:documentation>


   <p:declare-step name="admin-appserver-add-namespace" type="admin:appserver-add-namespace">
      <p:documentation>
		  Add one or more namespaces to an App Server configuration, 
		  which will predefine the namespace(s) for all requests 
		  evaluated against the App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="namespaces" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-add-namespace.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//namespaces">
         <p:input port="replacement">
            <p:pipe port="namespaces" step="admin-appserver-add-namespace"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-add-namespace"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-add-namespace"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-add-namespace"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-add-namespace"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-add-request-blackout"
                   type="admin:appserver-add-request-blackout">
      <p:documentation>
      This function adds a request blackout specification for a 
      appserver to a configuration. 
    </p:documentation>

      <p:input port="source"/>
      <p:input port="request-blackouts" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-add-request-blackout.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//request-blackouts">
         <p:input port="replacement">
            <p:pipe port="request-blackouts" step="admin-appserver-add-request-blackout"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-add-request-blackout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-add-request-blackout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-add-request-blackout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-add-request-blackout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-add-schema" type="admin:appserver-add-schema">
      <p:documentation>
		  This function adds a schema binding definition to the 
		  existing schema binding definitions in the configuration 
		  for the specified App Server.  Schemas with a schema binding
		  definition are automatically imported into queries run 
		  against the App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="schemas" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-add-schema.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//schemas">
         <p:input port="replacement">
            <p:pipe port="schemas" step="admin-appserver-add-schema"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-add-schema"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-add-schema"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-add-schema"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-add-schema"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-copy" type="admin:appserver-copy">
      <p:documentation>
		  This function creates a new App Server specification with the
		  same settings as the App Server with the specified ID.  
		  The new App Server configuration will have the specified name.
		  You can copy the App Server to a new one either in the same 
		  group (by specifying $old-group-id and $new-group-id with 
		  the same group ID) or in a different group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-target-group-id" required="true"/>
      <p:option name="ml-appserver-name" required="true"/>
      <p:option name="ml-port" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-copy.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:appserver-copy"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="TARGET_GROUP_ID"/>
                  <c:param name="APPSERVER_NAME"/>
                  <c:param name="PORT"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-copy"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TARGET_GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-target-group-id">
            <p:pipe port="source" step="admin-appserver-copy"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-name">
            <p:pipe port="source" step="admin-appserver-copy"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'PORT']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-port">
            <p:pipe port="source" step="admin-appserver-copy"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-copy"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-copy"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-delete" type="admin:appserver-delete">
      <p:documentation>
		  This function deletes one or more App Servers in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-ids" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-delete.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:appserver-delete"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_IDS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_IDS']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-ids">
            <p:pipe port="source" step="admin-appserver-delete"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-delete"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-delete"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-delete-namespace" type="admin:appserver-delete-namespace">
      <p:documentation>
		  This function deletes a namespace configuration from the
		  configuration for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="namespaces" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-delete-namespace.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//namespaces">
         <p:input port="replacement">
            <p:pipe port="namespaces" step="admin-appserver-delete-namespace"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-delete-namespace"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-delete-namespace"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-delete-namespace"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-delete-namespace"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-delete-request-blackout"
                   type="admin:appserver-delete-request-blackout">
      <p:documentation>
      This function deletes a request blackout specification for a 
      appserver from a configuration. 
    </p:documentation>

      <p:input port="source"/>
      <p:input port="blackouts" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-delete-request-blackout.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//blackouts">
         <p:input port="replacement">
            <p:pipe port="blackouts" step="admin-appserver-delete-request-blackout"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-delete-request-blackout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-delete-request-blackout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-delete-request-blackout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-delete-request-blackout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-delete-schema" type="admin:appserver-delete-schema">
      <p:documentation>
		  This function deletes a schema definition in the 
		  configuration for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="schemas" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-delete-schema.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//schemas">
         <p:input port="replacement">
            <p:pipe port="schemas" step="admin-appserver-delete-schema"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-delete-schema"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-delete-schema"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-delete-schema"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-delete-schema"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-exists" type="admin:appserver-exists">
      <p:documentation>This function determines whether or not the specified App Server
  exists.  Returns  true  if the App Server exists, otherwise 
   false  is returned.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-ids" required="true"/>
      <p:option name="ml-appserver-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-exists.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:appserver-exists"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_IDS"/>
                  <c:param name="APPSERVER_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_IDS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-ids">
            <p:pipe port="source" step="admin-appserver-exists"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_NAME']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-name">
            <p:pipe port="source" step="admin-appserver-exists"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-exists"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-exists"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-address" type="admin:appserver-get-address">
      <p:documentation>
		  This function returns the IP address of the App Server
		  configuration. The default is  0.0.0.0 .
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-address.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-address"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-address"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-address"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-address"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-authentication"
                   type="admin:appserver-get-authentication">
      <p:documentation>
		  This function returns the authentication scheme
		  (basic, digest, digestbasic, or application-level) 
		  configured for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-authentication.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-authentication"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-authentication"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-authentication"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-authentication"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-backlog" type="admin:appserver-get-backlog">
      <p:documentation>
		  This function returns the socket listen backlog setting 
		  for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-backlog.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-backlog"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-backlog"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-backlog"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-backlog"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-collation" type="admin:appserver-get-collation">
      <p:documentation>
		  This function returns the collation URI set in the 
		  configuration for the specified App Server. 
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-collation.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-collation"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-collation"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-collation"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-collation"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-compute-content-length"
                   type="admin:appserver-get-compute-content-length">
      <p:documentation>
      This function returns the value of whether the WebDAV server
      computes content length.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-compute-content-length.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-compute-content-length"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-compute-content-length"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-compute-content-length"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-compute-content-length"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-concurrent-request-limit"
                   type="admin:appserver-get-concurrent-request-limit">
      <p:documentation>
      This function returns the concurrent request limit for 
      any user for the specified App Server. 0 indicates no bound 
      on the number of concurrent requests.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-concurrent-request-limit.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-concurrent-request-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-concurrent-request-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-concurrent-request-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-concurrent-request-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-database" type="admin:appserver-get-database">
      <p:documentation>
      This function returns the ID of the database to which the
      App Server is set to execute queries against for the 
      specified database.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-database.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-database"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-database"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-database"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-database"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-debug-allow" type="admin:appserver-get-debug-allow">
      <p:documentation>
		  This function returns the value of debug allow  setting
		  configured for this App Server, where true indicates that
		  the App Server will allow queries to be debugged, and false 
		  indicates that it will not.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-debug-allow.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-debug-allow"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-debug-allow"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-debug-allow"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-debug-allow"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-default-time-limit"
                   type="admin:appserver-get-default-time-limit">
      <p:documentation>
      This function returns the default time limit value configured
      for the specified App Server.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-default-time-limit.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-default-time-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-default-time-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-default-time-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-default-time-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-default-user" type="admin:appserver-get-default-user">
      <p:documentation>
		  This function returns the default user value configured
		  for the specified App Server.  The default user only is 
		  used with application-level authentication.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-default-user.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-default-user"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-default-user"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-default-user"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-default-user"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-default-xquery-version"
                   type="admin:appserver-get-default-xquery-version">
      <p:documentation>
		  This function returns the value of the default xquery
		  version configured for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-default-xquery-version.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-default-xquery-version"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-default-xquery-version"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-default-xquery-version"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-default-xquery-version"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-display-last-login"
                   type="admin:appserver-get-display-last-login">
      <p:documentation>
      This function returns the value of the whether or not the
      appserver should display users' last login information.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-display-last-login.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-display-last-login"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-display-last-login"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-display-last-login"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-display-last-login"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-enabled" type="admin:appserver-get-enabled">
      <p:documentation>
		  This function returns the enabled state for the specified
		  App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-enabled.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-enabled"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-enabled"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-enabled"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-enabled"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-error-handler"
                   type="admin:appserver-get-error-handler">
      <p:documentation>
		  This function returns the path to the error handler 
		  configured for this App Server.  If no error handler
		  is configured, returns the empty string.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-error-handler.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-error-handler"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-error-handler"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-error-handler"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-error-handler"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-group-id" type="admin:appserver-get-group-id">
      <p:documentation>
      This function returns the ID of the specified 
      App Server's group.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-group-id.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-group-id"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-group-id"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-group-id"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-group-id"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-host-ids" type="admin:appserver-get-host-ids">
      <p:documentation>
      This function returns the ID(s) of the hosts the specified 
      App Server's is currently running on.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-host-ids.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-host-ids"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-host-ids"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-host-ids"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-host-ids"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-id" type="admin:appserver-get-id">
      <p:documentation>
		  This function returns the ID of the specified App Server.
		  The difference between this function and  xdmp:server()  is 
		  that the ID from 
		  this function can come from an appserver that has not yet been saved (that is, 
		  from an appserver that has been created in the same query with the Admin library
		  but has not yet been saved to the cluster configuration files).  This ID 
		  enables you to completely configure a newly created appserver without the 
		  need to first save the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-ids" required="true"/>
      <p:option name="ml-appserver-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-id.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:appserver-get-id"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_IDS"/>
                  <c:param name="APPSERVER_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_IDS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-ids">
            <p:pipe port="source" step="admin-appserver-get-id"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_NAME']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-name">
            <p:pipe port="source" step="admin-appserver-get-id"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-id"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-id"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-keep-alive-timeout"
                   type="admin:appserver-get-keep-alive-timeout">
      <p:documentation>
		  This function returns the keep alive timeout value
		  configured for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-keep-alive-timeout.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-keep-alive-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-keep-alive-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-keep-alive-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-keep-alive-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-last-login" type="admin:appserver-get-last-login">
      <p:documentation>
      This function returns the ID of the database to which the
      App Server stores users' last login information.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-last-login.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-last-login"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-last-login"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-last-login"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-last-login"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-log-errors" type="admin:appserver-get-log-errors">
      <p:documentation>
		  This function returns the value of the log errors setting
		  configured for this App Server, where true indicates that
		  the App Server will send uncaught exceptions to the 
		   ErrorLog.txt  file, and false indicates that
		  it will not.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-log-errors.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-log-errors"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-log-errors"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-log-errors"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-log-errors"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-max-time-limit"
                   type="admin:appserver-get-max-time-limit">
      <p:documentation>
      This function returns the max time limit value configured
      for the specified App Server.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-max-time-limit.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-max-time-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-max-time-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-max-time-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-max-time-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-modules-database"
                   type="admin:appserver-get-modules-database">
      <p:documentation>
		  This function returns the ID of the database set as the
		  modules database for the specified database.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-modules-database.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-modules-database"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-modules-database"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-modules-database"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-modules-database"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-name" type="admin:appserver-get-name">
      <p:documentation>
		  This function returns the name of the appserver with the
		  specified ID.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-name.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-name"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-name"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-name"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-name"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-namespaces" type="admin:appserver-get-namespaces">
      <p:documentation>
		  This function returns the value of any namespace definitions
		  predefined for the specified App Server.  If none are defined,
		  returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-namespaces.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-namespaces"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-namespaces"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-namespaces"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-namespaces"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-output-encoding"
                   type="admin:appserver-get-output-encoding">
      <p:documentation>
		  This function returns the value for the output encoding
		  setting for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-output-encoding.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-output-encoding"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-output-encoding"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-output-encoding"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-output-encoding"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-output-sgml-character-entities"
                   type="admin:appserver-get-output-sgml-character-entities">
      <p:documentation>
		  This function returns the value for the
		  output sgml character entities setting for the 
		  specified App Server. 
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-output-sgml-character-entities.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-output-sgml-character-entities"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-output-sgml-character-entities"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-output-sgml-character-entities"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-output-sgml-character-entities"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-port" type="admin:appserver-get-port">
      <p:documentation>
		  This function returns the port for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-port.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-port"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-port"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-port"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-port"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-pre-commit-trigger-depth"
                   type="admin:appserver-get-pre-commit-trigger-depth">
      <p:documentation>
		  This function returns the pre commit trigger depth value
		  configured for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-pre-commit-trigger-depth.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-pre-commit-trigger-depth"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-pre-commit-trigger-depth"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-pre-commit-trigger-depth"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-pre-commit-trigger-depth"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-pre-commit-trigger-limit"
                   type="admin:appserver-get-pre-commit-trigger-limit">
      <p:documentation>
		  This function returns the pre commit trigger limit value
		  configured for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-pre-commit-trigger-limit.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-pre-commit-trigger-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-pre-commit-trigger-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-pre-commit-trigger-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-pre-commit-trigger-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-privilege" type="admin:appserver-get-privilege">
      <p:documentation>
		  This function returns the privilege ID for the 
		  specified App Server.  If no privilege is configured, 
		  It returns 0.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-privilege.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-privilege"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-privilege"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-privilege"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-privilege"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-profile-allow"
                   type="admin:appserver-get-profile-allow">
      <p:documentation>
		  This function returns the value of the profile allow setting
		  configured for this App Server, where true indicates that
		  the App Server will allow queries to be profiled, and false 
		  indicates that it will not.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-profile-allow.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-profile-allow"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-profile-allow"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-profile-allow"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-profile-allow"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-request-blackouts"
                   type="admin:appserver-get-request-blackouts">
      <p:documentation>
      This function returns the request blackouts specification
      for the specified appserver from the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-request-blackouts.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-request-blackouts"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-request-blackouts"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-request-blackouts"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-request-blackouts"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-request-timeout"
                   type="admin:appserver-get-request-timeout">
      <p:documentation>
		  This function returns the request timeout value configured
		  for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-request-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-request-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-request-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-request-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-request-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-root" type="admin:appserver-get-root">
      <p:documentation>
		  This function returns the root for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-root.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-root"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-root"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-root"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-root"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-schemas" type="admin:appserver-get-schemas">
      <p:documentation>
		  This function returns the value of any schemas definitions
		  predefined for the specified App Server.  If none are defined,
		  returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-schemas.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-schemas"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-schemas"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-schemas"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-schemas"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-session-timeout"
                   type="admin:appserver-get-session-timeout">
      <p:documentation>
		  This function returns the session timeout value
		  configured for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-session-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-session-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-session-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-session-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-session-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-ssl-allow-sslv3"
                   type="admin:appserver-get-ssl-allow-sslv3">
      <p:documentation>This function returns true if the SSL v3 protocol is enabled for the specified App 
  Server, or false if SSL v3 is disabled. </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-ssl-allow-sslv3.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-ssl-allow-sslv3"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-ssl-allow-sslv3"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-ssl-allow-sslv3"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-ssl-allow-sslv3"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-ssl-allow-tls"
                   type="admin:appserver-get-ssl-allow-tls">
      <p:documentation>This function returns true if the TLS protocol is enabled for the specified App 
  Server, or false if TLS is disabled.</p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-ssl-allow-tls.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-ssl-allow-tls"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-ssl-allow-tls"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-ssl-allow-tls"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-ssl-allow-tls"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-ssl-certificate-template"
                   type="admin:appserver-get-ssl-certificate-template">
      <p:documentation>
	This function returns the id of the SSL certificate template used
	by the specified App Server.  If no template is set for the App Server, 
	0 is returned.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-ssl-certificate-template.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-ssl-certificate-template"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-ssl-certificate-template"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-ssl-certificate-template"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-ssl-certificate-template"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-ssl-ciphers" type="admin:appserver-get-ssl-ciphers">
      <p:documentation>
	This function returns the SSL ciphers set for the App Server.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-ssl-ciphers.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-ssl-ciphers"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-ssl-ciphers"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-ssl-ciphers"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-ssl-ciphers"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-ssl-client-certificate-authorities"
                   type="admin:appserver-get-ssl-client-certificate-authorities">
      <p:documentation>This function returns the id(s) of the client certificate authority for the 
  specified App Server.  If no client certificate authority is set, this function returns
  an empty sequence. </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-ssl-client-certificate-authorities.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-ssl-client-certificate-authorities"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-ssl-client-certificate-authorities"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-ssl-client-certificate-authorities"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-ssl-client-certificate-authorities"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-ssl-hostname" type="admin:appserver-get-ssl-hostname">
      <p:documentation>
     This function returns the SSL hostname for the specified App 
     Server. If no hostname is set, nothing is returned. 
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-ssl-hostname.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-ssl-hostname"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-ssl-hostname"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-ssl-hostname"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-ssl-hostname"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-ssl-require-client-certificate"
                   type="admin:appserver-get-ssl-require-client-certificate">
      <p:documentation>This function returns true if a client certificate is required for the specified 
   App Server.  Otherwise, it returns false.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-ssl-require-client-certificate.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-ssl-require-client-certificate"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-ssl-require-client-certificate"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-ssl-require-client-certificate"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-ssl-require-client-certificate"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-static-expires"
                   type="admin:appserver-get-static-expires">
      <p:documentation>
      This function returns the value of the "expires" HTTP header for static content 
      to expire after this many seconds port for the specified App Server.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-static-expires.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-static-expires"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-static-expires"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-static-expires"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-static-expires"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-threads" type="admin:appserver-get-threads">
      <p:documentation>
		  This function returns the maximum number of threads 
		  configured for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-threads.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-threads"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-threads"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-threads"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-threads"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-type" type="admin:appserver-get-type">
      <p:documentation>
      This function returns the type of appserver with the
      specified ID. It will be either "http", "xdbc", or "WebDAV".
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-type.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-type"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-type"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-type"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-type"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-get-url-rewriter" type="admin:appserver-get-url-rewriter">
      <p:documentation>
		  This function returns the path to the URL rewriter 
		  configured for this App Server.  If no URL rewriter
		  is configured, returns the empty string.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-get-url-rewriter.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-get-url-rewriter"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-get-url-rewriter"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-get-url-rewriter"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-get-url-rewriter"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-one-time-request-blackout"
                   type="admin:appserver-one-time-request-blackout">
      <p:documentation>
      This function constructs a one-time request-blackout 
      specification.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-users" required="true"/>
      <p:option name="ml-roles" required="true"/>
      <p:option name="ml-start" required="true"/>
      <p:option name="ml-end" required="true"/>
      <p:option name="ml-duration" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-one-time-request-blackout.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-one-time-request-blackout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="USERS"/>
                  <c:param name="ROLES"/>
                  <c:param name="START"/>
                  <c:param name="END"/>
                  <c:param name="DURATION"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'USERS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-users">
            <p:pipe port="source" step="admin-appserver-one-time-request-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'ROLES']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-roles">
            <p:pipe port="source" step="admin-appserver-one-time-request-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-start">
            <p:pipe port="source" step="admin-appserver-one-time-request-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'END']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-end">
            <p:pipe port="source" step="admin-appserver-one-time-request-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DURATION']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-duration">
            <p:pipe port="source" step="admin-appserver-one-time-request-blackout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-one-time-request-blackout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-one-time-request-blackout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-recurring-request-blackout"
                   type="admin:appserver-recurring-request-blackout">
      <p:documentation>
      This function constructs a request-blackout specification.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-users" required="true"/>
      <p:option name="ml-roles" required="true"/>
      <p:option name="ml-days" required="true"/>
      <p:option name="ml-start-time" required="true"/>
      <p:option name="ml-end-time" required="true"/>
      <p:option name="ml-duration" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-recurring-request-blackout.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-recurring-request-blackout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="USERS"/>
                  <c:param name="ROLES"/>
                  <c:param name="DAYS"/>
                  <c:param name="START_TIME"/>
                  <c:param name="END_TIME"/>
                  <c:param name="DURATION"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'USERS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-users">
            <p:pipe port="source" step="admin-appserver-recurring-request-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'ROLES']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-roles">
            <p:pipe port="source" step="admin-appserver-recurring-request-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DAYS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-days">
            <p:pipe port="source" step="admin-appserver-recurring-request-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START_TIME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-start-time">
            <p:pipe port="source" step="admin-appserver-recurring-request-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'END_TIME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-end-time">
            <p:pipe port="source" step="admin-appserver-recurring-request-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DURATION']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-duration">
            <p:pipe port="source" step="admin-appserver-recurring-request-blackout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-recurring-request-blackout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-recurring-request-blackout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-address" type="admin:appserver-set-address">
      <p:documentation>
		  This function changes the IP Address in the configuration for 
		  the specified App Server to the specified address.  Changing
		  the address is a "cold" operation; when you use 
		   admin:save-configuration  to save the 
		  configuration, it will automatically restart 
		  MarkLogic Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-address.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-address"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-address"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-address"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-address"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-address"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-authentication"
                   type="admin:appserver-set-authentication">
      <p:documentation>
		  This function sets the authentication scheme in the 
		  configuration for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-authentication.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-authentication"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-authentication"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-authentication"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-authentication"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-authentication"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-backlog" type="admin:appserver-set-backlog">
      <p:documentation>
		  This function sets the value in the configuration of
		  the backlog (the maximum number of pending connections 
		  allowed on the HTTP socket) for the specified App Server.
		  This is a "cold" operation; when you use 
		   admin:save-configuration  to save the 
		  configuration, it will automatically restart 
		  MarkLogic Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-backlog.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-backlog"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-backlog"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-backlog"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-backlog"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-backlog"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-collation" type="admin:appserver-set-collation">
      <p:documentation>
		  This function sets the default collation in the 
		  configuration for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-collation.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-collation"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-collation"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-collation"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-collation"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-collation"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-compute-content-length"
                   type="admin:appserver-set-compute-content-length">
      <p:documentation>
      This function changes the value whether a WebDAV server computes 
      content length. 
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-compute-content-length.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-compute-content-length"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-compute-content-length"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-compute-content-length"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-compute-content-length"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-compute-content-length"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-concurrent-request-limit"
                   type="admin:appserver-set-concurrent-request-limit">
      <p:documentation>
      This function sets the limit on concurrent requests that
      any user may have on a particular appserver. Setting the
      limit to 0 indicates there is no bound on the number of
      concurrent requests.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-concurrent-request-limit.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-concurrent-request-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-concurrent-request-limit"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-concurrent-request-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-concurrent-request-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-concurrent-request-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-database" type="admin:appserver-set-database">
      <p:documentation>
      This function sets the value in the configuration of
      the database for the specified App Server.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-database.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-database"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-database"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-database"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-database"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-database"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-debug-allow" type="admin:appserver-set-debug-allow">
      <p:documentation>
		  This function sets the debug allow setting in the 
		  configuration for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-debug-allow.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-debug-allow"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-debug-allow"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-debug-allow"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-debug-allow"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-debug-allow"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-default-time-limit"
                   type="admin:appserver-set-default-time-limit">
      <p:documentation>
      This function sets the default time limit (the maximum total amount
      of time to service a request before the App Server throws a
      timeout exception) in the configuration for the specified 
      App Server.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-default-time-limit.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-default-time-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-default-time-limit"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-default-time-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-default-time-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-default-time-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-default-user" type="admin:appserver-set-default-user">
      <p:documentation>
		  This function sets the default user (for use with 
		  application-level authentication) in the configuration
		  for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-default-user.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-default-user"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-default-user"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-default-user"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-default-user"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-default-user"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-default-xquery-version"
                   type="admin:appserver-set-default-xquery-version">
      <p:documentation>
		  This function sets the default XQuery version setting
		  in the configuration for this App Server.  This setting
		  determines the XQuery dialect used in queries against
		  this App Server when one is not explicitly specified
		  in the XQuery version declaration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-default-xquery-version.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-default-xquery-version"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-default-xquery-version"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-default-xquery-version"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-default-xquery-version"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-default-xquery-version"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-display-last-login"
                   type="admin:appserver-set-display-last-login">
      <p:documentation>
      This function sets the display last login setting in the 
      configuration for the specified App Server.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-display-last-login.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-display-last-login"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-display-last-login"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-display-last-login"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-display-last-login"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-display-last-login"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-enabled" type="admin:appserver-set-enabled">
      <p:documentation>
		  This function sets the enabled state in the configuration
		  for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-enabled.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-enabled"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-enabled"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-enabled"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-enabled"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-enabled"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-error-handler"
                   type="admin:appserver-set-error-handler">
      <p:documentation>
		  This function sets the value of the path to the error
		  handler in the configuration for the specified App Server.
		  The path should specify a relative or absolute path to
		  an XQuery module that is executed in the event of any
		  400 or 500 series HTTP errors (sometime known as a 
		  "sorry" server to give the user a clean error page).
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-error-handler.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-error-handler"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-error-handler"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-error-handler"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-error-handler"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-error-handler"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-keep-alive-timeout"
                   type="admin:appserver-set-keep-alive-timeout">
      <p:documentation>
		  This function sets the keep-alive timeout (the maximum 
		  number of second for subsequent socket requests to time
		  out) in the configuration for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-keep-alive-timeout.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-keep-alive-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-keep-alive-timeout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-keep-alive-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-keep-alive-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-keep-alive-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-last-login" type="admin:appserver-set-last-login">
      <p:documentation>
      This function sets the value in the configuration of
      the last login database for the specified App Server. If the value
      is equal to 0, then the last-login feature is disabled for this
      appserver.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-last-login.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-last-login"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-last-login"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-last-login"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-last-login"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-last-login"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-log-errors" type="admin:appserver-set-log-errors">
      <p:documentation>
		  This function sets the log errors setting in the 
		  configuration for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-log-errors.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-log-errors"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-log-errors"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-log-errors"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-log-errors"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-log-errors"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-max-time-limit"
                   type="admin:appserver-set-max-time-limit">
      <p:documentation>
      This function sets the max time limit (the maximum total amount
      of time to service a request before the App Server throws a
      timeout exception) in the configuration for the specified 
      App Server.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-max-time-limit.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-max-time-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-max-time-limit"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-max-time-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-max-time-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-max-time-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-modules-database"
                   type="admin:appserver-set-modules-database">
      <p:documentation>
		  This function sets the value in the configuration of
		  modules database for the specified App Server to the
		  specified database ID.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-modules-database.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-modules-database"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-modules-database"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-modules-database"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-modules-database"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-modules-database"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-name" type="admin:appserver-set-name">
      <p:documentation>
		  This function changes the name of an existing App Server
		  to the newly specified value.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-name.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-name"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-name"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-name"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-name"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-name"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-output-encoding"
                   type="admin:appserver-set-output-encoding">
      <p:documentation>
		  This function sets the value for the default output encoding
		  in the configuration for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-output-encoding.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-output-encoding"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-output-encoding"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-output-encoding"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-output-encoding"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-output-encoding"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-output-sgml-character-entities"
                   type="admin:appserver-set-output-sgml-character-entities">
      <p:documentation>
		  This function sets the SGML character entity output 
		  setting in the configuration for the specified App Server.
		  The SGML setting determines how characters that can be 
		  represented as SGML entites are serialized upon output
		  by default in a query against the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-output-sgml-character-entities.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-output-sgml-character-entities"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-output-sgml-character-entities"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-output-sgml-character-entities"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-output-sgml-character-entities"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-output-sgml-character-entities"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-port" type="admin:appserver-set-port">
      <p:documentation>
		  This function changes the port in the configuration for 
		  the specified App Server to the specified number.  Changing
		  the port is a "cold" operation; when you use 
		   admin:save-configuration  to save the 
		  configuration, it will automatically restart 
		  MarkLogic Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-port.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-port"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-port"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-port"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-port"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-port"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-pre-commit-trigger-depth"
                   type="admin:appserver-set-pre-commit-trigger-depth">
      <p:documentation>
		  This function sets the maximum depth (how many triggers can 
		  cause other triggers to fire, which in turn cause others 
		  to fire, and so on) in the configuration for the specifed
		  App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-pre-commit-trigger-depth.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-pre-commit-trigger-depth"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-pre-commit-trigger-depth"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-pre-commit-trigger-depth"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-pre-commit-trigger-depth"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-pre-commit-trigger-depth"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-pre-commit-trigger-limit"
                   type="admin:appserver-set-pre-commit-trigger-limit">
      <p:documentation>
		  This function sets the value in the configuration
		  for the maximum number of
		  pre-commit triggers a single statement can invoke 
		  for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-pre-commit-trigger-limit.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-pre-commit-trigger-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-pre-commit-trigger-limit"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-pre-commit-trigger-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-pre-commit-trigger-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-pre-commit-trigger-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-privilege" type="admin:appserver-set-privilege">
      <p:documentation>
		  This function sets an execute privilege in the configuration 
		  for the specified App Server.  When a privilege is set, 
		  the user who makes a request to the App Server must have
		  been granted (via a role, either directly or indirectly)
		  the specified privilege.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-privilege.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-privilege"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-privilege"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-privilege"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-privilege"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-privilege"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-profile-allow"
                   type="admin:appserver-set-profile-allow">
      <p:documentation>
		  This function sets the profile allow setting in the 
		  configuration for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-profile-allow.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-profile-allow"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-profile-allow"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-profile-allow"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-profile-allow"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-profile-allow"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-request-timeout"
                   type="admin:appserver-set-request-timeout">
      <p:documentation>
		  This function sets the value of the socket request 
		  timeout (the number of seconds before the socket times
		  out) in the configuration for the specified App Server. 
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-request-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-request-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-request-timeout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-request-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-request-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-request-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-root" type="admin:appserver-set-root">
      <p:documentation>
		  This function changes the root for a specified App Server
		  to the newly specified value.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-root.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-root"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-root"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-root"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-root"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-root"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-session-timeout"
                   type="admin:appserver-set-session-timeout">
      <p:documentation>
		  This function sets the session timeout value (in seconds)
		  in the configuration for the specified App Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-session-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-session-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-session-timeout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-session-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-session-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-session-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-ssl-allow-sslv3"
                   type="admin:appserver-set-ssl-allow-sslv3">
      <p:documentation>This function enables or disables the SSL v3 protocol for the specified App 
  Server. </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-ssl-allow-sslv3.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-ssl-allow-sslv3"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-ssl-allow-sslv3"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-ssl-allow-sslv3"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-ssl-allow-sslv3"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-ssl-allow-sslv3"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-ssl-allow-tls"
                   type="admin:appserver-set-ssl-allow-tls">
      <p:documentation>This function enables or disables the TLS protocol for the specified App 
  Server.</p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-ssl-allow-tls.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-ssl-allow-tls"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-ssl-allow-tls"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-ssl-allow-tls"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-ssl-allow-tls"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-ssl-allow-tls"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-ssl-certificate-template"
                   type="admin:appserver-set-ssl-certificate-template">
      <p:documentation>
	This function sets an SSL certificate template for the
	specified App Server.</p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-ssl-certificate-template.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-ssl-certificate-template"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-ssl-certificate-template"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-ssl-certificate-template"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-ssl-certificate-template"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-ssl-certificate-template"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-ssl-ciphers" type="admin:appserver-set-ssl-ciphers">
      <p:documentation>
     This function sets SSL ciphers for the specified App Server.  This is the standard 
     cipher specification string for OpenSSL. 
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-ssl-ciphers.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-ssl-ciphers"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-ssl-ciphers"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-ssl-ciphers"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-ssl-ciphers"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-ssl-ciphers"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-ssl-client-certificate-authorities"
                   type="admin:appserver-set-ssl-client-certificate-authorities">
      <p:documentation>This function sets one or more client certificate authorities that sign 
      client certificates for the specified App Server.  This function is typically used along with 
      the  pki:insert-trusted-certificates  and  pki:get-trusted-certificate-ids  
      functions to import trusted Certificate Authorities for client certificates.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-ssl-client-certificate-authorities.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-ssl-client-certificate-authorities"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-ssl-client-certificate-authorities"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-ssl-client-certificate-authorities"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-ssl-client-certificate-authorities"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-ssl-client-certificate-authorities"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-ssl-hostname" type="admin:appserver-set-ssl-hostname">
      <p:documentation>
     This function sets an SSL hostname for the specified App Server.  
      
     The SSL hostname should only be set when a proxy or load 
     balancer is used to represent multiple servers. In this case, you can 
     specify an SSL hostname with this function and all instances of the 
     application server will identify themselves as that host.</p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-ssl-hostname.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-ssl-hostname"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-ssl-hostname"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-ssl-hostname"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-ssl-hostname"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-ssl-hostname"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-ssl-require-client-certificate"
                   type="admin:appserver-set-ssl-require-client-certificate">
      <p:documentation>This function determines whether or not a client certificate is required for the 
  specified App Server. </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-ssl-require-client-certificate.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-ssl-require-client-certificate"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-ssl-require-client-certificate"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-ssl-require-client-certificate"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-ssl-require-client-certificate"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-ssl-require-client-certificate"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-static-expires"
                   type="admin:appserver-set-static-expires">
      <p:documentation>
      This function changes the value of the "expires" HTTP header for a specified App Server
      to the newly specified value.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-static-expires.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-static-expires"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-static-expires"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-static-expires"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-static-expires"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-static-expires"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-threads" type="admin:appserver-set-threads">
      <p:documentation>
		  This function sets the value in the configuration of
		  the maximum number of threads for the specified App Server.
		  This is a "cold" operation; when you use 
		   admin:save-configuration  to save the 
		  configuration, it will automatically restart 
		  MarkLogic Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-threads.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-threads"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-threads"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-threads"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-threads"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-threads"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-appserver-set-url-rewriter" type="admin:appserver-set-url-rewriter">
      <p:documentation>
		  This function sets the value of the path to the URL
		  rewriter in the configuration for the specified App Server.
		  The path should specify a relative or absolute path to
		  an XQuery module that is executed to rewrite incoming URLs.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-appserver-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/appserver-set-url-rewriter.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:appserver-set-url-rewriter"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="APPSERVER_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-id">
            <p:pipe port="source" step="admin-appserver-set-url-rewriter"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-appserver-set-url-rewriter"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-appserver-set-url-rewriter"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-appserver-set-url-rewriter"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-backup" type="admin:database-add-backup">
      <p:documentation>
      This function adds scheduled backup specifications for a 
      database to a configuration. 
    </p:documentation>

      <p:input port="source"/>
      <p:input port="backups" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//backups">
         <p:input port="replacement">
            <p:pipe port="backups" step="admin-database-add-backup"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-element-attribute-word-lexicon"
                   type="admin:database-add-element-attribute-word-lexicon">
      <p:documentation>
		  This function adds an element attribute word lexicon to the 
		  specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="element-attribute-word-lexicons" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-element-attribute-word-lexicon.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//element-attribute-word-lexicons">
         <p:input port="replacement">
            <p:pipe port="element-attribute-word-lexicons"
                    step="admin-database-add-element-attribute-word-lexicon"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-element-attribute-word-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-element-attribute-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-element-attribute-word-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-element-attribute-word-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-element-word-lexicon"
                   type="admin:database-add-element-word-lexicon">
      <p:documentation>
		  This function adds an element word lexicon to the 
		  specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="element-word-lexicons" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-element-word-lexicon.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//element-word-lexicons">
         <p:input port="replacement">
            <p:pipe port="element-word-lexicons" step="admin-database-add-element-word-lexicon"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-element-word-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-element-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-element-word-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-element-word-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-element-word-query-through"
                   type="admin:database-add-element-word-query-through">
      <p:documentation>
		  This function adds an element word query through to the 
		  specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="element-word-query-throughs" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-element-word-query-through.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//element-word-query-throughs">
         <p:input port="replacement">
            <p:pipe port="element-word-query-throughs"
                    step="admin-database-add-element-word-query-through"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-element-word-query-through"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-element-word-query-through"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-element-word-query-through"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-element-word-query-through"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-field" type="admin:database-add-field">
      <p:documentation>
		  This function adds the field specification to the specified 
		  database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="fields" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-field.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//fields">
         <p:input port="replacement">
            <p:pipe port="fields" step="admin-database-add-field"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-field"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-field"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-field"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-field"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-field-excluded-element"
                   type="admin:database-add-field-excluded-element">
      <p:documentation>
		  This function adds the field excluded
		  element specification in the specified 
		  database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="excluded-elements" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-field-excluded-element.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//excluded-elements">
         <p:input port="replacement">
            <p:pipe port="excluded-elements" step="admin-database-add-field-excluded-element"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-field-excluded-element"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-field-excluded-element"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-add-field-excluded-element"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-field-excluded-element"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-field-excluded-element"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-field-included-element"
                   type="admin:database-add-field-included-element">
      <p:documentation>
		  This function adds the field included
		  element specification tn the specified 
		  database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="included-elements" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-field-included-element.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//included-elements">
         <p:input port="replacement">
            <p:pipe port="included-elements" step="admin-database-add-field-included-element"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-field-included-element"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-field-included-element"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-add-field-included-element"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-field-included-element"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-field-included-element"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-field-word-lexicon"
                   type="admin:database-add-field-word-lexicon">
      <p:documentation>
      This function adds a word lexicon to the 
      specified database in the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:input port="word-lexicons" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-field-word-lexicon.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//word-lexicons">
         <p:input port="replacement">
            <p:pipe port="word-lexicons" step="admin-database-add-field-word-lexicon"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-field-word-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-field-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-add-field-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-field-word-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-field-word-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-fragment-parent"
                   type="admin:database-add-fragment-parent">
      <p:documentation>
		  This function adds the specified fragment parent to the 
		  specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="fragment-parents" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-fragment-parent.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//fragment-parents">
         <p:input port="replacement">
            <p:pipe port="fragment-parents" step="admin-database-add-fragment-parent"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-fragment-parent"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-fragment-parent"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-fragment-parent"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-fragment-parent"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-fragment-root" type="admin:database-add-fragment-root">
      <p:documentation>
		  This function adds the specified fragment root to the specified 
		  database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="fragment-roots" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-fragment-root.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//fragment-roots">
         <p:input port="replacement">
            <p:pipe port="fragment-roots" step="admin-database-add-fragment-root"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-fragment-root"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-fragment-root"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-fragment-root"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-fragment-root"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-geospatial-element-attribute-pair-index"
                   type="admin:database-add-geospatial-element-attribute-pair-index">
      <p:documentation>
		  This function adds a geospatial element attribute 
		  pair index to the specified
		  database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="geospatial-element-attribute-pair-indexes" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-geospatial-element-attribute-pair-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//geospatial-element-attribute-pair-indexes">
         <p:input port="replacement">
            <p:pipe port="geospatial-element-attribute-pair-indexes"
                    step="admin-database-add-geospatial-element-attribute-pair-index"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-geospatial-element-attribute-pair-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-geospatial-element-attribute-pair-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-geospatial-element-attribute-pair-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-geospatial-element-attribute-pair-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-geospatial-element-child-index"
                   type="admin:database-add-geospatial-element-child-index">
      <p:documentation>
		  This function adds a geospatial element child index to 
		  the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="geospatial-element-child-indexes" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-geospatial-element-child-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//geospatial-element-child-indexes">
         <p:input port="replacement">
            <p:pipe port="geospatial-element-child-indexes"
                    step="admin-database-add-geospatial-element-child-index"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-geospatial-element-child-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-geospatial-element-child-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-geospatial-element-child-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-geospatial-element-child-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-geospatial-element-index"
                   type="admin:database-add-geospatial-element-index">
      <p:documentation>
		  This function adds a range element index to the specified
		  database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="geospatial-element-indexes" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-geospatial-element-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//geospatial-element-indexes">
         <p:input port="replacement">
            <p:pipe port="geospatial-element-indexes"
                    step="admin-database-add-geospatial-element-index"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-geospatial-element-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-geospatial-element-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-geospatial-element-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-geospatial-element-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-geospatial-element-pair-index"
                   type="admin:database-add-geospatial-element-pair-index">
      <p:documentation>
		  This function adds a geospatial element pair index to 
		  the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="geospatial-element-pair-indexes" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-geospatial-element-pair-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//geospatial-element-pair-indexes">
         <p:input port="replacement">
            <p:pipe port="geospatial-element-pair-indexes"
                    step="admin-database-add-geospatial-element-pair-index"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-geospatial-element-pair-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-geospatial-element-pair-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-geospatial-element-pair-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-geospatial-element-pair-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-merge-blackout"
                   type="admin:database-add-merge-blackout">
      <p:documentation>
		  This function adds a merge blackout specification for a 
		  database to a configuration. 
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="merge-blackouts" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-merge-blackout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//merge-blackouts">
         <p:input port="replacement">
            <p:pipe port="merge-blackouts" step="admin-database-add-merge-blackout"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-merge-blackout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-merge-blackout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-merge-blackout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-merge-blackout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-phrase-around" type="admin:database-add-phrase-around">
      <p:documentation>
		  This function adds a phrase around to the 
		  specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="phrase-arounds" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-phrase-around.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//phrase-arounds">
         <p:input port="replacement">
            <p:pipe port="phrase-arounds" step="admin-database-add-phrase-around"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-phrase-around"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-phrase-around"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-phrase-around"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-phrase-around"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-phrase-through"
                   type="admin:database-add-phrase-through">
      <p:documentation>
		  This function adds a phrase through to the 
		  specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="phrase-throughs" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-phrase-through.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//phrase-throughs">
         <p:input port="replacement">
            <p:pipe port="phrase-throughs" step="admin-database-add-phrase-through"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-phrase-through"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-phrase-through"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-phrase-through"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-phrase-through"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-range-element-attribute-index"
                   type="admin:database-add-range-element-attribute-index">
      <p:documentation>
		  This function adds a range element attribute index to the 
		  specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="attribute-indexes" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-range-element-attribute-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//attribute-indexes">
         <p:input port="replacement">
            <p:pipe port="attribute-indexes"
                    step="admin-database-add-range-element-attribute-index"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-range-element-attribute-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-range-element-attribute-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-range-element-attribute-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-range-element-attribute-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-range-element-index"
                   type="admin:database-add-range-element-index">
      <p:documentation>
		  This function adds a range element index to the specified
		  database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="range-indexes" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-range-element-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//range-indexes">
         <p:input port="replacement">
            <p:pipe port="range-indexes" step="admin-database-add-range-element-index"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-range-element-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-range-element-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-range-element-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-range-element-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-word-lexicon" type="admin:database-add-word-lexicon">
      <p:documentation>
		  This function adds a word lexicon to the 
		  specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="word-lexicons" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-word-lexicon.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//word-lexicons">
         <p:input port="replacement">
            <p:pipe port="word-lexicons" step="admin-database-add-word-lexicon"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-word-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-word-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-word-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-word-query-excluded-element"
                   type="admin:database-add-word-query-excluded-element">
      <p:documentation>
		  This function adds the word query excluded
		  element specification for the specified 
		  database to the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="excluded-elements" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-word-query-excluded-element.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//excluded-elements">
         <p:input port="replacement">
            <p:pipe port="excluded-elements" step="admin-database-add-word-query-excluded-element"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-word-query-excluded-element"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-word-query-excluded-element"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-word-query-excluded-element"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-word-query-excluded-element"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-add-word-query-included-element"
                   type="admin:database-add-word-query-included-element">
      <p:documentation>
		  This function adds the word query included
		  element specification to the specified 
		  database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="included-elements" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-add-word-query-included-element.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//included-elements">
         <p:input port="replacement">
            <p:pipe port="included-elements" step="admin-database-add-word-query-included-element"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-add-word-query-included-element"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-add-word-query-included-element"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-add-word-query-included-element"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-add-word-query-included-element"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-attach-forest" type="admin:database-attach-forest">
      <p:documentation>
		  This function attaches the specified forest to the 
		  specified database.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-attach-forest.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-attach-forest"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-attach-forest"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-database-attach-forest"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-attach-forest"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-attach-forest"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-copy" type="admin:database-copy">
      <p:documentation>
		  This function creates a new database specification with the
		  same settings as the database with the specified ID.  The new
		  database configuration will have the specified name.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-database-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-copy.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:database-copy"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="DATABASE_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-copy"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DATABASE_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-name">
            <p:pipe port="source" step="admin-database-copy"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-copy"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-copy"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-create" type="admin:database-create">
      <p:documentation>
		  This function creates a new database specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-name" required="true"/>
      <p:option name="ml-security-db" required="true"/>
      <p:option name="ml-schema-db" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-create.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:database-create"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_NAME"/>
                  <c:param name="SECURITY_DB"/>
                  <c:param name="SCHEMA_DB"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-name">
            <p:pipe port="source" step="admin-database-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'SECURITY_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-security-db">
            <p:pipe port="source" step="admin-database-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'SCHEMA_DB']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-schema-db">
            <p:pipe port="source" step="admin-database-create"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-create"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-create"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-daily-backup" type="admin:database-daily-backup">
      <p:documentation>This function constructs a daily scheduled database backup.</p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-backup-dir" required="true"/>
      <p:option name="ml-backup-period" required="true"/>
      <p:option name="ml-start-time" required="true"/>
      <p:option name="ml-max-backups" required="true"/>
      <p:option name="ml-backup-security-db" required="true"/>
      <p:option name="ml-backup-schemas-db" required="true"/>
      <p:option name="ml-backup-triggers-db" required="true"/>
      <p:option name="ml-include-replicas" required="false"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-daily-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-daily-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="BACKUP_DIR"/>
                  <c:param name="BACKUP_PERIOD"/>
                  <c:param name="START_TIME"/>
                  <c:param name="MAX_BACKUPS"/>
                  <c:param name="BACKUP_SECURITY_DB"/>
                  <c:param name="BACKUP_SCHEMAS_DB"/>
                  <c:param name="BACKUP_TRIGGERS_DB"/>
                  <c:param name="INCLUDE_REPLICAS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'BACKUP_DIR']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-dir">
            <p:pipe port="source" step="admin-database-daily-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-period">
            <p:pipe port="source" step="admin-database-daily-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START_TIME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-start-time">
            <p:pipe port="source" step="admin-database-daily-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'MAX_BACKUPS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-max-backups">
            <p:pipe port="source" step="admin-database-daily-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_SECURITY_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-security-db">
            <p:pipe port="source" step="admin-database-daily-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_SCHEMAS_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-schemas-db">
            <p:pipe port="source" step="admin-database-daily-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_TRIGGERS_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-triggers-db">
            <p:pipe port="source" step="admin-database-daily-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'INCLUDE_REPLICAS']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-include-replicas">
            <p:pipe port="source" step="admin-database-daily-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-daily-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-daily-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete" type="admin:database-delete">
      <p:documentation>
		  This function deletes the configuration from the 
		  specified database(s).  It does not delete the 
		  configuration or data for any forests attached to the 
		  deleted database(s).
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-ids" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:database-delete"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_IDS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_IDS']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-ids">
            <p:pipe port="source" step="admin-database-delete"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-backup" type="admin:database-delete-backup">
      <p:documentation>
      This function deletes scheduled backup specifications for a 
      database from a configuration. 
    </p:documentation>

      <p:input port="source"/>
      <p:input port="backups" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//backups">
         <p:input port="replacement">
            <p:pipe port="backups" step="admin-database-delete-backup"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-element-attribute-word-lexicon"
                   type="admin:database-delete-element-attribute-word-lexicon">
      <p:documentation>
		  This function deletes an element attribute word lexicon for the 
		  specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="lexicons" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-element-attribute-word-lexicon.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//lexicons">
         <p:input port="replacement">
            <p:pipe port="lexicons" step="admin-database-delete-element-attribute-word-lexicon"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-element-attribute-word-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-element-attribute-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-element-attribute-word-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-element-attribute-word-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-element-word-lexicon"
                   type="admin:database-delete-element-word-lexicon">
      <p:documentation>
		  This function deletes an element word lexicon for the 
		  specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="element-word-lexicons" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-element-word-lexicon.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//element-word-lexicons">
         <p:input port="replacement">
            <p:pipe port="element-word-lexicons" step="admin-database-delete-element-word-lexicon"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-element-word-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-element-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-element-word-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-element-word-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-element-word-query-through"
                   type="admin:database-delete-element-word-query-through">
      <p:documentation>
		  This function deletes an element word query through for the 
		  specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="throughs" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-element-word-query-through.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//throughs">
         <p:input port="replacement">
            <p:pipe port="throughs" step="admin-database-delete-element-word-query-through"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-element-word-query-through"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-element-word-query-through"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-element-word-query-through"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-element-word-query-through"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-field" type="admin:database-delete-field">
      <p:documentation>
		  This function deletes the field specification in the specified 
		  database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-names" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-field.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-field"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAMES"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-field"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAMES']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-names">
            <p:pipe port="source" step="admin-database-delete-field"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-field"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-field"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-field-excluded-element"
                   type="admin:database-delete-field-excluded-element">
      <p:documentation>
		  This function deletes the field excluded
		  element specification in the specified 
		  database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="excluded-elements" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-field-excluded-element.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//excluded-elements">
         <p:input port="replacement">
            <p:pipe port="excluded-elements" step="admin-database-delete-field-excluded-element"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-field-excluded-element"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-field-excluded-element"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-delete-field-excluded-element"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-field-excluded-element"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-field-excluded-element"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-field-included-element"
                   type="admin:database-delete-field-included-element">
      <p:documentation>
		  This function deletes the field included
		  element specification in the specified 
		  database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="included-elements" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-field-included-element.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//included-elements">
         <p:input port="replacement">
            <p:pipe port="included-elements" step="admin-database-delete-field-included-element"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-field-included-element"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-field-included-element"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-delete-field-included-element"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-field-included-element"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-field-included-element"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-field-word-lexicon"
                   type="admin:database-delete-field-word-lexicon">
      <p:documentation>
      This function deletes a word lexicon for the 
      specified database from the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:input port="word-lexicons" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-field-word-lexicon.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//word-lexicons">
         <p:input port="replacement">
            <p:pipe port="word-lexicons" step="admin-database-delete-field-word-lexicon"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-field-word-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-field-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-delete-field-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-field-word-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-field-word-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-fragment-parent"
                   type="admin:database-delete-fragment-parent">
      <p:documentation>
		  This function deletes the specified fragment parent in the 
		  specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="fragment-parents" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-fragment-parent.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//fragment-parents">
         <p:input port="replacement">
            <p:pipe port="fragment-parents" step="admin-database-delete-fragment-parent"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-fragment-parent"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-fragment-parent"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-fragment-parent"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-fragment-parent"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-fragment-root"
                   type="admin:database-delete-fragment-root">
      <p:documentation>
		  This function deletes the specified fragment root in the 
		  specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="fragment-roots" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-fragment-root.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//fragment-roots">
         <p:input port="replacement">
            <p:pipe port="fragment-roots" step="admin-database-delete-fragment-root"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-fragment-root"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-fragment-root"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-fragment-root"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-fragment-root"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-geospatial-element-attribute-pair-index"
                   type="admin:database-delete-geospatial-element-attribute-pair-index">
      <p:documentation>
		  This function deletes a geospatial element attribute 
		  pair index in the specified
		  database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="indexes" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-geospatial-element-attribute-pair-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//indexes">
         <p:input port="replacement">
            <p:pipe port="indexes"
                    step="admin-database-delete-geospatial-element-attribute-pair-index"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-geospatial-element-attribute-pair-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source"
                    step="admin-database-delete-geospatial-element-attribute-pair-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source"
                    step="admin-database-delete-geospatial-element-attribute-pair-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source"
                    step="admin-database-delete-geospatial-element-attribute-pair-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-geospatial-element-child-index"
                   type="admin:database-delete-geospatial-element-child-index">
      <p:documentation>
		  This function deletes a geospatial element child index for the 
		  specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="geospatial-element-child-indexes" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-geospatial-element-child-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//geospatial-element-child-indexes">
         <p:input port="replacement">
            <p:pipe port="geospatial-element-child-indexes"
                    step="admin-database-delete-geospatial-element-child-index"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-geospatial-element-child-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-geospatial-element-child-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-geospatial-element-child-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-geospatial-element-child-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-geospatial-element-index"
                   type="admin:database-delete-geospatial-element-index">
      <p:documentation>
		  This function deletes a geospatial element index for the 
		  specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="geospatial-element-indexes" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-geospatial-element-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//geospatial-element-indexes">
         <p:input port="replacement">
            <p:pipe port="geospatial-element-indexes"
                    step="admin-database-delete-geospatial-element-index"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-geospatial-element-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-geospatial-element-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-geospatial-element-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-geospatial-element-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-geospatial-element-pair-index"
                   type="admin:database-delete-geospatial-element-pair-index">
      <p:documentation>
		  This function deletes a geospatial element pair index for 
		  the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="geospatial-element-pair-indexes" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-geospatial-element-pair-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//geospatial-element-pair-indexes">
         <p:input port="replacement">
            <p:pipe port="geospatial-element-pair-indexes"
                    step="admin-database-delete-geospatial-element-pair-index"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-geospatial-element-pair-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-geospatial-element-pair-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-geospatial-element-pair-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-geospatial-element-pair-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-merge-blackout"
                   type="admin:database-delete-merge-blackout">
      <p:documentation>
		  This function deletes a merge blackout specification for a 
		  database from a configuration. 
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="blackouts" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-merge-blackout.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//blackouts">
         <p:input port="replacement">
            <p:pipe port="blackouts" step="admin-database-delete-merge-blackout"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-merge-blackout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-merge-blackout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-merge-blackout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-merge-blackout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-phrase-around"
                   type="admin:database-delete-phrase-around">
      <p:documentation>
		  This function deletes a phrase around for the 
		  specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="phrase-arounds" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-phrase-around.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//phrase-arounds">
         <p:input port="replacement">
            <p:pipe port="phrase-arounds" step="admin-database-delete-phrase-around"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-phrase-around"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-phrase-around"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-phrase-around"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-phrase-around"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-phrase-through"
                   type="admin:database-delete-phrase-through">
      <p:documentation>
		  This function deletes a phrase through for the 
		  specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="phrase-throughs" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-phrase-through.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//phrase-throughs">
         <p:input port="replacement">
            <p:pipe port="phrase-throughs" step="admin-database-delete-phrase-through"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-phrase-through"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-phrase-through"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-phrase-through"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-phrase-through"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-range-element-attribute-index"
                   type="admin:database-delete-range-element-attribute-index">
      <p:documentation>
		  This function deletes a range element attribute index for 
		  the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="attribute-indexes" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-range-element-attribute-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//attribute-indexes">
         <p:input port="replacement">
            <p:pipe port="attribute-indexes"
                    step="admin-database-delete-range-element-attribute-index"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-range-element-attribute-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-range-element-attribute-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-range-element-attribute-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-range-element-attribute-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-range-element-index"
                   type="admin:database-delete-range-element-index">
      <p:documentation>
		  This function deletes a range element index for the specified
		  database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="range-indexes" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-range-element-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//range-indexes">
         <p:input port="replacement">
            <p:pipe port="range-indexes" step="admin-database-delete-range-element-index"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-range-element-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-range-element-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-range-element-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-range-element-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-word-lexicon"
                   type="admin:database-delete-word-lexicon">
      <p:documentation>
		  This function deletes a word lexicon for the 
		  specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="word-lexicons" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-word-lexicon.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//word-lexicons">
         <p:input port="replacement">
            <p:pipe port="word-lexicons" step="admin-database-delete-word-lexicon"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-word-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-word-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-word-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-word-query-excluded-element"
                   type="admin:database-delete-word-query-excluded-element">
      <p:documentation>
		  This function deletes the word query excluded
		  element specification in the specified 
		  database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="excluded-elements" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-word-query-excluded-element.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//excluded-elements">
         <p:input port="replacement">
            <p:pipe port="excluded-elements"
                    step="admin-database-delete-word-query-excluded-element"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-word-query-excluded-element"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-word-query-excluded-element"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-word-query-excluded-element"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-word-query-excluded-element"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-delete-word-query-included-element"
                   type="admin:database-delete-word-query-included-element">
      <p:documentation>
		  This function deletes the word query included
		  element specification in the specified 
		  database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="included-elements" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-delete-word-query-included-element.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//included-elements">
         <p:input port="replacement">
            <p:pipe port="included-elements"
                    step="admin-database-delete-word-query-included-element"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-delete-word-query-included-element"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-delete-word-query-included-element"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-delete-word-query-included-element"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-delete-word-query-included-element"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-detach-forest" type="admin:database-detach-forest">
      <p:documentation>
		  This function detaches the specified forest from the 
		  specified database.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-detach-forest.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-detach-forest"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-detach-forest"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-database-detach-forest"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-detach-forest"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-detach-forest"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-element-attribute-word-lexicon"
                   type="admin:database-element-attribute-word-lexicon">
      <p:documentation>
		  This function constructs an element attribute word 
		  lexicon specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-parent-namespace" required="true"/>
      <p:option name="ml-parent-localname" required="true"/>
      <p:option name="ml-namespace" required="true"/>
      <p:option name="ml-localname" required="true"/>
      <p:option name="ml-collation" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-element-attribute-word-lexicon.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-element-attribute-word-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="PARENT_NAMESPACE"/>
                  <c:param name="PARENT_LOCALNAME"/>
                  <c:param name="NAMESPACE"/>
                  <c:param name="LOCALNAME"/>
                  <c:param name="COLLATION"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'PARENT_NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-parent-namespace">
            <p:pipe port="source" step="admin-database-element-attribute-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'PARENT_LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-parent-localname">
            <p:pipe port="source" step="admin-database-element-attribute-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace">
            <p:pipe port="source" step="admin-database-element-attribute-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-localname">
            <p:pipe port="source" step="admin-database-element-attribute-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'COLLATION']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-collation">
            <p:pipe port="source" step="admin-database-element-attribute-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-element-attribute-word-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-element-attribute-word-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-element-word-lexicon"
                   type="admin:database-element-word-lexicon">
      <p:documentation>
		  This function constructs an element word lexicon specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-namespace" required="true"/>
      <p:option name="ml-localname" required="true"/>
      <p:option name="ml-collation" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-element-word-lexicon.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-element-word-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="NAMESPACE"/>
                  <c:param name="LOCALNAME"/>
                  <c:param name="COLLATION"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace">
            <p:pipe port="source" step="admin-database-element-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-localname">
            <p:pipe port="source" step="admin-database-element-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'COLLATION']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-collation">
            <p:pipe port="source" step="admin-database-element-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-element-word-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-element-word-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-element-word-query-through"
                   type="admin:database-element-word-query-through">
      <p:documentation>
		  This function constructs an element word query
		  through specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-namespace" required="true"/>
      <p:option name="ml-localname" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-element-word-query-through.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-element-word-query-through"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="NAMESPACE"/>
                  <c:param name="LOCALNAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace">
            <p:pipe port="source" step="admin-database-element-word-query-through"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LOCALNAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-localname">
            <p:pipe port="source" step="admin-database-element-word-query-through"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-element-word-query-through"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-element-word-query-through"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-excluded-element" type="admin:database-excluded-element">
      <p:documentation>
		  This function constructs an excluded element specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-namespace" required="true"/>
      <p:option name="ml-localname" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-excluded-element.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-excluded-element"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="NAMESPACE"/>
                  <c:param name="LOCALNAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace">
            <p:pipe port="source" step="admin-database-excluded-element"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LOCALNAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-localname">
            <p:pipe port="source" step="admin-database-excluded-element"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-excluded-element"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-excluded-element"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-exists" type="admin:database-exists">
      <p:documentation>
  This function determines whether or not the specified database
  exists.  Returns  true  if the database exists, otherwise 
   false  is returned.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-exists.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:database-exists"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-name">
            <p:pipe port="source" step="admin-database-exists"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-exists"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-exists"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-field" type="admin:database-field">
      <p:documentation>
		  This function constructs a field specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-include-root" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-field.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:database-field"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="INCLUDE_ROOT"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-field"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'INCLUDE_ROOT']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-include-root">
            <p:pipe port="source" step="admin-database-field"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-field"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-field"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-fragment-parent" type="admin:database-fragment-parent">
      <p:documentation>
		  This function constructs a fragment parent specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-namespace" required="true"/>
      <p:option name="ml-localname" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-fragment-parent.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-fragment-parent"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="NAMESPACE"/>
                  <c:param name="LOCALNAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace">
            <p:pipe port="source" step="admin-database-fragment-parent"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LOCALNAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-localname">
            <p:pipe port="source" step="admin-database-fragment-parent"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-fragment-parent"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-fragment-parent"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-fragment-root" type="admin:database-fragment-root">
      <p:documentation>
		  This function constructs a fragment root specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-namespace" required="true"/>
      <p:option name="ml-localname" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-fragment-root.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-fragment-root"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="NAMESPACE"/>
                  <c:param name="LOCALNAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace">
            <p:pipe port="source" step="admin-database-fragment-root"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LOCALNAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-localname">
            <p:pipe port="source" step="admin-database-fragment-root"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-fragment-root"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-fragment-root"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-geospatial-element-attribute-pair-index"
                   type="admin:database-geospatial-element-attribute-pair-index">
      <p:documentation>
		  This function constructs a geospatial element attribute 
		  pair index specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-parent-namespace" required="true"/>
      <p:option name="ml-parent-localname" required="true"/>
      <p:option name="ml-latitude-namespace" required="true"/>
      <p:option name="ml-latitude-localname" required="true"/>
      <p:option name="ml-longitude-namespace" required="true"/>
      <p:option name="ml-longitude-localname" required="true"/>
      <p:option name="ml-coordinate-system" required="true"/>
      <p:option name="ml-range-value-positions" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-geospatial-element-attribute-pair-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-geospatial-element-attribute-pair-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="PARENT_NAMESPACE"/>
                  <c:param name="PARENT_LOCALNAME"/>
                  <c:param name="LATITUDE_NAMESPACE"/>
                  <c:param name="LATITUDE_LOCALNAME"/>
                  <c:param name="LONGITUDE_NAMESPACE"/>
                  <c:param name="LONGITUDE_LOCALNAME"/>
                  <c:param name="COORDINATE_SYSTEM"/>
                  <c:param name="RANGE_VALUE_POSITIONS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'PARENT_NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-parent-namespace">
            <p:pipe port="source" step="admin-database-geospatial-element-attribute-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'PARENT_LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-parent-localname">
            <p:pipe port="source" step="admin-database-geospatial-element-attribute-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LATITUDE_NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-latitude-namespace">
            <p:pipe port="source" step="admin-database-geospatial-element-attribute-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LATITUDE_LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-latitude-localname">
            <p:pipe port="source" step="admin-database-geospatial-element-attribute-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LONGITUDE_NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-longitude-namespace">
            <p:pipe port="source" step="admin-database-geospatial-element-attribute-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LONGITUDE_LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-longitude-localname">
            <p:pipe port="source" step="admin-database-geospatial-element-attribute-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'COORDINATE_SYSTEM']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-coordinate-system">
            <p:pipe port="source" step="admin-database-geospatial-element-attribute-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'RANGE_VALUE_POSITIONS']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-range-value-positions">
            <p:pipe port="source" step="admin-database-geospatial-element-attribute-pair-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-geospatial-element-attribute-pair-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-geospatial-element-attribute-pair-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-geospatial-element-child-index"
                   type="admin:database-geospatial-element-child-index">
      <p:documentation>
		  This function constructs a geospatial element child index
		  specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-parent-namespace" required="true"/>
      <p:option name="ml-parent-localname" required="true"/>
      <p:option name="ml-namespace" required="true"/>
      <p:option name="ml-localname" required="true"/>
      <p:option name="ml-coordinate-system" required="true"/>
      <p:option name="ml-range-value-positions" required="true"/>
      <p:option name="ml-point-format" required="false"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-geospatial-element-child-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-geospatial-element-child-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="PARENT_NAMESPACE"/>
                  <c:param name="PARENT_LOCALNAME"/>
                  <c:param name="NAMESPACE"/>
                  <c:param name="LOCALNAME"/>
                  <c:param name="COORDINATE_SYSTEM"/>
                  <c:param name="RANGE_VALUE_POSITIONS"/>
                  <c:param name="POINT_FORMAT"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'PARENT_NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-parent-namespace">
            <p:pipe port="source" step="admin-database-geospatial-element-child-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'PARENT_LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-parent-localname">
            <p:pipe port="source" step="admin-database-geospatial-element-child-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace">
            <p:pipe port="source" step="admin-database-geospatial-element-child-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-localname">
            <p:pipe port="source" step="admin-database-geospatial-element-child-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'COORDINATE_SYSTEM']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-coordinate-system">
            <p:pipe port="source" step="admin-database-geospatial-element-child-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'RANGE_VALUE_POSITIONS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-range-value-positions">
            <p:pipe port="source" step="admin-database-geospatial-element-child-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'POINT_FORMAT']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-point-format">
            <p:pipe port="source" step="admin-database-geospatial-element-child-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-geospatial-element-child-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-geospatial-element-child-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-geospatial-element-index"
                   type="admin:database-geospatial-element-index">
      <p:documentation>
		  This function constructs a geospatial element index
		  specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-namespace" required="true"/>
      <p:option name="ml-localname" required="true"/>
      <p:option name="ml-coordinate-system" required="true"/>
      <p:option name="ml-range-value-positions" required="true"/>
      <p:option name="ml-point-format" required="false"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-geospatial-element-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-geospatial-element-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="NAMESPACE"/>
                  <c:param name="LOCALNAME"/>
                  <c:param name="COORDINATE_SYSTEM"/>
                  <c:param name="RANGE_VALUE_POSITIONS"/>
                  <c:param name="POINT_FORMAT"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace">
            <p:pipe port="source" step="admin-database-geospatial-element-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-localname">
            <p:pipe port="source" step="admin-database-geospatial-element-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'COORDINATE_SYSTEM']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-coordinate-system">
            <p:pipe port="source" step="admin-database-geospatial-element-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'RANGE_VALUE_POSITIONS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-range-value-positions">
            <p:pipe port="source" step="admin-database-geospatial-element-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'POINT_FORMAT']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-point-format">
            <p:pipe port="source" step="admin-database-geospatial-element-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-geospatial-element-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-geospatial-element-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-geospatial-element-pair-index"
                   type="admin:database-geospatial-element-pair-index">
      <p:documentation>
		  This function constructs a geospatial element pair index
		  specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-parent-namespace" required="true"/>
      <p:option name="ml-parent-localname" required="true"/>
      <p:option name="ml-latitude-namespace" required="true"/>
      <p:option name="ml-latitude-localname" required="true"/>
      <p:option name="ml-longitude-namespace" required="true"/>
      <p:option name="ml-longitude-localname" required="true"/>
      <p:option name="ml-coordinate-system" required="true"/>
      <p:option name="ml-range-value-positions" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-geospatial-element-pair-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-geospatial-element-pair-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="PARENT_NAMESPACE"/>
                  <c:param name="PARENT_LOCALNAME"/>
                  <c:param name="LATITUDE_NAMESPACE"/>
                  <c:param name="LATITUDE_LOCALNAME"/>
                  <c:param name="LONGITUDE_NAMESPACE"/>
                  <c:param name="LONGITUDE_LOCALNAME"/>
                  <c:param name="COORDINATE_SYSTEM"/>
                  <c:param name="RANGE_VALUE_POSITIONS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'PARENT_NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-parent-namespace">
            <p:pipe port="source" step="admin-database-geospatial-element-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'PARENT_LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-parent-localname">
            <p:pipe port="source" step="admin-database-geospatial-element-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LATITUDE_NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-latitude-namespace">
            <p:pipe port="source" step="admin-database-geospatial-element-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LATITUDE_LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-latitude-localname">
            <p:pipe port="source" step="admin-database-geospatial-element-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LONGITUDE_NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-longitude-namespace">
            <p:pipe port="source" step="admin-database-geospatial-element-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LONGITUDE_LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-longitude-localname">
            <p:pipe port="source" step="admin-database-geospatial-element-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'COORDINATE_SYSTEM']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-coordinate-system">
            <p:pipe port="source" step="admin-database-geospatial-element-pair-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'RANGE_VALUE_POSITIONS']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-range-value-positions">
            <p:pipe port="source" step="admin-database-geospatial-element-pair-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-geospatial-element-pair-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-geospatial-element-pair-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-attached-forests"
                   type="admin:database-get-attached-forests">
      <p:documentation>
		  This function returns the attached forest IDs
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-attached-forests.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-attached-forests"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-attached-forests"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-attached-forests"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-attached-forests"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-attribute-value-positions"
                   type="admin:database-get-attribute-value-positions">
      <p:documentation>
		  This function returns the attribute value positions setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-attribute-value-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-attribute-value-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-attribute-value-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-attribute-value-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-attribute-value-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-backups" type="admin:database-get-backups">
      <p:documentation>
      This function returns the scheduled backups
      for the specified database from the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-backups.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-backups"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-backups"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-backups"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-backups"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-collection-lexicon"
                   type="admin:database-get-collection-lexicon">
      <p:documentation>
		  This function returns the collection lexicon setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-collection-lexicon.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-collection-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-collection-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-collection-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-collection-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-directory-creation"
                   type="admin:database-get-directory-creation">
      <p:documentation>
		  This function returns the directory creation setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-directory-creation.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-directory-creation"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-directory-creation"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-directory-creation"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-directory-creation"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-element-attribute-word-lexicons"
                   type="admin:database-get-element-attribute-word-lexicons">
      <p:documentation>
		  This function returns the element attribute word lexicons 
		  specification(s)
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-element-attribute-word-lexicons.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-element-attribute-word-lexicons"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-element-attribute-word-lexicons"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-element-attribute-word-lexicons"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-element-attribute-word-lexicons"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-element-value-positions"
                   type="admin:database-get-element-value-positions">
      <p:documentation>
		  This function returns the element value positions setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-element-value-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-element-value-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-element-value-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-element-value-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-element-value-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-element-word-lexicons"
                   type="admin:database-get-element-word-lexicons">
      <p:documentation>
		  This function returns the element word lexicons 
		  specification(s)
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-element-word-lexicons.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-element-word-lexicons"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-element-word-lexicons"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-element-word-lexicons"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-element-word-lexicons"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-element-word-positions"
                   type="admin:database-get-element-word-positions">
      <p:documentation>
		  This function returns the element word positions setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-element-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-element-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-element-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-element-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-element-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-element-word-query-throughs"
                   type="admin:database-get-element-word-query-throughs">
      <p:documentation>
		  This function returns the element word query throughs 
		  specification(s)
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-element-word-query-throughs.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-element-word-query-throughs"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-element-word-query-throughs"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-element-word-query-throughs"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-element-word-query-throughs"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-enabled" type="admin:database-get-enabled">
      <p:documentation>
		  This function returns the enabled value
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-enabled.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-enabled"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-enabled"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-enabled"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-enabled"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-expunge-locks" type="admin:database-get-expunge-locks">
      <p:documentation>
		  This function returns the expunge locks setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-expunge-locks.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-expunge-locks"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-expunge-locks"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-expunge-locks"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-expunge-locks"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-fast-case-sensitive-searches"
                   type="admin:database-get-fast-case-sensitive-searches">
      <p:documentation>
		  This function returns the fast case sensitive searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-fast-case-sensitive-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-fast-case-sensitive-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-fast-case-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-fast-case-sensitive-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-fast-case-sensitive-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-fast-diacritic-sensitive-searches"
                   type="admin:database-get-fast-diacritic-sensitive-searches">
      <p:documentation>
		  This function returns the fast diacritic sensitive 
		  searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-fast-diacritic-sensitive-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-fast-diacritic-sensitive-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-fast-diacritic-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-fast-diacritic-sensitive-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-fast-diacritic-sensitive-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-fast-element-character-searches"
                   type="admin:database-get-fast-element-character-searches">
      <p:documentation>
		  This function returns the fast element character 
		  searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-fast-element-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-fast-element-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-fast-element-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-fast-element-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-fast-element-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-fast-element-phrase-searches"
                   type="admin:database-get-fast-element-phrase-searches">
      <p:documentation>
		  This function returns the fast element phrase searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-fast-element-phrase-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-fast-element-phrase-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-fast-element-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-fast-element-phrase-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-fast-element-phrase-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-fast-element-trailing-wildcard-searches"
                   type="admin:database-get-fast-element-trailing-wildcard-searches">
      <p:documentation>
		  This function returns the trailing wildcard searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-fast-element-trailing-wildcard-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-fast-element-trailing-wildcard-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-fast-element-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-fast-element-trailing-wildcard-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-fast-element-trailing-wildcard-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-fast-element-word-searches"
                   type="admin:database-get-fast-element-word-searches">
      <p:documentation>
		  This function returns the fast element word searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-fast-element-word-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-fast-element-word-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-fast-element-word-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-fast-element-word-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-fast-element-word-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-fast-phrase-searches"
                   type="admin:database-get-fast-phrase-searches">
      <p:documentation>
		  This function returns the fast phrase searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-fast-phrase-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-fast-phrase-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-fast-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-fast-phrase-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-fast-phrase-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-fast-reverse-searches"
                   type="admin:database-get-fast-reverse-searches">
      <p:documentation>
		  This function returns the fast reverse searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-fast-reverse-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-fast-reverse-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-fast-reverse-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-fast-reverse-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-fast-reverse-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field" type="admin:database-get-field">
      <p:documentation>
		  This function returns the field specification
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-excluded-elements"
                   type="admin:database-get-field-excluded-elements">
      <p:documentation>
		  This function returns the field excluded elements
		  specification
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-excluded-elements.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-excluded-elements"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-excluded-elements"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-excluded-elements"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-excluded-elements"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-excluded-elements"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-fast-case-sensitive-searches"
                   type="admin:database-get-field-fast-case-sensitive-searches">
      <p:documentation>
      This function returns true if the fast case sensitive searches setting
      for the specified field is enabled. Otherwise, it returns the 
      empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-fast-case-sensitive-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-fast-case-sensitive-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-fast-case-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-fast-case-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-fast-case-sensitive-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-fast-case-sensitive-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-fast-diacritic-sensitive-searches"
                   type="admin:database-get-field-fast-diacritic-sensitive-searches">
      <p:documentation>
		  This function returns true if the fast diacritic sensitive 
		  searches setting for the specified field is enabled. 
		  Otherwise, it returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-fast-diacritic-sensitive-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-fast-diacritic-sensitive-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-fast-diacritic-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-fast-diacritic-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-fast-diacritic-sensitive-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-fast-diacritic-sensitive-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-fast-phrase-searches"
                   type="admin:database-get-field-fast-phrase-searches">
      <p:documentation>
      This function returns true if the fast phrase searches setting
      for the specified field is enabled. Otherwise, it returns the 
      empty sequence. 
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-fast-phrase-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-fast-phrase-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-fast-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-fast-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-fast-phrase-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-fast-phrase-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-include-document-root"
                   type="admin:database-get-field-include-document-root">
      <p:documentation>
		  This function returns the field include document root setting
		  for the specified field from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-include-document-root.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-include-document-root"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-include-document-root"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-include-document-root"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-include-document-root"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-include-document-root"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-included-elements"
                   type="admin:database-get-field-included-elements">
      <p:documentation>
		  This function returns the fields included elements 
		  specification for the specified database from the 
		  configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-included-elements.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-included-elements"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-included-elements"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-included-elements"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-included-elements"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-included-elements"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-one-character-searches"
                   type="admin:database-get-field-one-character-searches">
      <p:documentation>
      This function returns true if the one character searches setting
      for the specified field is enabled. Otherwise, it returns the 
      empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-one-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-one-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-one-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-one-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-one-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-one-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-stemmed-searches"
                   type="admin:database-get-field-stemmed-searches">
      <p:documentation>
      This function returns stemmed searches setting
      for the specified field if configured. Otherwise, it returns the 
      empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-stemmed-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-stemmed-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-stemmed-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-stemmed-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-stemmed-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-stemmed-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-three-character-searches"
                   type="admin:database-get-field-three-character-searches">
      <p:documentation>
      This function returns true if the three character searches setting
      for the specified field is enabled. Otherwise, it returns the 
      empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-three-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-three-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-three-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-three-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-three-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-three-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-three-character-word-positions"
                   type="admin:database-get-field-three-character-word-positions">
      <p:documentation>
      This function returns true if the three character word positions setting
      for the specified field is enabled. Otherwise, it returns the 
      empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-three-character-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-three-character-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-three-character-word-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-three-character-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-three-character-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-three-character-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-trailing-wildcard-searches"
                   type="admin:database-get-field-trailing-wildcard-searches">
      <p:documentation>
      This function returns true if the trailing wildcard searches setting
      for the specified field is enabled. Otherwise, it returns the 
      empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-trailing-wildcard-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-trailing-wildcard-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-trailing-wildcard-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-trailing-wildcard-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-trailing-wildcard-word-positions"
                   type="admin:database-get-field-trailing-wildcard-word-positions">
      <p:documentation>
      This function returns true if the trailing wildcard word positions setting
      for the specified field is enabled. Otherwise, it returns the 
      empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-trailing-wildcard-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-trailing-wildcard-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-trailing-wildcard-word-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-trailing-wildcard-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-trailing-wildcard-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-trailing-wildcard-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-two-character-searches"
                   type="admin:database-get-field-two-character-searches">
      <p:documentation>
      This function returns true if the two character searches setting
      for the specified field is enabled. Otherwise, it returns the 
      empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-two-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-two-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-two-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-two-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-two-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-two-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-word-lexicons"
                   type="admin:database-get-field-word-lexicons">
      <p:documentation>
      This function returns the word lexicons 
      specification(s)
      for the specified database from the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-word-lexicons.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-word-lexicons"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-word-lexicons"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-word-lexicons"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-word-lexicons"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-word-lexicons"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-field-word-searches"
                   type="admin:database-get-field-word-searches">
      <p:documentation>
		  This function returns true if the word searches setting
		  for the specified field is enabled. Otherwise, it returns the 
		  empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-field-word-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-field-word-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-field-word-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-get-field-word-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-field-word-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-field-word-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-fields" type="admin:database-get-fields">
      <p:documentation>
		  This function returns the fields specification(s)
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-fields.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-fields"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-fields"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-fields"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-fields"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-format-compatibility"
                   type="admin:database-get-format-compatibility">
      <p:documentation>
		  This function returns the format compatibility setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-format-compatibility.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-format-compatibility"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-format-compatibility"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-format-compatibility"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-format-compatibility"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-fragment-parents"
                   type="admin:database-get-fragment-parents">
      <p:documentation>
		  This function returns the fragment parents specification
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-fragment-parents.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-fragment-parents"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-fragment-parents"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-fragment-parents"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-fragment-parents"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-fragment-roots"
                   type="admin:database-get-fragment-roots">
      <p:documentation>
		  This function returns the fragment roots specification
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-fragment-roots.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-fragment-roots"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-fragment-roots"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-fragment-roots"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-fragment-roots"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-geospatial-element-attribute-pair-indexes"
                   type="admin:database-get-geospatial-element-attribute-pair-indexes">
      <p:documentation>
		  This function returns the geospatial element attribute pair 
		  indexes specification(s)
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-geospatial-element-attribute-pair-indexes.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-geospatial-element-attribute-pair-indexes"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source"
                    step="admin-database-get-geospatial-element-attribute-pair-indexes"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source"
                    step="admin-database-get-geospatial-element-attribute-pair-indexes"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source"
                    step="admin-database-get-geospatial-element-attribute-pair-indexes"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-geospatial-element-child-indexes"
                   type="admin:database-get-geospatial-element-child-indexes">
      <p:documentation>
		  This function returns the geospatial element child indexes 
		  specification(s)
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-geospatial-element-child-indexes.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-geospatial-element-child-indexes"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-geospatial-element-child-indexes"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-geospatial-element-child-indexes"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-geospatial-element-child-indexes"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-geospatial-element-indexes"
                   type="admin:database-get-geospatial-element-indexes">
      <p:documentation>
		  This function returns the geospatial element indexes 
		  specification(s)
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-geospatial-element-indexes.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-geospatial-element-indexes"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-geospatial-element-indexes"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-geospatial-element-indexes"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-geospatial-element-indexes"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-geospatial-element-pair-indexes"
                   type="admin:database-get-geospatial-element-pair-indexes">
      <p:documentation>
		  This function returns the geospatial element pair indexes 
		  specification(s)
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-geospatial-element-pair-indexes.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-geospatial-element-pair-indexes"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-geospatial-element-pair-indexes"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-geospatial-element-pair-indexes"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-geospatial-element-pair-indexes"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-id" type="admin:database-get-id">
      <p:documentation>
		  This function returns the ID for the specified database from the configuration.
		  The difference between this function and  xdmp:database()  
		  is that the ID from 
		  this function can come from a database that has not yet been saved (that is, 
		  from a database that has been created in the same query with the Admin library
		  but has not yet been saved to the cluster configuration files).  This ID 
		  enables you to completely configure a newly created database without the 
		  need to first save the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-id.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:database-get-id"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-name">
            <p:pipe port="source" step="admin-database-get-id"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-id"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-id"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-in-memory-limit"
                   type="admin:database-get-in-memory-limit">
      <p:documentation>
		  This function returns the in memory limit setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-in-memory-limit.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-in-memory-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-in-memory-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-in-memory-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-in-memory-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-in-memory-list-size"
                   type="admin:database-get-in-memory-list-size">
      <p:documentation>
		  This function returns the im memory list size setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-in-memory-list-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-in-memory-list-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-in-memory-list-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-in-memory-list-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-in-memory-list-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-in-memory-range-index-size"
                   type="admin:database-get-in-memory-range-index-size">
      <p:documentation>
		  This function returns the in memory range index size setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-in-memory-range-index-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-in-memory-range-index-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-in-memory-range-index-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-in-memory-range-index-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-in-memory-range-index-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-in-memory-reverse-index-size"
                   type="admin:database-get-in-memory-reverse-index-size">
      <p:documentation>
		  This function returns the in memory reverse index size setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-in-memory-reverse-index-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-in-memory-reverse-index-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-in-memory-reverse-index-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-in-memory-reverse-index-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-in-memory-reverse-index-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-in-memory-tree-size"
                   type="admin:database-get-in-memory-tree-size">
      <p:documentation>
		  This function returns the in memory tree size setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-in-memory-tree-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-in-memory-tree-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-in-memory-tree-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-in-memory-tree-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-in-memory-tree-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-index-detection"
                   type="admin:database-get-index-detection">
      <p:documentation>
		  This function returns the index detection setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-index-detection.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-index-detection"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-index-detection"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-index-detection"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-index-detection"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-inherit-collections"
                   type="admin:database-get-inherit-collections">
      <p:documentation>
		  This function returns the inherit collections setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-inherit-collections.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-inherit-collections"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-inherit-collections"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-inherit-collections"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-inherit-collections"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-inherit-permissions"
                   type="admin:database-get-inherit-permissions">
      <p:documentation>
		  This function returns the inherit positions setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-inherit-permissions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-inherit-permissions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-inherit-permissions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-inherit-permissions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-inherit-permissions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-inherit-quality"
                   type="admin:database-get-inherit-quality">
      <p:documentation>
		  This function returns the inherit quality setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-inherit-quality.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-inherit-quality"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-inherit-quality"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-inherit-quality"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-inherit-quality"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-journal-size" type="admin:database-get-journal-size">
      <p:documentation>
		  This function returns the journal size setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-journal-size.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-journal-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-journal-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-journal-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-journal-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-journaling" type="admin:database-get-journaling">
      <p:documentation>
		  This function returns the journaling setting for the
		  specified database in the configuration.  When set
		  to  strict , the journal protects against
		  MarkLogic Server process failures, host operating
		  system kernel failures, and host hardware failures.
		  When set to  fast , the journal protects
		  against MarkLogic Server process failures but not
		  against host operating system kernel failures or host
		  hardware failures.  When set to  off , the
		  journal does not protect against MarkLogic Server
		  process failures, host operating system kernel
		  failures, or host hardware failures.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-journaling.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-journaling"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-journaling"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-journaling"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-journaling"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-language" type="admin:database-get-language">
      <p:documentation>
		  This function returns the language
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-language.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-language"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-language"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-language"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-language"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-locking" type="admin:database-get-locking">
      <p:documentation>
		  This function returns the locking setting for the
		  specified database in the configuration.  When set to
		   strict , locking enforces mutual exclusion
		  on existing documents and on new documents.  When set
		  to  fast , locking enforces mutual
		  exclusion on existing documents but not on new
		  documents.  When set to  off , locking does
		  not enforce mutual exclusion on existing documents or
		  on new documents.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-locking.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-locking"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-locking"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-locking"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-locking"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-maintain-directory-last-modified"
                   type="admin:database-get-maintain-directory-last-modified">
      <p:documentation>
		  This function returns the maintain directory last
		  modified setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-maintain-directory-last-modified.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-maintain-directory-last-modified"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-maintain-directory-last-modified"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-maintain-directory-last-modified"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-maintain-directory-last-modified"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-maintain-last-modified"
                   type="admin:database-get-maintain-last-modified">
      <p:documentation>
		  This function returns the maintain last modified setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-maintain-last-modified.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-maintain-last-modified"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-maintain-last-modified"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-maintain-last-modified"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-maintain-last-modified"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-merge-blackouts"
                   type="admin:database-get-merge-blackouts">
      <p:documentation>
		  This function returns the merge blackouts specification
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-merge-blackouts.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-merge-blackouts"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-merge-blackouts"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-merge-blackouts"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-merge-blackouts"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-merge-enable" type="admin:database-get-merge-enable">
      <p:documentation>
		  This function returns the merge enable setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-merge-enable.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-merge-enable"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-merge-enable"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-merge-enable"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-merge-enable"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-merge-max-size"
                   type="admin:database-get-merge-max-size">
      <p:documentation>
		  This function returns the merge max size setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-merge-max-size.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-merge-max-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-merge-max-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-merge-max-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-merge-max-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-merge-min-ratio"
                   type="admin:database-get-merge-min-ratio">
      <p:documentation>
		  This function returns the merge min ratio setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-merge-min-ratio.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-merge-min-ratio"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-merge-min-ratio"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-merge-min-ratio"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-merge-min-ratio"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-merge-min-size"
                   type="admin:database-get-merge-min-size">
      <p:documentation>
		  This function returns the merge min size setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-merge-min-size.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-merge-min-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-merge-min-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-merge-min-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-merge-min-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-merge-priority"
                   type="admin:database-get-merge-priority">
      <p:documentation>
		  This function returns the CPU scheduler priority for merges
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-merge-priority.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-merge-priority"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-merge-priority"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-merge-priority"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-merge-priority"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-merge-timestamp"
                   type="admin:database-get-merge-timestamp">
      <p:documentation>
		  This function returns the merge timestamp setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-merge-timestamp.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-merge-timestamp"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-merge-timestamp"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-merge-timestamp"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-merge-timestamp"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-name" type="admin:database-get-name">
      <p:documentation>
		  This function returns the name
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-name.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:database-get-name"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-name"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-name"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-name"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-one-character-searches"
                   type="admin:database-get-one-character-searches">
      <p:documentation>
		  This function returns the one character searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-one-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-one-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-one-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-one-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-one-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-phrase-arounds"
                   type="admin:database-get-phrase-arounds">
      <p:documentation>
		  This function returns the phrase arounds 
		  specification(s)
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-phrase-arounds.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-phrase-arounds"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-phrase-arounds"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-phrase-arounds"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-phrase-arounds"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-phrase-throughs"
                   type="admin:database-get-phrase-throughs">
      <p:documentation>
		  This function returns the phrase throughs 
		  specification(s)
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-phrase-throughs.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-phrase-throughs"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-phrase-throughs"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-phrase-throughs"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-phrase-throughs"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-positions-list-max-size"
                   type="admin:database-get-positions-list-max-size">
      <p:documentation>
		  This function returns the positions list max size setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-positions-list-max-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-positions-list-max-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-positions-list-max-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-positions-list-max-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-positions-list-max-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-preallocate-journals"
                   type="admin:database-get-preallocate-journals">
      <p:documentation>
		  This function returns the preallocate journals setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-preallocate-journals.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-preallocate-journals"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-preallocate-journals"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-preallocate-journals"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-preallocate-journals"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-preload-mapped-data"
                   type="admin:database-get-preload-mapped-data">
      <p:documentation>
		  This function returns the preload mapped data setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-preload-mapped-data.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-preload-mapped-data"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-preload-mapped-data"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-preload-mapped-data"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-preload-mapped-data"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-range-element-attribute-indexes"
                   type="admin:database-get-range-element-attribute-indexes">
      <p:documentation>
		  This function returns the range element attribute
		  indexes specification(s)
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-range-element-attribute-indexes.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-range-element-attribute-indexes"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-range-element-attribute-indexes"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-range-element-attribute-indexes"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-range-element-attribute-indexes"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-range-element-indexes"
                   type="admin:database-get-range-element-indexes">
      <p:documentation>
		  This function returns the range element indexes 
		  specification(s)
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-range-element-indexes.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-range-element-indexes"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-range-element-indexes"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-range-element-indexes"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-range-element-indexes"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-range-index-optimize"
                   type="admin:database-get-range-index-optimize">
      <p:documentation>
		  This function returns the range index optimize setting
		  for the specified database from the configuration.
		  When set to  facet-time , range indexes are
		  optimized to minimize the amount of CPU time
		  used. When set to  memory-size , range
		  indexes are optimized to minimize the amount of memory
		  used.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-range-index-optimize.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-range-index-optimize"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-range-index-optimize"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-range-index-optimize"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-range-index-optimize"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-reindexer-enable"
                   type="admin:database-get-reindexer-enable">
      <p:documentation>
		  This function returns the reindexer enable setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-reindexer-enable.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-reindexer-enable"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-reindexer-enable"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-reindexer-enable"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-reindexer-enable"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-reindexer-throttle"
                   type="admin:database-get-reindexer-throttle">
      <p:documentation>
		  This function returns the reindexer throttle setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-reindexer-throttle.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-reindexer-throttle"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-reindexer-throttle"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-reindexer-throttle"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-reindexer-throttle"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-reindexer-timestamp"
                   type="admin:database-get-reindexer-timestamp">
      <p:documentation>
		  This function returns the reindexer timestamp setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-reindexer-timestamp.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-reindexer-timestamp"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-reindexer-timestamp"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-reindexer-timestamp"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-reindexer-timestamp"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-schema-database"
                   type="admin:database-get-schema-database">
      <p:documentation>
		  This function returns the ID of the schema database
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-schema-database.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-schema-database"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-schema-database"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-schema-database"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-schema-database"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-security-database"
                   type="admin:database-get-security-database">
      <p:documentation>
		  This function returns the ID of the security database
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-security-database.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-security-database"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-security-database"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-security-database"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-security-database"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-stemmed-searches"
                   type="admin:database-get-stemmed-searches">
      <p:documentation>
		  This function returns the stemmed searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-stemmed-searches.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-stemmed-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-stemmed-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-stemmed-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-stemmed-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-tf-normalization"
                   type="admin:database-get-tf-normalization">
      <p:documentation>This function returns the current term-frequency 
  normalization setting for the database.  The returned value is either 
  ( scaled-log ), which means to scale the term frequency based on the size of 
  the document, or  unscaled-log , which means to use term frequency as a function 
  of the actual term frequency in a document, regardless of the document size. 

</p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-tf-normalization.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-tf-normalization"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-tf-normalization"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-tf-normalization"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-tf-normalization"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-three-character-searches"
                   type="admin:database-get-three-character-searches">
      <p:documentation>
		  This function returns the three character searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-three-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-three-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-three-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-three-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-three-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-three-character-word-positions"
                   type="admin:database-get-three-character-word-positions">
      <p:documentation>
		  This function returns the three character word positions 
		  setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-three-character-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-three-character-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-three-character-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-three-character-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-three-character-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-trailing-wildcard-searches"
                   type="admin:database-get-trailing-wildcard-searches">
      <p:documentation>
		  This function returns the trailing wildcard searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-trailing-wildcard-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-trailing-wildcard-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-trailing-wildcard-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-trailing-wildcard-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-trailing-wildcard-word-positions"
                   type="admin:database-get-trailing-wildcard-word-positions">
      <p:documentation>
		  This function returns the trailing wildcard word  
		  positions setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-trailing-wildcard-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-trailing-wildcard-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-trailing-wildcard-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-trailing-wildcard-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-trailing-wildcard-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-triggers-database"
                   type="admin:database-get-triggers-database">
      <p:documentation>
		  This function returns the ID of the triggers database
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-triggers-database.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-triggers-database"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-triggers-database"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-triggers-database"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-triggers-database"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-two-character-searches"
                   type="admin:database-get-two-character-searches">
      <p:documentation>
		  This function returns the two character searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-two-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-two-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-two-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-two-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-two-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-uri-lexicon" type="admin:database-get-uri-lexicon">
      <p:documentation>
		  This function returns the URI lexicon setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-uri-lexicon.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-uri-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-uri-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-uri-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-uri-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-lexicons" type="admin:database-get-word-lexicons">
      <p:documentation>
		  This function returns the word lexicons 
		  specification(s)
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-lexicons.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-lexicons"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-lexicons"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-lexicons"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-lexicons"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-positions"
                   type="admin:database-get-word-positions">
      <p:documentation>
		  This function returns the word positions setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-positions.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-excluded-elements"
                   type="admin:database-get-word-query-excluded-elements">
      <p:documentation>
		  This function returns the word query excluded elements setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-excluded-elements.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-excluded-elements"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-query-excluded-elements"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-query-excluded-elements"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-query-excluded-elements"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-fast-case-sensitive-searches"
                   type="admin:database-get-word-query-fast-case-sensitive-searches">
      <p:documentation>
		  This function returns true if the word query fast case
		  sensitive searches setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-fast-case-sensitive-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-fast-case-sensitive-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-query-fast-case-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-query-fast-case-sensitive-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-query-fast-case-sensitive-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-fast-diacritic-sensitive-searches"
                   type="admin:database-get-word-query-fast-diacritic-sensitive-searches">
      <p:documentation>
		  This function returns true if the word query fast diacritic 
		  sensitive searches setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-fast-diacritic-sensitive-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-fast-diacritic-sensitive-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source"
                    step="admin-database-get-word-query-fast-diacritic-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source"
                    step="admin-database-get-word-query-fast-diacritic-sensitive-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source"
                    step="admin-database-get-word-query-fast-diacritic-sensitive-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-fast-phrase-searches"
                   type="admin:database-get-word-query-fast-phrase-searches">
      <p:documentation>
		  This function returns true if the word query fast phrase
		  searches setting
		  for the specified database is set in the configuration.
		  Otherwise, it returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-fast-phrase-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-fast-phrase-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-query-fast-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-query-fast-phrase-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-query-fast-phrase-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-include-document-root"
                   type="admin:database-get-word-query-include-document-root">
      <p:documentation>
		  This function returns the word query include
		  document root setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-include-document-root.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-include-document-root"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-query-include-document-root"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-query-include-document-root"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-query-include-document-root"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-included-elements"
                   type="admin:database-get-word-query-included-elements">
      <p:documentation>
		  This function returns the word query included elements setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-included-elements.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-included-elements"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-query-included-elements"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-query-included-elements"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-query-included-elements"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-one-character-searches"
                   type="admin:database-get-word-query-one-character-searches">
      <p:documentation>
		  This function returns true if the word query one character
		  searches setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-one-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-one-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-query-one-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-query-one-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-query-one-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-stemmed-searches"
                   type="admin:database-get-word-query-stemmed-searches">
      <p:documentation>
		  This function returns the reindexer word query stemmed 
		  searches setting for the specified database from the 
		  configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-stemmed-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-stemmed-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-query-stemmed-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-query-stemmed-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-query-stemmed-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-three-character-searches"
                   type="admin:database-get-word-query-three-character-searches">
      <p:documentation>
		  This function returns true if the word query three character
		  searches setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-three-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-three-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-query-three-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-query-three-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-query-three-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-three-character-word-positions"
                   type="admin:database-get-word-query-three-character-word-positions">
      <p:documentation>
		  This function returns true if the word query three character
		  word positions setting is enabled
		  for the specified database from the configuration.
		  Otherwise, it returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-three-character-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-three-character-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source"
                    step="admin-database-get-word-query-three-character-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source"
                    step="admin-database-get-word-query-three-character-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source"
                    step="admin-database-get-word-query-three-character-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-trailing-wildcard-searches"
                   type="admin:database-get-word-query-trailing-wildcard-searches">
      <p:documentation>
		  This function returns true if the word query trailing
		  wildcard searches setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-trailing-wildcard-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-trailing-wildcard-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-query-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-query-trailing-wildcard-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-query-trailing-wildcard-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-trailing-wildcard-word-positions"
                   type="admin:database-get-word-query-trailing-wildcard-word-positions">
      <p:documentation>
		  This function returns true if the word query trailing 
		  wildcard word positions setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-trailing-wildcard-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-trailing-wildcard-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source"
                    step="admin-database-get-word-query-trailing-wildcard-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source"
                    step="admin-database-get-word-query-trailing-wildcard-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source"
                    step="admin-database-get-word-query-trailing-wildcard-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-two-character-searches"
                   type="admin:database-get-word-query-two-character-searches">
      <p:documentation>
		  This function returns true if the word query two character
		  searches setting is enabled
		  for the specified database in the configuration.
		  Otherwise, it returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-two-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-two-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-query-two-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-query-two-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-query-two-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-query-word-searches"
                   type="admin:database-get-word-query-word-searches">
      <p:documentation>
		  This function returns true if the word query searches setting
		  for the specified database is enabled in the configuration.  
		  Otherwise, it returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-query-word-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-query-word-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-query-word-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-query-word-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-query-word-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-get-word-searches" type="admin:database-get-word-searches">
      <p:documentation>
		  This function returns the word searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-get-word-searches.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-get-word-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-get-word-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-get-word-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-get-word-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-hourly-backup" type="admin:database-hourly-backup">
      <p:documentation>This function constructs a hourly scheduled database backup.</p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-backup-dir" required="true"/>
      <p:option name="ml-backup-period" required="true"/>
      <p:option name="ml-start-minute" required="true"/>
      <p:option name="ml-max-backups" required="true"/>
      <p:option name="ml-backup-security-db" required="true"/>
      <p:option name="ml-backup-schemas-db" required="true"/>
      <p:option name="ml-backup-triggers-db" required="true"/>
      <p:option name="ml-include-replicas" required="false"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-hourly-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-hourly-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="BACKUP_DIR"/>
                  <c:param name="BACKUP_PERIOD"/>
                  <c:param name="START_MINUTE"/>
                  <c:param name="MAX_BACKUPS"/>
                  <c:param name="BACKUP_SECURITY_DB"/>
                  <c:param name="BACKUP_SCHEMAS_DB"/>
                  <c:param name="BACKUP_TRIGGERS_DB"/>
                  <c:param name="INCLUDE_REPLICAS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'BACKUP_DIR']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-dir">
            <p:pipe port="source" step="admin-database-hourly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-period">
            <p:pipe port="source" step="admin-database-hourly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START_MINUTE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-start-minute">
            <p:pipe port="source" step="admin-database-hourly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'MAX_BACKUPS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-max-backups">
            <p:pipe port="source" step="admin-database-hourly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_SECURITY_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-security-db">
            <p:pipe port="source" step="admin-database-hourly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_SCHEMAS_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-schemas-db">
            <p:pipe port="source" step="admin-database-hourly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_TRIGGERS_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-triggers-db">
            <p:pipe port="source" step="admin-database-hourly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'INCLUDE_REPLICAS']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-include-replicas">
            <p:pipe port="source" step="admin-database-hourly-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-hourly-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-hourly-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-included-element" type="admin:database-included-element">
      <p:documentation>
		  This function constructs an included element specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-namespace" required="true"/>
      <p:option name="ml-localname" required="true"/>
      <p:option name="ml-weight" required="true"/>
      <p:option name="ml-attribute-namespace" required="true"/>
      <p:option name="ml-attribute-localname" required="true"/>
      <p:option name="ml-attribute-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-included-element.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-included-element"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="NAMESPACE"/>
                  <c:param name="LOCALNAME"/>
                  <c:param name="WEIGHT"/>
                  <c:param name="ATTRIBUTE_NAMESPACE"/>
                  <c:param name="ATTRIBUTE_LOCALNAME"/>
                  <c:param name="ATTRIBUTE_VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace">
            <p:pipe port="source" step="admin-database-included-element"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-localname">
            <p:pipe port="source" step="admin-database-included-element"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'WEIGHT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-weight">
            <p:pipe port="source" step="admin-database-included-element"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'ATTRIBUTE_NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-attribute-namespace">
            <p:pipe port="source" step="admin-database-included-element"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'ATTRIBUTE_LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-attribute-localname">
            <p:pipe port="source" step="admin-database-included-element"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'ATTRIBUTE_VALUE']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-attribute-value">
            <p:pipe port="source" step="admin-database-included-element"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-included-element"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-included-element"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-minutely-backup" type="admin:database-minutely-backup">
      <p:documentation>This function constructs a scheduled database backup on a number-of-minutes basis.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-backup-dir" required="true"/>
      <p:option name="ml-backup-period" required="true"/>
      <p:option name="ml-max-backups" required="true"/>
      <p:option name="ml-backup-security-db" required="true"/>
      <p:option name="ml-backup-schemas-db" required="true"/>
      <p:option name="ml-backup-triggers-db" required="true"/>
      <p:option name="ml-include-replicas" required="false"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-minutely-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-minutely-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="BACKUP_DIR"/>
                  <c:param name="BACKUP_PERIOD"/>
                  <c:param name="MAX_BACKUPS"/>
                  <c:param name="BACKUP_SECURITY_DB"/>
                  <c:param name="BACKUP_SCHEMAS_DB"/>
                  <c:param name="BACKUP_TRIGGERS_DB"/>
                  <c:param name="INCLUDE_REPLICAS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'BACKUP_DIR']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-dir">
            <p:pipe port="source" step="admin-database-minutely-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-period">
            <p:pipe port="source" step="admin-database-minutely-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'MAX_BACKUPS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-max-backups">
            <p:pipe port="source" step="admin-database-minutely-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_SECURITY_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-security-db">
            <p:pipe port="source" step="admin-database-minutely-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_SCHEMAS_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-schemas-db">
            <p:pipe port="source" step="admin-database-minutely-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_TRIGGERS_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-triggers-db">
            <p:pipe port="source" step="admin-database-minutely-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'INCLUDE_REPLICAS']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-include-replicas">
            <p:pipe port="source" step="admin-database-minutely-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-minutely-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-minutely-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-monthly-backup" type="admin:database-monthly-backup">
      <p:documentation>
      This function constructs a monthly scheduled backup.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-backup-dir" required="true"/>
      <p:option name="ml-backup-period" required="true"/>
      <p:option name="ml-backup-month-day" required="true"/>
      <p:option name="ml-start-time" required="true"/>
      <p:option name="ml-max-backups" required="true"/>
      <p:option name="ml-backup-security-db" required="true"/>
      <p:option name="ml-backup-schemas-db" required="true"/>
      <p:option name="ml-backup-triggers-db" required="true"/>
      <p:option name="ml-include-replicas" required="false"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-monthly-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-monthly-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="BACKUP_DIR"/>
                  <c:param name="BACKUP_PERIOD"/>
                  <c:param name="BACKUP_MONTH_DAY"/>
                  <c:param name="START_TIME"/>
                  <c:param name="MAX_BACKUPS"/>
                  <c:param name="BACKUP_SECURITY_DB"/>
                  <c:param name="BACKUP_SCHEMAS_DB"/>
                  <c:param name="BACKUP_TRIGGERS_DB"/>
                  <c:param name="INCLUDE_REPLICAS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'BACKUP_DIR']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-dir">
            <p:pipe port="source" step="admin-database-monthly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-period">
            <p:pipe port="source" step="admin-database-monthly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_MONTH_DAY']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-month-day">
            <p:pipe port="source" step="admin-database-monthly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START_TIME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-start-time">
            <p:pipe port="source" step="admin-database-monthly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'MAX_BACKUPS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-max-backups">
            <p:pipe port="source" step="admin-database-monthly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_SECURITY_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-security-db">
            <p:pipe port="source" step="admin-database-monthly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_SCHEMAS_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-schemas-db">
            <p:pipe port="source" step="admin-database-monthly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_TRIGGERS_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-triggers-db">
            <p:pipe port="source" step="admin-database-monthly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'INCLUDE_REPLICAS']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-include-replicas">
            <p:pipe port="source" step="admin-database-monthly-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-monthly-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-monthly-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-one-time-backup" type="admin:database-one-time-backup">
      <p:documentation>
      This function constructs a one-time backup.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-backup-dir" required="true"/>
      <p:option name="ml-start" required="true"/>
      <p:option name="ml-max-backups" required="true"/>
      <p:option name="ml-backup-security-db" required="true"/>
      <p:option name="ml-backup-schemas-db" required="true"/>
      <p:option name="ml-backup-triggers-db" required="true"/>
      <p:option name="ml-include-replicas" required="false"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-one-time-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-one-time-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="BACKUP_DIR"/>
                  <c:param name="START"/>
                  <c:param name="MAX_BACKUPS"/>
                  <c:param name="BACKUP_SECURITY_DB"/>
                  <c:param name="BACKUP_SCHEMAS_DB"/>
                  <c:param name="BACKUP_TRIGGERS_DB"/>
                  <c:param name="INCLUDE_REPLICAS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'BACKUP_DIR']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-dir">
            <p:pipe port="source" step="admin-database-one-time-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-start">
            <p:pipe port="source" step="admin-database-one-time-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'MAX_BACKUPS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-max-backups">
            <p:pipe port="source" step="admin-database-one-time-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_SECURITY_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-security-db">
            <p:pipe port="source" step="admin-database-one-time-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_SCHEMAS_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-schemas-db">
            <p:pipe port="source" step="admin-database-one-time-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_TRIGGERS_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-triggers-db">
            <p:pipe port="source" step="admin-database-one-time-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'INCLUDE_REPLICAS']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-include-replicas">
            <p:pipe port="source" step="admin-database-one-time-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-one-time-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-one-time-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-one-time-merge-blackout"
                   type="admin:database-one-time-merge-blackout">
      <p:documentation>
		  This function constructs a one-time merge-blackout 
		  specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-limit" required="true"/>
      <p:option name="ml-merge-priority" required="true"/>
      <p:option name="ml-start" required="true"/>
      <p:option name="ml-end" required="true"/>
      <p:option name="ml-duration" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-one-time-merge-blackout.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-one-time-merge-blackout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="LIMIT"/>
                  <c:param name="MERGE_PRIORITY"/>
                  <c:param name="START"/>
                  <c:param name="END"/>
                  <c:param name="DURATION"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'LIMIT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-limit">
            <p:pipe port="source" step="admin-database-one-time-merge-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'MERGE_PRIORITY']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-merge-priority">
            <p:pipe port="source" step="admin-database-one-time-merge-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-start">
            <p:pipe port="source" step="admin-database-one-time-merge-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'END']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-end">
            <p:pipe port="source" step="admin-database-one-time-merge-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DURATION']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-duration">
            <p:pipe port="source" step="admin-database-one-time-merge-blackout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-one-time-merge-blackout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-one-time-merge-blackout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-phrase-around" type="admin:database-phrase-around">
      <p:documentation>
		  This function constructs a phrase through specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-namespace" required="true"/>
      <p:option name="ml-localname" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-phrase-around.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-phrase-around"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="NAMESPACE"/>
                  <c:param name="LOCALNAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace">
            <p:pipe port="source" step="admin-database-phrase-around"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LOCALNAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-localname">
            <p:pipe port="source" step="admin-database-phrase-around"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-phrase-around"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-phrase-around"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-phrase-through" type="admin:database-phrase-through">
      <p:documentation>
		  This function constructs a phrase through specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-namespace" required="true"/>
      <p:option name="ml-localname" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-phrase-through.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-phrase-through"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="NAMESPACE"/>
                  <c:param name="LOCALNAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace">
            <p:pipe port="source" step="admin-database-phrase-through"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LOCALNAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-localname">
            <p:pipe port="source" step="admin-database-phrase-through"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-phrase-through"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-phrase-through"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-range-element-attribute-index"
                   type="admin:database-range-element-attribute-index">
      <p:documentation>
		  This function constructs a range element attribute index
		  specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-scalar-type" required="true"/>
      <p:option name="ml-parent-namespace" required="true"/>
      <p:option name="ml-parent-localname" required="true"/>
      <p:option name="ml-namespace" required="true"/>
      <p:option name="ml-localname" required="true"/>
      <p:option name="ml-collation" required="true"/>
      <p:option name="ml-range-value-positions" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-range-element-attribute-index.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-range-element-attribute-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="SCALAR_TYPE"/>
                  <c:param name="PARENT_NAMESPACE"/>
                  <c:param name="PARENT_LOCALNAME"/>
                  <c:param name="NAMESPACE"/>
                  <c:param name="LOCALNAME"/>
                  <c:param name="COLLATION"/>
                  <c:param name="RANGE_VALUE_POSITIONS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'SCALAR_TYPE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-scalar-type">
            <p:pipe port="source" step="admin-database-range-element-attribute-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'PARENT_NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-parent-namespace">
            <p:pipe port="source" step="admin-database-range-element-attribute-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'PARENT_LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-parent-localname">
            <p:pipe port="source" step="admin-database-range-element-attribute-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace">
            <p:pipe port="source" step="admin-database-range-element-attribute-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-localname">
            <p:pipe port="source" step="admin-database-range-element-attribute-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'COLLATION']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-collation">
            <p:pipe port="source" step="admin-database-range-element-attribute-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'RANGE_VALUE_POSITIONS']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-range-value-positions">
            <p:pipe port="source" step="admin-database-range-element-attribute-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-range-element-attribute-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-range-element-attribute-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-range-element-index"
                   type="admin:database-range-element-index">
      <p:documentation>
		  This function constructs a range element index
		  specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-scalar-type" required="true"/>
      <p:option name="ml-namespace" required="true"/>
      <p:option name="ml-localname" required="true"/>
      <p:option name="ml-collation" required="true"/>
      <p:option name="ml-range-value-positions" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-range-element-index.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-range-element-index"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="SCALAR_TYPE"/>
                  <c:param name="NAMESPACE"/>
                  <c:param name="LOCALNAME"/>
                  <c:param name="COLLATION"/>
                  <c:param name="RANGE_VALUE_POSITIONS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'SCALAR_TYPE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-scalar-type">
            <p:pipe port="source" step="admin-database-range-element-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace">
            <p:pipe port="source" step="admin-database-range-element-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'LOCALNAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-localname">
            <p:pipe port="source" step="admin-database-range-element-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'COLLATION']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-collation">
            <p:pipe port="source" step="admin-database-range-element-index"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'RANGE_VALUE_POSITIONS']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-range-value-positions">
            <p:pipe port="source" step="admin-database-range-element-index"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-range-element-index"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-range-element-index"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-recurring-merge-blackout"
                   type="admin:database-recurring-merge-blackout">
      <p:documentation>
		  This function constructs a merge-blackout specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-limit" required="true"/>
      <p:option name="ml-merge-priority" required="true"/>
      <p:option name="ml-days" required="true"/>
      <p:option name="ml-start-time" required="true"/>
      <p:option name="ml-end-time" required="true"/>
      <p:option name="ml-duration" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-recurring-merge-blackout.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-recurring-merge-blackout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="LIMIT"/>
                  <c:param name="MERGE_PRIORITY"/>
                  <c:param name="DAYS"/>
                  <c:param name="START_TIME"/>
                  <c:param name="END_TIME"/>
                  <c:param name="DURATION"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'LIMIT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-limit">
            <p:pipe port="source" step="admin-database-recurring-merge-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'MERGE_PRIORITY']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-merge-priority">
            <p:pipe port="source" step="admin-database-recurring-merge-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DAYS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-days">
            <p:pipe port="source" step="admin-database-recurring-merge-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START_TIME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-start-time">
            <p:pipe port="source" step="admin-database-recurring-merge-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'END_TIME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-end-time">
            <p:pipe port="source" step="admin-database-recurring-merge-blackout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DURATION']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-duration">
            <p:pipe port="source" step="admin-database-recurring-merge-blackout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-recurring-merge-blackout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-recurring-merge-blackout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-attribute-value-positions"
                   type="admin:database-set-attribute-value-positions">
      <p:documentation>
		  This function sets the attribute value positions setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-attribute-value-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-attribute-value-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-attribute-value-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-attribute-value-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-attribute-value-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-attribute-value-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-collection-lexicon"
                   type="admin:database-set-collection-lexicon">
      <p:documentation>
		  This function sets the collection lexicon setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-collection-lexicon.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-collection-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-collection-lexicon"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-collection-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-collection-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-collection-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-directory-creation"
                   type="admin:database-set-directory-creation">
      <p:documentation>
		  This function sets the directory creation setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-directory-creation.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-directory-creation"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-directory-creation"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-directory-creation"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-directory-creation"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-directory-creation"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-element-value-positions"
                   type="admin:database-set-element-value-positions">
      <p:documentation>
		  This function sets the element value positions setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-element-value-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-element-value-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-element-value-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-element-value-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-element-value-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-element-value-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-element-word-positions"
                   type="admin:database-set-element-word-positions">
      <p:documentation>
		  This function sets the element word positions setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-element-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-element-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-element-word-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-element-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-element-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-element-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-enabled" type="admin:database-set-enabled">
      <p:documentation>
		  This function sets the enabled value
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-enabled.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-enabled"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-enabled"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-enabled"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-enabled"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-enabled"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-expunge-locks" type="admin:database-set-expunge-locks">
      <p:documentation>
		  This function sets the expunge locks setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-expunge-locks.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-expunge-locks"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-expunge-locks"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-expunge-locks"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-expunge-locks"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-expunge-locks"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-fast-case-sensitive-searches"
                   type="admin:database-set-fast-case-sensitive-searches">
      <p:documentation>
		  This function sets the fast case sensitive searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-fast-case-sensitive-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-fast-case-sensitive-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-fast-case-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-fast-case-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-fast-case-sensitive-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-fast-case-sensitive-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-fast-diacritic-sensitive-searches"
                   type="admin:database-set-fast-diacritic-sensitive-searches">
      <p:documentation>
		  This function sets the fast diacritic-sensitive searches 
		  setting for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-fast-diacritic-sensitive-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-fast-diacritic-sensitive-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-fast-diacritic-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-fast-diacritic-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-fast-diacritic-sensitive-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-fast-diacritic-sensitive-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-fast-element-character-searches"
                   type="admin:database-set-fast-element-character-searches">
      <p:documentation>
		  This function sets the fast element character searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-fast-element-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-fast-element-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-fast-element-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-fast-element-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-fast-element-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-fast-element-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-fast-element-phrase-searches"
                   type="admin:database-set-fast-element-phrase-searches">
      <p:documentation>
		  This function sets the fast element phrase searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-fast-element-phrase-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-fast-element-phrase-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-fast-element-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-fast-element-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-fast-element-phrase-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-fast-element-phrase-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-fast-element-trailing-wildcard-searches"
                   type="admin:database-set-fast-element-trailing-wildcard-searches">
      <p:documentation>
		  This function sets the fast element trailing wildcard searches 
		  setting for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-fast-element-trailing-wildcard-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-fast-element-trailing-wildcard-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-fast-element-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-fast-element-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-fast-element-trailing-wildcard-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-fast-element-trailing-wildcard-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-fast-element-word-searches"
                   type="admin:database-set-fast-element-word-searches">
      <p:documentation>
		  This function sets the element word searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-fast-element-word-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-fast-element-word-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-fast-element-word-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-fast-element-word-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-fast-element-word-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-fast-element-word-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-fast-phrase-searches"
                   type="admin:database-set-fast-phrase-searches">
      <p:documentation>
		  This function sets the fast phrase searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-fast-phrase-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-fast-phrase-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-fast-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-fast-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-fast-phrase-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-fast-phrase-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-fast-reverse-searches"
                   type="admin:database-set-fast-reverse-searches">
      <p:documentation>
		  This function sets the fast reverse searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-fast-reverse-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-fast-reverse-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-fast-reverse-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-fast-reverse-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-fast-reverse-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-fast-reverse-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-field-fast-case-sensitive-searches"
                   type="admin:database-set-field-fast-case-sensitive-searches">
      <p:documentation>
		  This function sets the field fast case sensitive
		  searches setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-field-fast-case-sensitive-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-field-fast-case-sensitive-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-field-fast-case-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-set-field-fast-case-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-field-fast-case-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-field-fast-case-sensitive-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-field-fast-case-sensitive-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-field-fast-diacritic-sensitive-searches"
                   type="admin:database-set-field-fast-diacritic-sensitive-searches">
      <p:documentation>
		  This function sets the field fast diacritic sensitive
		  searches setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-field-fast-diacritic-sensitive-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-field-fast-diacritic-sensitive-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-field-fast-diacritic-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-set-field-fast-diacritic-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-field-fast-diacritic-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-field-fast-diacritic-sensitive-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-field-fast-diacritic-sensitive-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-field-fast-phrase-searches"
                   type="admin:database-set-field-fast-phrase-searches">
      <p:documentation>
		  This function sets the field fast phrase searches setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-field-fast-phrase-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-field-fast-phrase-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-field-fast-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-set-field-fast-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-field-fast-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-field-fast-phrase-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-field-fast-phrase-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-field-include-document-root"
                   type="admin:database-set-field-include-document-root">
      <p:documentation>
		  This function sets the field include document root setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-field-include-document-root.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-field-include-document-root"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-field-include-document-root"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-set-field-include-document-root"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-field-include-document-root"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-field-include-document-root"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-field-include-document-root"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-field-name" type="admin:database-set-field-name">
      <p:documentation>
		  This function sets the field name setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-field-name.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-field-name"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-field-name"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-set-field-name"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-field-name"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-field-name"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-field-name"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-field-one-character-searches"
                   type="admin:database-set-field-one-character-searches">
      <p:documentation>
		  This function sets the field one character searches setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-field-one-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-field-one-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-field-one-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-set-field-one-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-field-one-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-field-one-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-field-one-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-field-stemmed-searches"
                   type="admin:database-set-field-stemmed-searches">
      <p:documentation>
		  This function sets the field stemmed searches setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-field-stemmed-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-field-stemmed-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-field-stemmed-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-set-field-stemmed-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-field-stemmed-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-field-stemmed-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-field-stemmed-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-field-three-character-searches"
                   type="admin:database-set-field-three-character-searches">
      <p:documentation>
		  This function sets the field three character searches 
		  setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-field-three-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-field-three-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-field-three-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-set-field-three-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-field-three-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-field-three-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-field-three-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-field-three-character-word-positions"
                   type="admin:database-set-field-three-character-word-positions">
      <p:documentation>
		  This function sets the field three character
		  word positions setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-field-three-character-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-field-three-character-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-field-three-character-word-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-set-field-three-character-word-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-field-three-character-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-field-three-character-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-field-three-character-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-field-trailing-wildcard-searches"
                   type="admin:database-set-field-trailing-wildcard-searches">
      <p:documentation>
		  This function sets the field trailing wildcard 
		  searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-field-trailing-wildcard-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-field-trailing-wildcard-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-field-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-set-field-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-field-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-field-trailing-wildcard-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-field-trailing-wildcard-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-field-trailing-wildcard-word-positions"
                   type="admin:database-set-field-trailing-wildcard-word-positions">
      <p:documentation>
		  This function sets the field trailing wildcard word
		  positions setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-field-trailing-wildcard-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-field-trailing-wildcard-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-field-trailing-wildcard-word-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-set-field-trailing-wildcard-word-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-field-trailing-wildcard-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-field-trailing-wildcard-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-field-trailing-wildcard-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-field-two-character-searches"
                   type="admin:database-set-field-two-character-searches">
      <p:documentation>
		  This function sets the field two character searches setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-field-two-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-field-two-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-field-two-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-set-field-two-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-field-two-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-field-two-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-field-two-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-field-word-searches"
                   type="admin:database-set-field-word-searches">
      <p:documentation>
		  This function sets the field word searches setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-field-name" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-field-word-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-field-word-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="FIELD_NAME"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-field-word-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FIELD_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-field-name">
            <p:pipe port="source" step="admin-database-set-field-word-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-field-word-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-field-word-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-field-word-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-format-compatibility"
                   type="admin:database-set-format-compatibility">
      <p:documentation>
		  This function sets the format cpmpatibility setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-format-compatibility.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-format-compatibility"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-format-compatibility"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-format-compatibility"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-format-compatibility"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-format-compatibility"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-in-memory-limit"
                   type="admin:database-set-in-memory-limit">
      <p:documentation>
		  This function sets the in-memory limit setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-in-memory-limit.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-in-memory-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-in-memory-limit"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-in-memory-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-in-memory-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-in-memory-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-in-memory-list-size"
                   type="admin:database-set-in-memory-list-size">
      <p:documentation>
		  This function sets the in-memory list size setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-in-memory-list-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-in-memory-list-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-in-memory-list-size"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-in-memory-list-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-in-memory-list-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-in-memory-list-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-in-memory-range-index-size"
                   type="admin:database-set-in-memory-range-index-size">
      <p:documentation>
		  This function sets the in-memory range index size setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-in-memory-range-index-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-in-memory-range-index-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-in-memory-range-index-size"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-in-memory-range-index-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-in-memory-range-index-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-in-memory-range-index-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-in-memory-reverse-index-size"
                   type="admin:database-set-in-memory-reverse-index-size">
      <p:documentation>
		  This function sets the in-memory range reverse index 
		  size setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-in-memory-reverse-index-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-in-memory-reverse-index-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-in-memory-reverse-index-size"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-in-memory-reverse-index-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-in-memory-reverse-index-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-in-memory-reverse-index-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-in-memory-tree-size"
                   type="admin:database-set-in-memory-tree-size">
      <p:documentation>
		  This function sets the in-memory tree size setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-in-memory-tree-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-in-memory-tree-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-in-memory-tree-size"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-in-memory-tree-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-in-memory-tree-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-in-memory-tree-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-index-detection"
                   type="admin:database-set-index-detection">
      <p:documentation>
		  This function sets the index detection setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-index-detection.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-index-detection"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-index-detection"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-index-detection"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-index-detection"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-index-detection"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-inherit-collections"
                   type="admin:database-set-inherit-collections">
      <p:documentation>
		  This function sets the inherit collections setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-inherit-collections.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-inherit-collections"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-inherit-collections"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-inherit-collections"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-inherit-collections"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-inherit-collections"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-inherit-permissions"
                   type="admin:database-set-inherit-permissions">
      <p:documentation>
		  This function sets the inherit permissions setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-inherit-permissions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-inherit-permissions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-inherit-permissions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-inherit-permissions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-inherit-permissions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-inherit-permissions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-inherit-quality"
                   type="admin:database-set-inherit-quality">
      <p:documentation>
		  This function sets the inherit quality setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-inherit-quality.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-inherit-quality"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-inherit-quality"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-inherit-quality"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-inherit-quality"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-inherit-quality"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-journal-size" type="admin:database-set-journal-size">
      <p:documentation>
		  This function sets the journal size setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-journal-size.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-journal-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-journal-size"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-journal-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-journal-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-journal-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-journaling" type="admin:database-set-journaling">
      <p:documentation>
		  This function sets the journaling setting for the
		  specified database in the configuration.  When set
		  to  strict , the journal protects against
		  MarkLogic Server process failures, host operating
		  system kernel failures, and host hardware failures.
		  When set to  fast , the journal protects
		  against MarkLogic Server process failures but not
		  against host operating system kernel failures or host
		  hardware failures.  When set to  off , the
		  journal does not protect against MarkLogic Server
		  process failures, host operating system kernel
		  failures, or host hardware failures.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-journaling.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-journaling"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-journaling"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-journaling"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-journaling"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-journaling"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-language" type="admin:database-set-language">
      <p:documentation>
		  This function sets the language
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-language.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-language"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-language"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-language"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-language"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-language"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-locking" type="admin:database-set-locking">
      <p:documentation>
		  This function sets the locking setting for the
		  specified database in the configuration.  When set to
		   strict , locking enforces mutual exclusion
		  on existing documents and on new documents.  When set
		  to  fast , locking enforces mutual
		  exclusion on existing documents but not on new
		  documents.  When set to  off , locking does
		  not enforce mutual exclusion on existing documents or
		  on new documents.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-locking.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-locking"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-locking"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-locking"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-locking"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-locking"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-maintain-directory-last-modified"
                   type="admin:database-set-maintain-directory-last-modified">
      <p:documentation>
		  This function sets the maintain directory last modified setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-maintain-directory-last-modified.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-maintain-directory-last-modified"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-maintain-directory-last-modified"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-maintain-directory-last-modified"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-maintain-directory-last-modified"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-maintain-directory-last-modified"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-maintain-last-modified"
                   type="admin:database-set-maintain-last-modified">
      <p:documentation>
		  This function sets the maintain last modified setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-maintain-last-modified.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-maintain-last-modified"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-maintain-last-modified"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-maintain-last-modified"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-maintain-last-modified"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-maintain-last-modified"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-merge-enable" type="admin:database-set-merge-enable">
      <p:documentation>
		  This function sets the merge enable setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-merge-enable.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-merge-enable"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-merge-enable"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-merge-enable"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-merge-enable"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-merge-enable"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-merge-max-size"
                   type="admin:database-set-merge-max-size">
      <p:documentation>
		  This function sets the merge max size setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-merge-max-size.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-merge-max-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-merge-max-size"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-merge-max-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-merge-max-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-merge-max-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-merge-min-ratio"
                   type="admin:database-set-merge-min-ratio">
      <p:documentation>
		  This function sets the merge min ratio setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-merge-min-ratio.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-merge-min-ratio"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-merge-min-ratio"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-merge-min-ratio"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-merge-min-ratio"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-merge-min-ratio"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-merge-min-size"
                   type="admin:database-set-merge-min-size">
      <p:documentation>
		  This function sets the merge minimum size setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-merge-min-size.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-merge-min-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-merge-min-size"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-merge-min-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-merge-min-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-merge-min-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-merge-priority"
                   type="admin:database-set-merge-priority">
      <p:documentation>
		  This function sets the CPU scheduler priority for merges.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-merge-priority.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-merge-priority"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-merge-priority"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-merge-priority"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-merge-priority"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-merge-priority"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-merge-timestamp"
                   type="admin:database-set-merge-timestamp">
      <p:documentation>
		  This function sets the merge timestamp setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-merge-timestamp.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-merge-timestamp"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-merge-timestamp"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-merge-timestamp"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-merge-timestamp"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-merge-timestamp"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-name" type="admin:database-set-name">
      <p:documentation>
		  This function changes the name of the database with the
		  specified ID to the specified name.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-name.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:database-set-name"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-name"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-name"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-name"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-name"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-one-character-searches"
                   type="admin:database-set-one-character-searches">
      <p:documentation>
		  This function sets the one character searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-one-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-one-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-one-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-one-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-one-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-one-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-positions-list-max-size"
                   type="admin:database-set-positions-list-max-size">
      <p:documentation>
		  This function sets the positions list max size setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-positions-list-max-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-positions-list-max-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-positions-list-max-size"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-positions-list-max-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-positions-list-max-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-positions-list-max-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-preallocate-journals"
                   type="admin:database-set-preallocate-journals">
      <p:documentation>
		  This function sets the preallocate journals setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-preallocate-journals.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-preallocate-journals"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-preallocate-journals"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-preallocate-journals"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-preallocate-journals"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-preallocate-journals"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-preload-mapped-data"
                   type="admin:database-set-preload-mapped-data">
      <p:documentation>
		  This function sets the preload mapped data setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-preload-mapped-data.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-preload-mapped-data"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-preload-mapped-data"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-preload-mapped-data"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-preload-mapped-data"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-preload-mapped-data"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-range-index-optimize"
                   type="admin:database-set-range-index-optimize">
      <p:documentation>
		  This function sets the range index optimize setting
		  for the specified database in the configuration.  

		  When set to  facet-time , range indexes are
		  optimized to minimize the amount of CPU time
		  used. When set to  memory-size , range
		  indexes are optimized to minimize the amount of memory
		  used.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-range-index-optimize.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-range-index-optimize"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-range-index-optimize"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-range-index-optimize"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-range-index-optimize"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-range-index-optimize"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-reindexer-enable"
                   type="admin:database-set-reindexer-enable">
      <p:documentation>
		  This function sets the reindexer enable setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-reindexer-enable.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-reindexer-enable"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-reindexer-enable"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-reindexer-enable"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-reindexer-enable"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-reindexer-enable"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-reindexer-throttle"
                   type="admin:database-set-reindexer-throttle">
      <p:documentation>
		  This function sets the reindexer throttle setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-reindexer-throttle.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-reindexer-throttle"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-reindexer-throttle"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-reindexer-throttle"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-reindexer-throttle"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-reindexer-throttle"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-reindexer-timestamp"
                   type="admin:database-set-reindexer-timestamp">
      <p:documentation>
		  This function sets the reindexer timestamp setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-reindexer-timestamp.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-reindexer-timestamp"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-reindexer-timestamp"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-reindexer-timestamp"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-reindexer-timestamp"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-reindexer-timestamp"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-schema-database"
                   type="admin:database-set-schema-database">
      <p:documentation>
		  This function sets the schema database for a database
		  to the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-schema-database.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-schema-database"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-schema-database"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-schema-database"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-schema-database"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-schema-database"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-security-database"
                   type="admin:database-set-security-database">
      <p:documentation>
		  This function sets the security database for a database
		  to the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-security-database.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-security-database"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-security-database"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-security-database"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-security-database"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-security-database"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-stemmed-searches"
                   type="admin:database-set-stemmed-searches">
      <p:documentation>
		  This function sets the stemmed searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-stemmed-searches.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-stemmed-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-stemmed-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-stemmed-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-stemmed-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-stemmed-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-tf-normalization"
                   type="admin:database-set-tf-normalization">
      <p:documentation>This function specifies whether to use the default term-frequency 
  normalization ( scaled-log ), which scales the term frequency based on the size of 
  the document, or to use the  unscaled-log , which uses term frequency as a function 
  of the actual term frequency in a document, regardless of the document size. 
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-tf-normalization.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-tf-normalization"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-tf-normalization"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-tf-normalization"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-tf-normalization"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-tf-normalization"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-three-character-searches"
                   type="admin:database-set-three-character-searches">
      <p:documentation>
		  This function sets the three character searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-three-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-three-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-three-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-three-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-three-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-three-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-three-character-word-positions"
                   type="admin:database-set-three-character-word-positions">
      <p:documentation>
		  This function sets the three character word positions setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-three-character-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-three-character-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-three-character-word-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-three-character-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-three-character-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-three-character-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-trailing-wildcard-searches"
                   type="admin:database-set-trailing-wildcard-searches">
      <p:documentation>
		  This function sets the trailing wildcard searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-trailing-wildcard-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-trailing-wildcard-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-trailing-wildcard-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-trailing-wildcard-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-trailing-wildcard-word-positions"
                   type="admin:database-set-trailing-wildcard-word-positions">
      <p:documentation>
		  This function sets the trailing wildcard word positions setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-trailing-wildcard-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-trailing-wildcard-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-trailing-wildcard-word-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-trailing-wildcard-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-trailing-wildcard-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-trailing-wildcard-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-triggers-database"
                   type="admin:database-set-triggers-database">
      <p:documentation>
		  This function sets the triggers database to the specified
		  database ID for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-triggers-database.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-triggers-database"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-triggers-database"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-triggers-database"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-triggers-database"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-triggers-database"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-two-character-searches"
                   type="admin:database-set-two-character-searches">
      <p:documentation>
		  This function sets the two character searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-two-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-two-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-two-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-two-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-two-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-two-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-uri-lexicon" type="admin:database-set-uri-lexicon">
      <p:documentation>
		  This function sets the URI lexicon setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-uri-lexicon.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-uri-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-uri-lexicon"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-uri-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-uri-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-uri-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-positions"
                   type="admin:database-set-word-positions">
      <p:documentation>
		  This function sets the word positions setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-positions.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-word-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-query-fast-case-sensitive-searches"
                   type="admin:database-set-word-query-fast-case-sensitive-searches">
      <p:documentation>
		  This function returns the word query fast case
		  sensitive searches setting
		  for the specified database from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-query-fast-case-sensitive-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-query-fast-case-sensitive-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-word-query-fast-case-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-word-query-fast-case-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-word-query-fast-case-sensitive-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-word-query-fast-case-sensitive-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-query-fast-diacritic-sensitive-searches"
                   type="admin:database-set-word-query-fast-diacritic-sensitive-searches">
      <p:documentation>
		  This function sets the word query fast diacritic 
		  sensitive searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-query-fast-diacritic-sensitive-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-query-fast-diacritic-sensitive-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source"
                    step="admin-database-set-word-query-fast-diacritic-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source"
                    step="admin-database-set-word-query-fast-diacritic-sensitive-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source"
                    step="admin-database-set-word-query-fast-diacritic-sensitive-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source"
                    step="admin-database-set-word-query-fast-diacritic-sensitive-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-query-fast-phrase-searches"
                   type="admin:database-set-word-query-fast-phrase-searches">
      <p:documentation>
		  This function sets the word query fast phrase
		  searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-query-fast-phrase-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-query-fast-phrase-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-word-query-fast-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-word-query-fast-phrase-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-word-query-fast-phrase-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-word-query-fast-phrase-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-query-include-document-root"
                   type="admin:database-set-word-query-include-document-root">
      <p:documentation>
		  This function sets the word query include
		  document root setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-query-include-document-root.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-query-include-document-root"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-word-query-include-document-root"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-word-query-include-document-root"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-word-query-include-document-root"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-word-query-include-document-root"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-query-one-character-searches"
                   type="admin:database-set-word-query-one-character-searches">
      <p:documentation>
		  This function sets the word query one character
		  searches setting
		  for the specified field in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-query-one-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-query-one-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-word-query-one-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-word-query-one-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-word-query-one-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-word-query-one-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-query-stemmed-searches"
                   type="admin:database-set-word-query-stemmed-searches">
      <p:documentation>
		  This function sets the word query stemmed searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-query-stemmed-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-query-stemmed-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-word-query-stemmed-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-word-query-stemmed-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-word-query-stemmed-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-word-query-stemmed-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-query-three-character-searches"
                   type="admin:database-set-word-query-three-character-searches">
      <p:documentation>
		  This function sets the word query three character
		  searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-query-three-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-query-three-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-word-query-three-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-word-query-three-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-word-query-three-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-word-query-three-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-query-three-character-word-positions"
                   type="admin:database-set-word-query-three-character-word-positions">
      <p:documentation>
		  This function sets the word query three character
		  word positions setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-query-three-character-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-query-three-character-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source"
                    step="admin-database-set-word-query-three-character-word-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source"
                    step="admin-database-set-word-query-three-character-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source"
                    step="admin-database-set-word-query-three-character-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source"
                    step="admin-database-set-word-query-three-character-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-query-trailing-wildcard-searches"
                   type="admin:database-set-word-query-trailing-wildcard-searches">
      <p:documentation>
		  This function sets the word query trailing
		  wildcard searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-query-trailing-wildcard-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-query-trailing-wildcard-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-word-query-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-word-query-trailing-wildcard-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-word-query-trailing-wildcard-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-word-query-trailing-wildcard-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-query-trailing-wildcard-word-positions"
                   type="admin:database-set-word-query-trailing-wildcard-word-positions">
      <p:documentation>
		  This function sets the word query trailing wildcard 
		  word positions setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-query-trailing-wildcard-word-positions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-query-trailing-wildcard-word-positions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source"
                    step="admin-database-set-word-query-trailing-wildcard-word-positions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source"
                    step="admin-database-set-word-query-trailing-wildcard-word-positions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source"
                    step="admin-database-set-word-query-trailing-wildcard-word-positions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source"
                    step="admin-database-set-word-query-trailing-wildcard-word-positions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-query-two-character-searches"
                   type="admin:database-set-word-query-two-character-searches">
      <p:documentation>
		  This function sets the word query two character
		  searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-query-two-character-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-query-two-character-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-word-query-two-character-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-word-query-two-character-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-word-query-two-character-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-word-query-two-character-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-query-word-searches"
                   type="admin:database-set-word-query-word-searches">
      <p:documentation>
		  This function sets the word query word searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-query-word-searches.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-query-word-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-word-query-word-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-word-query-word-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-word-query-word-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-word-query-word-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-set-word-searches" type="admin:database-set-word-searches">
      <p:documentation>
		  This function sets the word searches setting
		  for the specified database in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-database-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-set-word-searches.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-set-word-searches"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="DATABASE_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-database-set-word-searches"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-database-set-word-searches"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-set-word-searches"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-set-word-searches"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-weekly-backup" type="admin:database-weekly-backup">
      <p:documentation>
      This function constructs a weekly scheduled backup.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-backup-dir" required="true"/>
      <p:option name="ml-backup-period" required="true"/>
      <p:option name="ml-days" required="true"/>
      <p:option name="ml-start-time" required="true"/>
      <p:option name="ml-max-backups" required="true"/>
      <p:option name="ml-backup-security-db" required="true"/>
      <p:option name="ml-backup-schemas-db" required="true"/>
      <p:option name="ml-backup-triggers-db" required="true"/>
      <p:option name="ml-include-replicas" required="false"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-weekly-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-weekly-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="BACKUP_DIR"/>
                  <c:param name="BACKUP_PERIOD"/>
                  <c:param name="DAYS"/>
                  <c:param name="START_TIME"/>
                  <c:param name="MAX_BACKUPS"/>
                  <c:param name="BACKUP_SECURITY_DB"/>
                  <c:param name="BACKUP_SCHEMAS_DB"/>
                  <c:param name="BACKUP_TRIGGERS_DB"/>
                  <c:param name="INCLUDE_REPLICAS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'BACKUP_DIR']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-dir">
            <p:pipe port="source" step="admin-database-weekly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-period">
            <p:pipe port="source" step="admin-database-weekly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DAYS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-days">
            <p:pipe port="source" step="admin-database-weekly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START_TIME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-start-time">
            <p:pipe port="source" step="admin-database-weekly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'MAX_BACKUPS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-max-backups">
            <p:pipe port="source" step="admin-database-weekly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_SECURITY_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-security-db">
            <p:pipe port="source" step="admin-database-weekly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_SCHEMAS_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-schemas-db">
            <p:pipe port="source" step="admin-database-weekly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_TRIGGERS_DB']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-triggers-db">
            <p:pipe port="source" step="admin-database-weekly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'INCLUDE_REPLICAS']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-include-replicas">
            <p:pipe port="source" step="admin-database-weekly-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-weekly-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-weekly-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-database-word-lexicon" type="admin:database-word-lexicon">
      <p:documentation>
		  This function constructs a word lexicon specification.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-collation" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/database-word-lexicon.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:database-word-lexicon"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="COLLATION"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'COLLATION']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-collation">
            <p:pipe port="source" step="admin-database-word-lexicon"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-database-word-lexicon"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-database-word-lexicon"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-add-backup" type="admin:forest-add-backup">
      <p:documentation>
      This function adds scheduled backup specifications for a 
      forest to a configuration. 
    </p:documentation>

      <p:input port="source"/>
      <p:input port="backups" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-add-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//backups">
         <p:input port="replacement">
            <p:pipe port="backups" step="admin-forest-add-backup"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:forest-add-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-add-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-add-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-add-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-add-failover-host" type="admin:forest-add-failover-host">
      <p:documentation>
		  This function adds a failover host to the list of failover
		  hosts for the specified forest in the specified 
		  configuration.  If there are already any hosts specified,
		  this host is added to the end of the list of failover hosts.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>
      <p:option name="ml-hosts" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-add-failover-host.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-add-failover-host"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
                  <c:param name="HOSTS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-add-failover-host"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'HOSTS']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-hosts">
            <p:pipe port="source" step="admin-forest-add-failover-host"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-add-failover-host"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-add-failover-host"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-add-replica" type="admin:forest-add-replica">
      <p:documentation>This function adds a forest replica to a master forest.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-master-id" required="true"/>
      <p:option name="ml-replica-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-add-replica.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-add-replica"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="MASTER_ID"/>
                  <c:param name="REPLICA_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'MASTER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-master-id">
            <p:pipe port="source" step="admin-forest-add-replica"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'REPLICA_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-replica-id">
            <p:pipe port="source" step="admin-forest-add-replica"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-add-replica"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-add-replica"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-copy" type="admin:forest-copy">
      <p:documentation>
		  This function creates a new forest specification with the
		  same settings as the forest with the specified ID.  The new
		  forest configuration will have the specified name.  It 
		  copies the forest configuration, but does not copy
		  the forest data.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>
      <p:option name="ml-forest-name" required="true"/>
      <p:option name="ml-data-directory" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-copy.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:forest-copy"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
                  <c:param name="FOREST_NAME"/>
                  <c:param name="DATA_DIRECTORY"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-copy"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FOREST_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-forest-name">
            <p:pipe port="source" step="admin-forest-copy"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DATA_DIRECTORY']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-data-directory">
            <p:pipe port="source" step="admin-forest-copy"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-copy"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-copy"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-create" type="admin:forest-create">
      <p:documentation>
		  This function creates a new forest configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-name" required="true"/>
      <p:option name="ml-host-id" required="true"/>
      <p:option name="ml-data-directory" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-create.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:forest-create"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_NAME"/>
                  <c:param name="HOST_ID"/>
                  <c:param name="DATA_DIRECTORY"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-forest-name">
            <p:pipe port="source" step="admin-forest-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'HOST_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-host-id">
            <p:pipe port="source" step="admin-forest-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DATA_DIRECTORY']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-data-directory">
            <p:pipe port="source" step="admin-forest-create"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-create"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-create"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-daily-backup" type="admin:forest-daily-backup">
      <p:documentation>This function constructs a daily scheduled forest backup. </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-backup-dir" required="true"/>
      <p:option name="ml-backup-period" required="true"/>
      <p:option name="ml-start-time" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-daily-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-daily-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="BACKUP_DIR"/>
                  <c:param name="BACKUP_PERIOD"/>
                  <c:param name="START_TIME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'BACKUP_DIR']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-dir">
            <p:pipe port="source" step="admin-forest-daily-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-period">
            <p:pipe port="source" step="admin-forest-daily-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START_TIME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-start-time">
            <p:pipe port="source" step="admin-forest-daily-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-daily-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-daily-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-delete" type="admin:forest-delete">
      <p:documentation>
		  This function deletes the configuration for the specified
		  forest from the configuration.  
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-ids" required="true"/>
      <p:option name="ml-delete-data" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-delete.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:forest-delete"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_IDS"/>
                  <c:param name="DELETE_DATA"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_IDS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-forest-ids">
            <p:pipe port="source" step="admin-forest-delete"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DELETE_DATA']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-delete-data">
            <p:pipe port="source" step="admin-forest-delete"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-delete"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-delete"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-delete-backup" type="admin:forest-delete-backup">
      <p:documentation>
      This function deletes scheduled backup specifications for a 
      forest from a configuration. 
    </p:documentation>

      <p:input port="source"/>
      <p:input port="backups" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-delete-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//backups">
         <p:input port="replacement">
            <p:pipe port="backups" step="admin-forest-delete-backup"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-delete-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-delete-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-delete-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-delete-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-delete-failover-host"
                   type="admin:forest-delete-failover-host">
      <p:documentation>
		  This function deletes the specified failover host(s) from the
		  failover-host list in the specified configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>
      <p:option name="ml-hosts" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-delete-failover-host.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-delete-failover-host"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
                  <c:param name="HOSTS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-delete-failover-host"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'HOSTS']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-hosts">
            <p:pipe port="source" step="admin-forest-delete-failover-host"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-delete-failover-host"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-delete-failover-host"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-exists" type="admin:forest-exists">
      <p:documentation>
  This function determines whether or not the specified forest
  exists.  Returns  true  if the forest exists, otherwise 
   false  is returned.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-exists.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:forest-exists"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-name">
            <p:pipe port="source" step="admin-forest-exists"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-exists"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-exists"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-get-backups" type="admin:forest-get-backups">
      <p:documentation>
      This function returns the scheduled backups
      for the specified forest from the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-get-backups.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-get-backups"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-get-backups"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-get-backups"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-get-backups"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-get-data-directory" type="admin:forest-get-data-directory">
      <p:documentation>
		  This function returns the name of the data directory of the
		  specified forest.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-get-data-directory.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-get-data-directory"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-get-data-directory"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-get-data-directory"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-get-data-directory"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-get-database" type="admin:forest-get-database">
      <p:documentation>This function returns the ID of the database that uses the specified
  forest.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-get-database.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-get-database"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-get-database"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-get-database"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-get-database"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-get-enabled" type="admin:forest-get-enabled">
      <p:documentation>
		  This function returns the enabled state of the specified 
		  forest.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-get-enabled.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-get-enabled"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-get-enabled"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-get-enabled"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-get-enabled"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-get-failover-enable" type="admin:forest-get-failover-enable">
      <p:documentation>
      This function returns the state of whether failover is
      enabled for the specified forest.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-get-failover-enable.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-get-failover-enable"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-get-failover-enable"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-get-failover-enable"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-get-failover-enable"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-get-failover-hosts" type="admin:forest-get-failover-hosts">
      <p:documentation>
		  This function returns the forest IDs of the hosts defined 
		  as failover hosts for this forest.  The order in which the
		  hosts IDs are returned is significant, with the first ID
		  being the primary host, the second (if there is one) being
		  the secondary, and so on.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-get-failover-hosts.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-get-failover-hosts"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-get-failover-hosts"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-get-failover-hosts"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-get-failover-hosts"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-get-host" type="admin:forest-get-host">
      <p:documentation>
		  This function returns the ID of the host in which the
		  specified forest resides.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-get-host.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:forest-get-host"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-get-host"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-get-host"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-get-host"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-get-id" type="admin:forest-get-id">
      <p:documentation>
		  This function returns the ID of the forest with the specified
		  name, from the specified configuration.  The difference 
		  between this function and  xdmp:forest()  is that
		  the ID from this function can come from a forest that has not
		  yet been saved (that is, from a forest that has been created
		  in the same query with the Admin library but has not yet 
		  been saved to the cluster configuration files).
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-get-id.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:forest-get-id"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-name">
            <p:pipe port="source" step="admin-forest-get-id"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-get-id"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-get-id"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-get-name" type="admin:forest-get-name">
      <p:documentation>
		  This function returns the name(s) of the specified forest(s),
		  given the forest ID(s).
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-get-name.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:forest-get-name"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-get-name"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-get-name"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-get-name"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-get-replicas" type="admin:forest-get-replicas">
      <p:documentation>
	  This function returns the IDs of the forest replicas for the 
	  specified forest.  If it returns the empty sequence, then
	  no replacas are assigned to the specified forest.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-get-replicas.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-get-replicas"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-get-replicas"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-get-replicas"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-get-replicas"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-get-updates-allowed" type="admin:forest-get-updates-allowed">
      <p:documentation>
      This function returns the state of what kinds of updates are allowed
      for the specified forest.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-get-updates-allowed.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-get-updates-allowed"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-get-updates-allowed"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-get-updates-allowed"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-get-updates-allowed"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-hourly-backup" type="admin:forest-hourly-backup">
      <p:documentation>This function constructs a hourly scheduled forest backup.</p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-backup-dir" required="true"/>
      <p:option name="ml-backup-period" required="true"/>
      <p:option name="ml-start-minute" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-hourly-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-hourly-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="BACKUP_DIR"/>
                  <c:param name="BACKUP_PERIOD"/>
                  <c:param name="START_MINUTE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'BACKUP_DIR']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-dir">
            <p:pipe port="source" step="admin-forest-hourly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-period">
            <p:pipe port="source" step="admin-forest-hourly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START_MINUTE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-start-minute">
            <p:pipe port="source" step="admin-forest-hourly-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-hourly-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-hourly-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-minutely-backup" type="admin:forest-minutely-backup">
      <p:documentation>This function constructs a scheduled forest backup on a number-of-minutes basis.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-backup-dir" required="true"/>
      <p:option name="ml-backup-period" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-minutely-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-minutely-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="BACKUP_DIR"/>
                  <c:param name="BACKUP_PERIOD"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'BACKUP_DIR']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-dir">
            <p:pipe port="source" step="admin-forest-minutely-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_PERIOD']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-backup-period">
            <p:pipe port="source" step="admin-forest-minutely-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-minutely-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-minutely-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-monthly-backup" type="admin:forest-monthly-backup">
      <p:documentation>
      This function constructs a monthly scheduled backup.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-backup-dir" required="true"/>
      <p:option name="ml-backup-period" required="true"/>
      <p:option name="ml-backup-month-day" required="true"/>
      <p:option name="ml-start-time" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-monthly-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-monthly-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="BACKUP_DIR"/>
                  <c:param name="BACKUP_PERIOD"/>
                  <c:param name="BACKUP_MONTH_DAY"/>
                  <c:param name="START_TIME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'BACKUP_DIR']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-dir">
            <p:pipe port="source" step="admin-forest-monthly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-period">
            <p:pipe port="source" step="admin-forest-monthly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_MONTH_DAY']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-month-day">
            <p:pipe port="source" step="admin-forest-monthly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START_TIME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-start-time">
            <p:pipe port="source" step="admin-forest-monthly-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-monthly-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-monthly-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-one-time-backup" type="admin:forest-one-time-backup">
      <p:documentation>
      This function constructs a one-time backup.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-backup-dir" required="true"/>
      <p:option name="ml-start" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-one-time-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-one-time-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="BACKUP_DIR"/>
                  <c:param name="START"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'BACKUP_DIR']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-dir">
            <p:pipe port="source" step="admin-forest-one-time-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-start">
            <p:pipe port="source" step="admin-forest-one-time-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-one-time-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-one-time-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-remove-replica" type="admin:forest-remove-replica">
      <p:documentation>
		This function removes a forest replica from a master 
		forest.
	</p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-master-id" required="true"/>
      <p:option name="ml-replica-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-remove-replica.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-remove-replica"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="MASTER_ID"/>
                  <c:param name="REPLICA_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'MASTER_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-master-id">
            <p:pipe port="source" step="admin-forest-remove-replica"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'REPLICA_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-replica-id">
            <p:pipe port="source" step="admin-forest-remove-replica"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-remove-replica"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-remove-replica"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-set-enabled" type="admin:forest-set-enabled">
      <p:documentation>
		  This function sets the enabled state for a forest 
		  configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-set-enabled.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-set-enabled"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-set-enabled"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-forest-set-enabled"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-set-enabled"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-set-enabled"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-set-failover-enable" type="admin:forest-set-failover-enable">
      <p:documentation>
      This function sets the forest failover enabled state for a
      forest configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-set-failover-enable.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-set-failover-enable"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-set-failover-enable"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-forest-set-failover-enable"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-set-failover-enable"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-set-failover-enable"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-set-host" type="admin:forest-set-host">
      <p:documentation>
		  This function sets a forest configuration to a new
		  host.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-set-host.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:forest-set-host"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-set-host"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-forest-set-host"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-set-host"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-set-host"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-set-updates-allowed" type="admin:forest-set-updates-allowed">
      <p:documentation>
      This function sets the updates-allowed state for a
      forest configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-forest-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-set-updates-allowed.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-set-updates-allowed"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="FOREST_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'FOREST_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-forest-id">
            <p:pipe port="source" step="admin-forest-set-updates-allowed"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-forest-set-updates-allowed"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-set-updates-allowed"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-set-updates-allowed"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-forest-weekly-backup" type="admin:forest-weekly-backup">
      <p:documentation>
      This function constructs a weekly scheduled backup.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-backup-dir" required="true"/>
      <p:option name="ml-backup-period" required="true"/>
      <p:option name="ml-days" required="true"/>
      <p:option name="ml-start-time" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/forest-weekly-backup.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:forest-weekly-backup"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="BACKUP_DIR"/>
                  <c:param name="BACKUP_PERIOD"/>
                  <c:param name="DAYS"/>
                  <c:param name="START_TIME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'BACKUP_DIR']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-dir">
            <p:pipe port="source" step="admin-forest-weekly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'BACKUP_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-backup-period">
            <p:pipe port="source" step="admin-forest-weekly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DAYS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-days">
            <p:pipe port="source" step="admin-forest-weekly-backup"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'START_TIME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-start-time">
            <p:pipe port="source" step="admin-forest-weekly-backup"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-forest-weekly-backup"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-forest-weekly-backup"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-get-appserver-ids" type="admin:get-appserver-ids">
      <p:documentation>
      This function returns all the appserver IDs from the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>



      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/get-appserver-ids.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:get-appserver-ids"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity name="params">
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set/>
            </p:inline>
         </p:input>
      </p:identity>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-get-appserver-ids"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-get-appserver-ids"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-get-configuration" type="admin:get-configuration">
      <p:documentation>Loads the admin configuration into memory for use 
		  by other functions in the Admin module.    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/get-configuration.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:get-configuration"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:empty/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-get-configuration"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-get-configuration"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-get-database-ids" type="admin:get-database-ids">
      <p:documentation>
      This function returns all the database IDs from the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>



      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/get-database-ids.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:get-database-ids"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity name="params">
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set/>
            </p:inline>
         </p:input>
      </p:identity>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-get-database-ids"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-get-database-ids"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-get-forest-ids" type="admin:get-forest-ids">
      <p:documentation>
      This function returns all the forest IDs from the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>



      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/get-forest-ids.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:get-forest-ids"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity name="params">
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set/>
            </p:inline>
         </p:input>
      </p:identity>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-get-forest-ids"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-get-forest-ids"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-get-group-ids" type="admin:get-group-ids">
      <p:documentation>
      This function returns all the group IDs from the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>



      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/get-group-ids.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:get-group-ids"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity name="params">
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set/>
            </p:inline>
         </p:input>
      </p:identity>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-get-group-ids"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-get-group-ids"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-get-host-ids" type="admin:get-host-ids">
      <p:documentation>
      This function returns all the host IDs from the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>



      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/get-host-ids.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:get-host-ids"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity name="params">
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set/>
            </p:inline>
         </p:input>
      </p:identity>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-get-host-ids"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-get-host-ids"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-add-namespace" type="admin:group-add-namespace">
      <p:documentation>
		  Add one or more namespaces to a Group configuration, 
		  which will predefine the namespace(s) for all requests 
		  evaluated against any App Server in the Group.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="namespaces" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-add-namespace.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//namespaces">
         <p:input port="replacement">
            <p:pipe port="namespaces" step="admin-group-add-namespace"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-add-namespace"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-add-namespace"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-add-namespace"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-add-namespace"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-add-scheduled-task" type="admin:group-add-scheduled-task">
      <p:documentation>This function adds one or more scheduled tasks to the specified group.</p:documentation>

      <p:input port="source"/>
      <p:input port="scheduled-tasks" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-add-scheduled-task.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//scheduled-tasks">
         <p:input port="replacement">
            <p:pipe port="scheduled-tasks" step="admin-group-add-scheduled-task"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-add-scheduled-task"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-add-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-add-scheduled-task"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-add-scheduled-task"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-add-schema" type="admin:group-add-schema">
      <p:documentation>
		  This function adds a schema binding definition to the 
		  existing schema binding definitions in the configuration 
		  for the specified Group.  Schemas with a schema binding
		  definition are automatically imported into queries run 
		  against any App Server in the group.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="schemas" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-add-schema.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//schemas">
         <p:input port="replacement">
            <p:pipe port="schemas" step="admin-group-add-schema"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:group-add-schema"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-add-schema"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-add-schema"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-add-schema"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-add-trace-event" type="admin:group-add-trace-event">
      <p:documentation>
		  This function adds trace events to the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="events" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-add-trace-event.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//events">
         <p:input port="replacement">
            <p:pipe port="events" step="admin-group-add-trace-event"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-add-trace-event"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-add-trace-event"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-add-trace-event"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-add-trace-event"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-copy" type="admin:group-copy">
      <p:documentation>
		  This function creates a new group specification with the
		  same settings as the group with the specified ID.  The new
		  group configuration will have the specified name.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-group-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-copy.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:group-copy"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="GROUP_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-copy"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'GROUP_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-name">
            <p:pipe port="source" step="admin-group-copy"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-copy"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-copy"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-create" type="admin:group-create">
      <p:documentation>
		  This function creates a new group with the specified
		  name in the configuration.  The new group has the default
		  values.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-create.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:group-create"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-name">
            <p:pipe port="source" step="admin-group-create"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-create"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-create"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-daily-scheduled-task" type="admin:group-daily-scheduled-task">
      <p:documentation>This function constructs a task to be invoked at daily intervals.</p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-task-path" required="true"/>
      <p:option name="ml-task-root" required="true"/>
      <p:option name="ml-task-period" required="true"/>
      <p:option name="ml-task-start-time" required="true"/>
      <p:option name="ml-task-database" required="true"/>
      <p:option name="ml-task-modules" required="true"/>
      <p:option name="ml-task-user" required="true"/>
      <p:option name="ml-task-host" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-daily-scheduled-task.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-daily-scheduled-task"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="TASK_PATH"/>
                  <c:param name="TASK_ROOT"/>
                  <c:param name="TASK_PERIOD"/>
                  <c:param name="TASK_START_TIME"/>
                  <c:param name="TASK_DATABASE"/>
                  <c:param name="TASK_MODULES"/>
                  <c:param name="TASK_USER"/>
                  <c:param name="TASK_HOST"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'TASK_PATH']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-path">
            <p:pipe port="source" step="admin-group-daily-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_ROOT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-root">
            <p:pipe port="source" step="admin-group-daily-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-period">
            <p:pipe port="source" step="admin-group-daily-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_START_TIME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-start-time">
            <p:pipe port="source" step="admin-group-daily-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_DATABASE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-database">
            <p:pipe port="source" step="admin-group-daily-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_MODULES']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-modules">
            <p:pipe port="source" step="admin-group-daily-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_USER']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-user">
            <p:pipe port="source" step="admin-group-daily-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_HOST']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-task-host">
            <p:pipe port="source" step="admin-group-daily-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-daily-scheduled-task"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-daily-scheduled-task"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-delete" type="admin:group-delete">
      <p:documentation>
		  This function deletes one or more groups in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-ids" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-delete.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:group-delete"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_IDS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_IDS']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-ids">
            <p:pipe port="source" step="admin-group-delete"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-delete"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-delete"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-delete-namespace" type="admin:group-delete-namespace">
      <p:documentation>
		  This function deletes the specified namespaces from the
		  configuration for the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="namespaces" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-delete-namespace.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//namespaces">
         <p:input port="replacement">
            <p:pipe port="namespaces" step="admin-group-delete-namespace"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-delete-namespace"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-delete-namespace"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-delete-namespace"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-delete-namespace"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-delete-scheduled-task"
                   type="admin:group-delete-scheduled-task">
      <p:documentation>This function deletes one or more scheduled tasks from the specified group.
  </p:documentation>

      <p:input port="source"/>
      <p:input port="scheduled-tasks" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-delete-scheduled-task.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//scheduled-tasks">
         <p:input port="replacement">
            <p:pipe port="scheduled-tasks" step="admin-group-delete-scheduled-task"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-delete-scheduled-task"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-delete-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-delete-scheduled-task"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-delete-scheduled-task"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-delete-schema" type="admin:group-delete-schema">
      <p:documentation>
		  This function deletes a schema binding definition to the 
		  existing schema binding definitions in the configuration 
		  for the specified Group.  
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="schemas" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-delete-schema.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//schemas">
         <p:input port="replacement">
            <p:pipe port="schemas" step="admin-group-delete-schema"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-delete-schema"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-delete-schema"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-delete-schema"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-delete-schema"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-delete-trace-event" type="admin:group-delete-trace-event">
      <p:documentation>
		  This function deletes the specified trace events from 
		  the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:input port="events" sequence="true"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-delete-trace-event.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//events">
         <p:input port="replacement">
            <p:pipe port="events" step="admin-group-delete-trace-event"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-delete-trace-event"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-delete-trace-event"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-delete-trace-event"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-delete-trace-event"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-disable-audit-event-type"
                   type="admin:group-disable-audit-event-type">
      <p:documentation>
      This function changes the audit event type(s) enabled setting 
      for the audit configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-event-type" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-disable-audit-event-type.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-disable-audit-event-type"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="EVENT_TYPE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-disable-audit-event-type"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'EVENT_TYPE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-event-type">
            <p:pipe port="source" step="admin-group-disable-audit-event-type"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-disable-audit-event-type"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-disable-audit-event-type"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-enable-audit-event-type"
                   type="admin:group-enable-audit-event-type">
      <p:documentation>
      This function changes the audit event type(s) enabled setting 
      for the audit configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-event-type" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-enable-audit-event-type.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-enable-audit-event-type"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="EVENT_TYPE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-enable-audit-event-type"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'EVENT_TYPE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-event-type">
            <p:pipe port="source" step="admin-group-enable-audit-event-type"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-enable-audit-event-type"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-enable-audit-event-type"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-exists" type="admin:group-exists">
      <p:documentation>
  This function determines whether or not the specified Group
  exists.  Returns  true  if the Group exists, otherwise 
   false  is returned.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-exists.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:group-exists"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-name">
            <p:pipe port="source" step="admin-group-exists"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-exists"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-exists"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-appserver-ids" type="admin:group-get-appserver-ids">
      <p:documentation>
      This function returns the IDs of all appservers belonging to the group.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-appserver-ids.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-appserver-ids"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-appserver-ids"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-appserver-ids"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-appserver-ids"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-audit-enabled" type="admin:group-get-audit-enabled">
      <p:documentation>
      This function returns the value for the audit enabled
      setting from the specified group.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-audit-enabled.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-audit-enabled"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-audit-enabled"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-audit-enabled"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-audit-enabled"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-audit-event-type-enabled"
                   type="admin:group-get-audit-event-type-enabled">
      <p:documentation>
      This function returns the audit event type's enabled setting 
      for the audit configuration.  A value of  true  is returned is the
      specified event type is set.  Otherwise  false  is returned.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-event-type" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-audit-event-type-enabled.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-audit-event-type-enabled"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="EVENT_TYPE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-audit-event-type-enabled"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'EVENT_TYPE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-event-type">
            <p:pipe port="source" step="admin-group-get-audit-event-type-enabled"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-audit-event-type-enabled"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-audit-event-type-enabled"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-audit-excluded-roles"
                   type="admin:group-get-audit-excluded-roles">
      <p:documentation>
      This function returns the roles excluded from auditing. If auditing
      has a "inclusion" restriction, this function returns the empty sequence.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-audit-excluded-roles.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-audit-excluded-roles"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-audit-excluded-roles"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-audit-excluded-roles"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-audit-excluded-roles"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-audit-excluded-uris"
                   type="admin:group-get-audit-excluded-uris">
      <p:documentation>
      This function returns the uris excluded from auditing. If auditing
      has a "inclusion" restriction, this function returns the empty sequence.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-audit-excluded-uris.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-audit-excluded-uris"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-audit-excluded-uris"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-audit-excluded-uris"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-audit-excluded-uris"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-audit-excluded-users"
                   type="admin:group-get-audit-excluded-users">
      <p:documentation>
      This function returns the users excluded from auditing. If auditing
      has a "inclusion" restriction, this function returns the empty sequence.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-audit-excluded-users.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-audit-excluded-users"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-audit-excluded-users"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-audit-excluded-users"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-audit-excluded-users"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-audit-included-roles"
                   type="admin:group-get-audit-included-roles">
      <p:documentation>
      This function returns the roles included from auditing. If auditing
      has a "exclusion" restriction, this function returns the empty sequence.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-audit-included-roles.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-audit-included-roles"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-audit-included-roles"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-audit-included-roles"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-audit-included-roles"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-audit-included-uris"
                   type="admin:group-get-audit-included-uris">
      <p:documentation>
      This function returns the uris included from auditing. If auditing
      has a "exclusion" restriction, this function returns the empty sequence.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-audit-included-uris.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-audit-included-uris"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-audit-included-uris"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-audit-included-uris"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-audit-included-uris"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-audit-included-users"
                   type="admin:group-get-audit-included-users">
      <p:documentation>
      This function returns the users included from auditing. If auditing
      has a "exclusion" restriction, this function returns the empty sequence.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-audit-included-users.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-audit-included-users"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-audit-included-users"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-audit-included-users"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-audit-included-users"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-audit-outcome-restriction"
                   type="admin:group-get-audit-outcome-restriction">
      <p:documentation>
      This function returns whether auditing events are restricted by a 
      success or failure outcome. Returns "success","failure", or "both"
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-audit-outcome-restriction.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-audit-outcome-restriction"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-audit-outcome-restriction"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-audit-outcome-restriction"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-audit-outcome-restriction"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-compressed-tree-cache-partitions"
                   type="admin:group-get-compressed-tree-cache-partitions">
      <p:documentation>
		  This function returns the value for the compressed tree
		  cache partitions setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-compressed-tree-cache-partitions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-compressed-tree-cache-partitions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-compressed-tree-cache-partitions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-compressed-tree-cache-partitions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-compressed-tree-cache-partitions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-compressed-tree-cache-size"
                   type="admin:group-get-compressed-tree-cache-size">
      <p:documentation>
		  This function returns the value for the compressed tree
		  cache size setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-compressed-tree-cache-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-compressed-tree-cache-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-compressed-tree-cache-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-compressed-tree-cache-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-compressed-tree-cache-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-compressed-tree-read-size"
                   type="admin:group-get-compressed-tree-read-size">
      <p:documentation>
      This function returns the value for the compressed tree
      read size (in kilobytes) setting from the specified group.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-compressed-tree-read-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-compressed-tree-read-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-compressed-tree-read-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-compressed-tree-read-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-compressed-tree-read-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-expanded-tree-cache-partitions"
                   type="admin:group-get-expanded-tree-cache-partitions">
      <p:documentation>
		  This function returns the value for the expanded tree
		  cache partitions setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-expanded-tree-cache-partitions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-expanded-tree-cache-partitions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-expanded-tree-cache-partitions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-expanded-tree-cache-partitions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-expanded-tree-cache-partitions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-expanded-tree-cache-size"
                   type="admin:group-get-expanded-tree-cache-size">
      <p:documentation>
		  This function returns the value for the expanded tree
		  cache size setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-expanded-tree-cache-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-expanded-tree-cache-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-expanded-tree-cache-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-expanded-tree-cache-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-expanded-tree-cache-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-failover-enable" type="admin:group-get-failover-enable">
      <p:documentation>
		  This function returns the value for the failover enable
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-failover-enable.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-failover-enable"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-failover-enable"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-failover-enable"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-failover-enable"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-file-log-level" type="admin:group-get-file-log-level">
      <p:documentation>
		  This function returns the value for the file log level
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-file-log-level.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-file-log-level"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-file-log-level"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-file-log-level"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-file-log-level"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-host-ids" type="admin:group-get-host-ids">
      <p:documentation>
      This function returns the IDs of all hosts belonging to the group.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-host-ids.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-host-ids"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-host-ids"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-host-ids"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-host-ids"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-host-initial-timeout"
                   type="admin:group-get-host-initial-timeout">
      <p:documentation>
		  This function returns the value for the host initial timeout
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-host-initial-timeout.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-host-initial-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-host-initial-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-host-initial-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-host-initial-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-host-timeout" type="admin:group-get-host-timeout">
      <p:documentation>
		  This function returns the value for the host timeout
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-host-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-host-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-host-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-host-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-host-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-http-timeout" type="admin:group-get-http-timeout">
      <p:documentation>
		  This function returns the value for the http timeout
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-http-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-http-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-http-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-http-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-http-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-http-user-agent" type="admin:group-get-http-user-agent">
      <p:documentation>
		  This function returns the value for the http user agent
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-http-user-agent.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-http-user-agent"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-http-user-agent"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-http-user-agent"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-http-user-agent"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-httpserver-ids" type="admin:group-get-httpserver-ids">
      <p:documentation>
      This function returns the IDs of all httpservers belonging to the group.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-httpserver-ids.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-httpserver-ids"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-httpserver-ids"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-httpserver-ids"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-httpserver-ids"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-id" type="admin:group-get-id">
      <p:documentation>
		  This function returns the ID of the group.
		  The difference between this function and  xdmp:group()  
		  is that the ID from 
		  this function can come from a group that has not yet been saved (that is, 
		  from a group that has been created in the same query with the Admin library
		  but has not yet been saved to the cluster configuration files).  This ID 
		  enables you to completely configure a newly created group without the 
		  need to first save the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-id.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:group-get-id"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-name">
            <p:pipe port="source" step="admin-group-get-id"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-id"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-id"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-keep-audit-files" type="admin:group-get-keep-audit-files">
      <p:documentation>
      This function returns the value for the keep audit files
      setting from the specified group.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-keep-audit-files.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-keep-audit-files"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-keep-audit-files"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-keep-audit-files"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-keep-audit-files"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-keep-log-files" type="admin:group-get-keep-log-files">
      <p:documentation>
		  This function returns the value for the keep log files
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-keep-log-files.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-keep-log-files"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-keep-log-files"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-keep-log-files"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-keep-log-files"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-list-cache-partitions"
                   type="admin:group-get-list-cache-partitions">
      <p:documentation>
		  This function returns the value for the list cache partitions
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-list-cache-partitions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-list-cache-partitions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-list-cache-partitions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-list-cache-partitions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-list-cache-partitions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-list-cache-size" type="admin:group-get-list-cache-size">
      <p:documentation>
		  This function returns the value for the list cache size
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-list-cache-size.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-list-cache-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-list-cache-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-list-cache-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-list-cache-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-name" type="admin:group-get-name">
      <p:documentation>
		  This function returns the name of the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-name.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:group-get-name"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-name"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-name"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-name"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-namespaces" type="admin:group-get-namespaces">
      <p:documentation>
		  This function returns the value of any namespace definitions
		  predefined for the specified group.  If none are defined,
		  returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-namespaces.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-namespaces"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-namespaces"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-namespaces"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-namespaces"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-retry-timeout" type="admin:group-get-retry-timeout">
      <p:documentation>
      This function returns the value for the number of seconds a request
      will retry before timing out.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-retry-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-retry-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-retry-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-retry-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-retry-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-rotate-audit-files"
                   type="admin:group-get-rotate-audit-files">
      <p:documentation>
      This function returns the value for the rotate audit files
      setting from the specified group.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-rotate-audit-files.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-rotate-audit-files"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-rotate-audit-files"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-rotate-audit-files"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-rotate-audit-files"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-rotate-log-files" type="admin:group-get-rotate-log-files">
      <p:documentation>
		  This function returns the value for the rotate log files
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-rotate-log-files.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-rotate-log-files"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-rotate-log-files"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-rotate-log-files"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-rotate-log-files"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-scheduled-tasks" type="admin:group-get-scheduled-tasks">
      <p:documentation>This function returns all of the tasks scheduled for the specified
  group. </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-scheduled-tasks.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-scheduled-tasks"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-scheduled-tasks"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-scheduled-tasks"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-scheduled-tasks"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-schemas" type="admin:group-get-schemas">
      <p:documentation>
		  This function returns the value of any schemas definitions
		  predefined for the specified group.  If none are defined,
		  returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-schemas.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:group-get-schemas"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-schemas"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-schemas"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-schemas"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-smtp-relay" type="admin:group-get-smtp-relay">
      <p:documentation>
		  This function returns the value for the smtp relay
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-smtp-relay.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-smtp-relay"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-smtp-relay"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-smtp-relay"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-smtp-relay"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-smtp-timeout" type="admin:group-get-smtp-timeout">
      <p:documentation>
		  This function returns the value for the smtp timeout
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-smtp-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-smtp-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-smtp-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-smtp-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-smtp-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-system-log-level" type="admin:group-get-system-log-level">
      <p:documentation>
		  This function returns the value for the system log level
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-system-log-level.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-system-log-level"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-system-log-level"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-system-log-level"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-system-log-level"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-taskserver-id" type="admin:group-get-taskserver-id">
      <p:documentation>
      This function returns the ID of of the taskserver belonging to the group.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-taskserver-id.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-taskserver-id"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-taskserver-id"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-taskserver-id"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-taskserver-id"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-trace-events" type="admin:group-get-trace-events">
      <p:documentation>
		  This function returns the value of any trace events
		  activated for the specified group.  If none are defined,
		  returns the empty sequence.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-trace-events.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-trace-events"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-trace-events"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-trace-events"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-trace-events"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-trace-events-activated"
                   type="admin:group-get-trace-events-activated">
      <p:documentation>
		  This function returns the value for the trace events
		  activated setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-trace-events-activated.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-trace-events-activated"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-trace-events-activated"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-trace-events-activated"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-trace-events-activated"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-webdavserver-ids" type="admin:group-get-webdavserver-ids">
      <p:documentation>
      This function returns the IDs of all webdavservers belonging to the group.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-webdavserver-ids.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-webdavserver-ids"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-webdavserver-ids"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-webdavserver-ids"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-webdavserver-ids"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-xdbcserver-ids" type="admin:group-get-xdbcserver-ids">
      <p:documentation>
      This function returns the IDs of all xdbcservers belonging to the group.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-xdbcserver-ids.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-xdbcserver-ids"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-xdbcserver-ids"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-xdbcserver-ids"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-xdbcserver-ids"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-xdqp-ssl-allow-sslv3"
                   type="admin:group-get-xdqp-ssl-allow-sslv3">
      <p:documentation>This function returns  true  if the SSL v3 protocol 
  is enabled for the group.  Otherwise,  false  is returned.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-xdqp-ssl-allow-sslv3.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-xdqp-ssl-allow-sslv3"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-xdqp-ssl-allow-sslv3"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-xdqp-ssl-allow-sslv3"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-xdqp-ssl-allow-sslv3"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-xdqp-ssl-allow-tls"
                   type="admin:group-get-xdqp-ssl-allow-tls">
      <p:documentation>This function returns  true  if the TLS protocol 
  is enabled for the group.  Otherwise,  false  is returned.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-xdqp-ssl-allow-tls.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-xdqp-ssl-allow-tls"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-xdqp-ssl-allow-tls"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-xdqp-ssl-allow-tls"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-xdqp-ssl-allow-tls"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-xdqp-ssl-ciphers" type="admin:group-get-xdqp-ssl-ciphers">
      <p:documentation>This function returns the SSL ciphers set for the group.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-xdqp-ssl-ciphers.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-xdqp-ssl-ciphers"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-xdqp-ssl-ciphers"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-xdqp-ssl-ciphers"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-xdqp-ssl-ciphers"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-xdqp-ssl-enabled" type="admin:group-get-xdqp-ssl-enabled">
      <p:documentation>This function returns  true  if SSL is enabled for the
  group.  Otherwise,  false  is returned.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-xdqp-ssl-enabled.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-xdqp-ssl-enabled"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-xdqp-ssl-enabled"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-xdqp-ssl-enabled"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-xdqp-ssl-enabled"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-get-xdqp-timeout" type="admin:group-get-xdqp-timeout">
      <p:documentation>
		  This function returns the value for the xdqp timeout
		  setting from the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-get-xdqp-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-get-xdqp-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-get-xdqp-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-get-xdqp-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-get-xdqp-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-hourly-scheduled-task"
                   type="admin:group-hourly-scheduled-task">
      <p:documentation>This function constructs a task to be invoked at hourly intervals.</p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-task-path" required="true"/>
      <p:option name="ml-task-root" required="true"/>
      <p:option name="ml-task-period" required="true"/>
      <p:option name="ml-task-minute" required="true"/>
      <p:option name="ml-task-database" required="true"/>
      <p:option name="ml-task-modules" required="true"/>
      <p:option name="ml-task-user" required="true"/>
      <p:option name="ml-task-host" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-hourly-scheduled-task.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-hourly-scheduled-task"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="TASK_PATH"/>
                  <c:param name="TASK_ROOT"/>
                  <c:param name="TASK_PERIOD"/>
                  <c:param name="TASK_MINUTE"/>
                  <c:param name="TASK_DATABASE"/>
                  <c:param name="TASK_MODULES"/>
                  <c:param name="TASK_USER"/>
                  <c:param name="TASK_HOST"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'TASK_PATH']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-path">
            <p:pipe port="source" step="admin-group-hourly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_ROOT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-root">
            <p:pipe port="source" step="admin-group-hourly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-period">
            <p:pipe port="source" step="admin-group-hourly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_MINUTE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-minute">
            <p:pipe port="source" step="admin-group-hourly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_DATABASE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-database">
            <p:pipe port="source" step="admin-group-hourly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_MODULES']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-modules">
            <p:pipe port="source" step="admin-group-hourly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_USER']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-user">
            <p:pipe port="source" step="admin-group-hourly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_HOST']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-task-host">
            <p:pipe port="source" step="admin-group-hourly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-hourly-scheduled-task"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-hourly-scheduled-task"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-minutely-scheduled-task"
                   type="admin:group-minutely-scheduled-task">
      <p:documentation>This function constructs a task to be invoked at intervals defined in terms of minutes.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-task-path" required="true"/>
      <p:option name="ml-task-root" required="true"/>
      <p:option name="ml-task-period" required="true"/>
      <p:option name="ml-task-database" required="true"/>
      <p:option name="ml-task-modules" required="true"/>
      <p:option name="ml-task-user" required="true"/>
      <p:option name="ml-task-host" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-minutely-scheduled-task.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-minutely-scheduled-task"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="TASK_PATH"/>
                  <c:param name="TASK_ROOT"/>
                  <c:param name="TASK_PERIOD"/>
                  <c:param name="TASK_DATABASE"/>
                  <c:param name="TASK_MODULES"/>
                  <c:param name="TASK_USER"/>
                  <c:param name="TASK_HOST"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'TASK_PATH']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-path">
            <p:pipe port="source" step="admin-group-minutely-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_ROOT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-root">
            <p:pipe port="source" step="admin-group-minutely-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-period">
            <p:pipe port="source" step="admin-group-minutely-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_DATABASE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-database">
            <p:pipe port="source" step="admin-group-minutely-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_MODULES']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-modules">
            <p:pipe port="source" step="admin-group-minutely-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_USER']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-user">
            <p:pipe port="source" step="admin-group-minutely-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_HOST']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-task-host">
            <p:pipe port="source" step="admin-group-minutely-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-minutely-scheduled-task"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-minutely-scheduled-task"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-monthly-scheduled-task"
                   type="admin:group-monthly-scheduled-task">
      <p:documentation>This function constructs a task to be invoked at monthly intervals. </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-task-path" required="true"/>
      <p:option name="ml-task-root" required="true"/>
      <p:option name="ml-task-period" required="true"/>
      <p:option name="ml-task-month-day" required="true"/>
      <p:option name="ml-task-start-time" required="true"/>
      <p:option name="ml-task-database" required="true"/>
      <p:option name="ml-task-modules" required="true"/>
      <p:option name="ml-task-user" required="true"/>
      <p:option name="ml-task-host" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-monthly-scheduled-task.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-monthly-scheduled-task"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="TASK_PATH"/>
                  <c:param name="TASK_ROOT"/>
                  <c:param name="TASK_PERIOD"/>
                  <c:param name="TASK_MONTH_DAY"/>
                  <c:param name="TASK_START_TIME"/>
                  <c:param name="TASK_DATABASE"/>
                  <c:param name="TASK_MODULES"/>
                  <c:param name="TASK_USER"/>
                  <c:param name="TASK_HOST"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'TASK_PATH']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-path">
            <p:pipe port="source" step="admin-group-monthly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_ROOT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-root">
            <p:pipe port="source" step="admin-group-monthly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-period">
            <p:pipe port="source" step="admin-group-monthly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_MONTH_DAY']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-month-day">
            <p:pipe port="source" step="admin-group-monthly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_START_TIME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-start-time">
            <p:pipe port="source" step="admin-group-monthly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_DATABASE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-database">
            <p:pipe port="source" step="admin-group-monthly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_MODULES']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-modules">
            <p:pipe port="source" step="admin-group-monthly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_USER']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-user">
            <p:pipe port="source" step="admin-group-monthly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_HOST']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-task-host">
            <p:pipe port="source" step="admin-group-monthly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-monthly-scheduled-task"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-monthly-scheduled-task"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-namespace" type="admin:group-namespace">
      <p:documentation>
		  This function constructs a namespace element with the 
		  specified prefix and URI.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-prefix" required="true"/>
      <p:option name="ml-namespace-uri" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-namespace.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:group-namespace"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="PREFIX"/>
                  <c:param name="NAMESPACE_URI"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'PREFIX']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-prefix">
            <p:pipe port="source" step="admin-group-namespace"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE_URI']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-namespace-uri">
            <p:pipe port="source" step="admin-group-namespace"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-namespace"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-namespace"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-one-time-scheduled-task"
                   type="admin:group-one-time-scheduled-task">
      <p:documentation>This function constructs a task to be invoked once, at a specific calendar day and time.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-task-path" required="true"/>
      <p:option name="ml-task-root" required="true"/>
      <p:option name="ml-task-start" required="true"/>
      <p:option name="ml-task-database" required="true"/>
      <p:option name="ml-task-modules" required="true"/>
      <p:option name="ml-task-user" required="true"/>
      <p:option name="ml-task-host" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-one-time-scheduled-task.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-one-time-scheduled-task"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="TASK_PATH"/>
                  <c:param name="TASK_ROOT"/>
                  <c:param name="TASK_START"/>
                  <c:param name="TASK_DATABASE"/>
                  <c:param name="TASK_MODULES"/>
                  <c:param name="TASK_USER"/>
                  <c:param name="TASK_HOST"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'TASK_PATH']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-path">
            <p:pipe port="source" step="admin-group-one-time-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_ROOT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-root">
            <p:pipe port="source" step="admin-group-one-time-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_START']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-start">
            <p:pipe port="source" step="admin-group-one-time-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_DATABASE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-database">
            <p:pipe port="source" step="admin-group-one-time-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_MODULES']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-modules">
            <p:pipe port="source" step="admin-group-one-time-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_USER']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-user">
            <p:pipe port="source" step="admin-group-one-time-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_HOST']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-task-host">
            <p:pipe port="source" step="admin-group-one-time-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-one-time-scheduled-task"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-one-time-scheduled-task"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-schema" type="admin:group-schema">
      <p:documentation>
		  This function constructs a schema element with the 
		  specified prefix and URI.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-namespace-uri" required="true"/>
      <p:option name="ml-schema-location" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-schema.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:group-schema"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="NAMESPACE_URI"/>
                  <c:param name="SCHEMA_LOCATION"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'NAMESPACE_URI']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-namespace-uri">
            <p:pipe port="source" step="admin-group-schema"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'SCHEMA_LOCATION']" attribute-name="value"
                       name="params">
         <p:with-option name="attribute-value" select="$ml-schema-location">
            <p:pipe port="source" step="admin-group-schema"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-schema"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-schema"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-audit-enabled" type="admin:group-set-audit-enabled">
      <p:documentation>
      This function changes the audit enabled setting 
      for the group in the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-audit-enabled.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-audit-enabled"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-audit-enabled"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-audit-enabled"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-audit-enabled"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-audit-enabled"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-audit-outcome-restriction"
                   type="admin:group-set-audit-outcome-restriction">
      <p:documentation>
      This function restricts the audit configuration by auditing
      events only if they are "success" or "failure" events.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-outcome" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-audit-outcome-restriction.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-audit-outcome-restriction"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="OUTCOME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-audit-outcome-restriction"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'OUTCOME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-outcome">
            <p:pipe port="source" step="admin-group-set-audit-outcome-restriction"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-audit-outcome-restriction"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-audit-outcome-restriction"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-audit-role-restriction"
                   type="admin:group-set-audit-role-restriction">
      <p:documentation>
      This function restricts the audit configuration by excluding or
      including by role.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-restriction-type" required="true"/>
      <p:option name="ml-roles" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-audit-role-restriction.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-audit-role-restriction"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="RESTRICTION_TYPE"/>
                  <c:param name="ROLES"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-audit-role-restriction"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'RESTRICTION_TYPE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-restriction-type">
            <p:pipe port="source" step="admin-group-set-audit-role-restriction"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'ROLES']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-roles">
            <p:pipe port="source" step="admin-group-set-audit-role-restriction"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-audit-role-restriction"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-audit-role-restriction"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-audit-uri-restriction"
                   type="admin:group-set-audit-uri-restriction">
      <p:documentation>
      This function restricts the audit configuration by excluding or
      including by document uri(s).
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-restriction-type" required="true"/>
      <p:option name="ml-uris" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-audit-uri-restriction.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-audit-uri-restriction"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="RESTRICTION_TYPE"/>
                  <c:param name="URIS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-audit-uri-restriction"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'RESTRICTION_TYPE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-restriction-type">
            <p:pipe port="source" step="admin-group-set-audit-uri-restriction"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'URIS']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-uris">
            <p:pipe port="source" step="admin-group-set-audit-uri-restriction"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-audit-uri-restriction"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-audit-uri-restriction"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-audit-user-restriction"
                   type="admin:group-set-audit-user-restriction">
      <p:documentation>
      This function restricts the audit configuration by excluding or
      including by user.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-restriction-type" required="true"/>
      <p:option name="ml-users" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-audit-user-restriction.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-audit-user-restriction"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="RESTRICTION_TYPE"/>
                  <c:param name="USERS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-audit-user-restriction"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'RESTRICTION_TYPE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-restriction-type">
            <p:pipe port="source" step="admin-group-set-audit-user-restriction"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'USERS']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-users">
            <p:pipe port="source" step="admin-group-set-audit-user-restriction"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-audit-user-restriction"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-audit-user-restriction"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-compressed-tree-cache-partitions"
                   type="admin:group-set-compressed-tree-cache-partitions">
      <p:documentation>
		  This function changes the compressed tree cache partitions
		  setting of the group with the
		  specified ID to the specified value.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-compressed-tree-cache-partitions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-compressed-tree-cache-partitions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-compressed-tree-cache-partitions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-compressed-tree-cache-partitions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-compressed-tree-cache-partitions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-compressed-tree-cache-partitions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-compressed-tree-cache-size"
                   type="admin:group-set-compressed-tree-cache-size">
      <p:documentation>
		  This function changes the compressed tree cache size setting
		  of the group with the
		  specified ID to the specified value.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-compressed-tree-cache-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-compressed-tree-cache-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-compressed-tree-cache-size"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-compressed-tree-cache-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-compressed-tree-cache-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-compressed-tree-cache-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-compressed-tree-read-size"
                   type="admin:group-set-compressed-tree-read-size">
      <p:documentation>
      This function changes the compressed tree read size setting
      of the group with the
      specified ID to the specified value.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-compressed-tree-read-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-compressed-tree-read-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-compressed-tree-read-size"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-compressed-tree-read-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-compressed-tree-read-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-compressed-tree-read-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-expanded-tree-cache-partitions"
                   type="admin:group-set-expanded-tree-cache-partitions">
      <p:documentation>
		  This function changes the expanded tree cache partitions
		  setting of the group with the
		  specified ID to the specified value.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-expanded-tree-cache-partitions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-expanded-tree-cache-partitions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-expanded-tree-cache-partitions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-expanded-tree-cache-partitions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-expanded-tree-cache-partitions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-expanded-tree-cache-partitions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-expanded-tree-cache-size"
                   type="admin:group-set-expanded-tree-cache-size">
      <p:documentation>
		  This function changes the expanded tree cache size setting
		  of the group with the
		  specified ID to the specified value.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-expanded-tree-cache-size.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-expanded-tree-cache-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-expanded-tree-cache-size"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-expanded-tree-cache-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-expanded-tree-cache-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-expanded-tree-cache-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-failover-enable" type="admin:group-set-failover-enable">
      <p:documentation>
		  This function changes the failover enable setting 
		  for the group in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-failover-enable.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-failover-enable"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-failover-enable"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-failover-enable"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-failover-enable"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-failover-enable"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-file-log-level" type="admin:group-set-file-log-level">
      <p:documentation>
		  This function changes the host file log level setting 
		  for the group in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-file-log-level.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-file-log-level"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-file-log-level"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-file-log-level"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-file-log-level"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-file-log-level"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-host-initial-timeout"
                   type="admin:group-set-host-initial-timeout">
      <p:documentation>
		  This function changes the host initial timeout setting 
		  (the time the cluster will wait for a host to come online
		  during cluster startup) for the group
		  in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-host-initial-timeout.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-host-initial-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-host-initial-timeout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-host-initial-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-host-initial-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-host-initial-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-host-timeout" type="admin:group-set-host-timeout">
      <p:documentation>
		  This function changes the host timeout setting (the timeout
		  for communication between hosts) for the group
		  in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-host-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-host-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-host-timeout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-host-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-host-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-host-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-http-timeout" type="admin:group-set-http-timeout">
      <p:documentation>
		  This function changes the HTTP timeout setting for the group
		  in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-http-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-http-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-http-timeout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-http-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-http-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-http-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-http-user-agent" type="admin:group-set-http-user-agent">
      <p:documentation>
		  This function changes the HTTP User-Agent setting for 
		  the group in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-http-user-agent.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-http-user-agent"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-http-user-agent"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-http-user-agent"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-http-user-agent"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-http-user-agent"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-keep-audit-files" type="admin:group-set-keep-audit-files">
      <p:documentation>
      This function changes the keep audit files setting 
      for the group in the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-keep-audit-files.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-keep-audit-files"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-keep-audit-files"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-keep-audit-files"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-keep-audit-files"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-keep-audit-files"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-keep-log-files" type="admin:group-set-keep-log-files">
      <p:documentation>
		  This function changes the keep log files setting 
		  for the group in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-keep-log-files.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-keep-log-files"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-keep-log-files"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-keep-log-files"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-keep-log-files"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-keep-log-files"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-list-cache-partitions"
                   type="admin:group-set-list-cache-partitions">
      <p:documentation>
		  This function changes the list cache partitions setting
		  of the group with the
		  specified ID to the specified value.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-list-cache-partitions.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-list-cache-partitions"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-list-cache-partitions"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-list-cache-partitions"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-list-cache-partitions"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-list-cache-partitions"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-list-cache-size" type="admin:group-set-list-cache-size">
      <p:documentation>
		  This function changes the list cache size setting
		  of the group with the
		  specified ID to the specified value.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-list-cache-size.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-list-cache-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-list-cache-size"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-list-cache-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-list-cache-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-list-cache-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-name" type="admin:group-set-name">
      <p:documentation>
		  This function changes the name of the group with the
		  specified ID to the specified name.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-name.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:group-set-name"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-name"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-name"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-name"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-name"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-retry-timeout" type="admin:group-set-retry-timeout">
      <p:documentation>
      This function changes the the number of seconds a request
      will retry before timing out.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-retry-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-retry-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-retry-timeout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-retry-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-retry-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-retry-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-rotate-audit-files"
                   type="admin:group-set-rotate-audit-files">
      <p:documentation>
      This function changes the rotate audit files setting 
      for the group in the configuration.
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-rotate-audit-files.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-rotate-audit-files"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-rotate-audit-files"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-rotate-audit-files"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-rotate-audit-files"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-rotate-audit-files"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-rotate-log-files" type="admin:group-set-rotate-log-files">
      <p:documentation>
		  This function changes the rotate log files setting 
		  for the group in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-rotate-log-files.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-rotate-log-files"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-rotate-log-files"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-rotate-log-files"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-rotate-log-files"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-rotate-log-files"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-smtp-relay" type="admin:group-set-smtp-relay">
      <p:documentation>
		  This function changes the SMTP relay setting for the group
		  in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-smtp-relay.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-smtp-relay"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-smtp-relay"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-smtp-relay"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-smtp-relay"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-smtp-relay"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-smtp-timeout" type="admin:group-set-smtp-timeout">
      <p:documentation>
		  This function changes the SMTP timeout setting for the group
		  in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-smtp-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-smtp-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-smtp-timeout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-smtp-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-smtp-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-smtp-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-system-log-level" type="admin:group-set-system-log-level">
      <p:documentation>
		  This function changes the host system log level setting 
		  for the group in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-system-log-level.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-system-log-level"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-system-log-level"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-system-log-level"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-system-log-level"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-system-log-level"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-trace-events-activated"
                   type="admin:group-set-trace-events-activated">
      <p:documentation>
		  This function changes the value for trace events in the
		  group configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-trace-events-activated.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-trace-events-activated"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-trace-events-activated"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-trace-events-activated"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-trace-events-activated"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-trace-events-activated"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-xdqp-ssl-allow-sslv3"
                   type="admin:group-set-xdqp-ssl-allow-sslv3">
      <p:documentation>This function enables or disables the SSL v3 protocol for the 
  specified group. </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-xdqp-ssl-allow-sslv3.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-xdqp-ssl-allow-sslv3"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-allow-sslv3"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-allow-sslv3"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-allow-sslv3"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-allow-sslv3"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-xdqp-ssl-allow-tls"
                   type="admin:group-set-xdqp-ssl-allow-tls">
      <p:documentation>This function enables or disables the TLS protocol for the specified
  group. </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-xdqp-ssl-allow-tls.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-xdqp-ssl-allow-tls"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-allow-tls"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-allow-tls"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-allow-tls"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-allow-tls"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-xdqp-ssl-ciphers" type="admin:group-set-xdqp-ssl-ciphers">
      <p:documentation>This function sets SSL ciphers for the specified group. This is the 
  standard cipher specification string for OpenSSL. </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-xdqp-ssl-ciphers.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-xdqp-ssl-ciphers"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-ciphers"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-ciphers"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-ciphers"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-ciphers"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-xdqp-ssl-enabled" type="admin:group-set-xdqp-ssl-enabled">
      <p:documentation>This function enables or disables SSL for the group.</p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-xdqp-ssl-enabled.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-xdqp-ssl-enabled"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-enabled"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-enabled"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-enabled"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-xdqp-ssl-enabled"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-set-xdqp-timeout" type="admin:group-set-xdqp-timeout">
      <p:documentation>
		  This function changes the XDQP timeout setting (the timeout
		  for communication between data nodes and evaluator nodes) 
		  for the group in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-set-xdqp-timeout.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-set-xdqp-timeout"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-group-set-xdqp-timeout"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-group-set-xdqp-timeout"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-set-xdqp-timeout"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-set-xdqp-timeout"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-trace-event" type="admin:group-trace-event">
      <p:documentation>
		  This function constructs an event element for the 
		  specified event name.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-event-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-trace-event.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:group-trace-event"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="EVENT_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'EVENT_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-event-id">
            <p:pipe port="source" step="admin-group-trace-event"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-trace-event"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-trace-event"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-group-weekly-scheduled-task"
                   type="admin:group-weekly-scheduled-task">
      <p:documentation>This function constructs a task to be invoked at weekly intervals.</p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-task-path" required="true"/>
      <p:option name="ml-task-root" required="true"/>
      <p:option name="ml-task-period" required="true"/>
      <p:option name="ml-task-days" required="true"/>
      <p:option name="ml-task-start-time" required="true"/>
      <p:option name="ml-task-database" required="true"/>
      <p:option name="ml-task-modules" required="true"/>
      <p:option name="ml-task-user" required="true"/>
      <p:option name="ml-task-host" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/group-weekly-scheduled-task.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:group-weekly-scheduled-task"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="TASK_PATH"/>
                  <c:param name="TASK_ROOT"/>
                  <c:param name="TASK_PERIOD"/>
                  <c:param name="TASK_DAYS"/>
                  <c:param name="TASK_START_TIME"/>
                  <c:param name="TASK_DATABASE"/>
                  <c:param name="TASK_MODULES"/>
                  <c:param name="TASK_USER"/>
                  <c:param name="TASK_HOST"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'TASK_PATH']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-path">
            <p:pipe port="source" step="admin-group-weekly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_ROOT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-root">
            <p:pipe port="source" step="admin-group-weekly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_PERIOD']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-period">
            <p:pipe port="source" step="admin-group-weekly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_DAYS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-days">
            <p:pipe port="source" step="admin-group-weekly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_START_TIME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-start-time">
            <p:pipe port="source" step="admin-group-weekly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_DATABASE']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-database">
            <p:pipe port="source" step="admin-group-weekly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_MODULES']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-modules">
            <p:pipe port="source" step="admin-group-weekly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_USER']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-task-user">
            <p:pipe port="source" step="admin-group-weekly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'TASK_HOST']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-task-host">
            <p:pipe port="source" step="admin-group-weekly-scheduled-task"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-group-weekly-scheduled-task"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-group-weekly-scheduled-task"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-host-exists" type="admin:host-exists">
      <p:documentation>
  This function determines whether or not the specified Host
  exists.  Returns  true  if the Host exists, otherwise 
   false  is returned.
  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-host-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/host-exists.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:host-exists"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="HOST_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'HOST_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-host-name">
            <p:pipe port="source" step="admin-host-exists"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-host-exists"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-host-exists"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-host-get-group" type="admin:host-get-group">
      <p:documentation>
		  This function returns the group ID for the host with the 
		  specified ID.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-host-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/host-get-group.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:host-get-group"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="HOST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'HOST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-host-id">
            <p:pipe port="source" step="admin-host-get-group"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-host-get-group"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-host-get-group"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-host-get-id" type="admin:host-get-id">
      <p:documentation>
		  This function return the ID for the specified host from 
		  the configuration.
		  The difference between this function and  xdmp:host()  
		  is that the ID from 
		  this function can come from a host that has not yet been saved (that is, 
		  from a host that has been created in the same query with the Admin library
		  but has not yet been saved to the cluster configuration files).  This ID 
		  enables you to completely configure a newly created host without the 
		  need to first save the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-host-name" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/host-get-id.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:host-get-id"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="HOST_NAME"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'HOST_NAME']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-host-name">
            <p:pipe port="source" step="admin-host-get-id"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-host-get-id"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-host-get-id"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-host-get-name" type="admin:host-get-name">
      <p:documentation>
		  This function returns the name for the host with the 
		  specified ID.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-host-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/host-get-name.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:host-get-name"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="HOST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'HOST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-host-id">
            <p:pipe port="source" step="admin-host-get-name"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-host-get-name"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-host-get-name"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-host-get-port" type="admin:host-get-port">
      <p:documentation>
		  This function returns the bind port for the host with the 
		  specified ID.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-host-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/host-get-port.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:host-get-port"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="HOST_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'HOST_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-host-id">
            <p:pipe port="source" step="admin-host-get-port"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-host-get-port"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-host-get-port"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-host-set-group" type="admin:host-set-group">
      <p:documentation>
		  This function changes the group to which an existing host
		  belongs to the newly specified value.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-host-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/host-set-group.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:host-set-group"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="HOST_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'HOST_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-host-id">
            <p:pipe port="source" step="admin-host-set-group"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-host-set-group"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-host-set-group"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-host-set-group"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-host-set-name" type="admin:host-set-name">
      <p:documentation>
		  This function changes the name of an existing host
		  to the newly specified value.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-host-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/host-set-name.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:host-set-name"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="HOST_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'HOST_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-host-id">
            <p:pipe port="source" step="admin-host-set-name"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-host-set-name"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-host-set-name"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-host-set-name"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-host-set-port" type="admin:host-set-port">
      <p:documentation>
		  This function changes the bind port value for the host
		  to the newly specified value.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-host-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/host-set-port.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:host-set-port"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="HOST_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'HOST_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-host-id">
            <p:pipe port="source" step="admin-host-set-port"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-host-set-port"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-host-set-port"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-host-set-port"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-http-server-create" type="admin:http-server-create">
      <p:documentation>
		  This function creates a  new HTTP App Server with the 
		  specified name, root, and port in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-appserver-name" required="true"/>
      <p:option name="ml-root" required="true"/>
      <p:option name="ml-port" required="true"/>
      <p:option name="ml-modules-id" required="true"/>
      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/http-server-create.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:http-server-create"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="APPSERVER_NAME"/>
                  <c:param name="ROOT"/>
                  <c:param name="PORT"/>
                  <c:param name="MODULES_ID"/>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-http-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-name">
            <p:pipe port="source" step="admin-http-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'ROOT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-root">
            <p:pipe port="source" step="admin-http-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'PORT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-port">
            <p:pipe port="source" step="admin-http-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'MODULES_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-modules-id">
            <p:pipe port="source" step="admin-http-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-http-server-create"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-http-server-create"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-http-server-create"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-mimetype" type="admin:mimetype">
      <p:documentation>
      This function constructs a mimetype specification. 
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-name" required="true"/>
      <p:option name="ml-extensions" required="true"/>
      <p:option name="ml-format" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/mimetype.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:mimetype"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="NAME"/>
                  <c:param name="EXTENSIONS"/>
                  <c:param name="FORMAT"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-name">
            <p:pipe port="source" step="admin-mimetype"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'EXTENSIONS']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-extensions">
            <p:pipe port="source" step="admin-mimetype"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'FORMAT']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-format">
            <p:pipe port="source" step="admin-mimetype"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-mimetype"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-mimetype"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-mimetypes-add" type="admin:mimetypes-add">
      <p:documentation>
      This function adds mimetypes to the configuration. This function always requires
      a server restart to take effect. 
    </p:documentation>

      <p:input port="source"/>
      <p:input port="mimetypes" sequence="true"/>
      <p:output port="result" sequence="false"/>



      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/mimetypes-add.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//mimetypes">
         <p:input port="replacement">
            <p:pipe port="mimetypes" step="admin-mimetypes-add"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:mimetypes-add"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity name="params">
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set/>
            </p:inline>
         </p:input>
      </p:identity>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-mimetypes-add"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-mimetypes-add"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-mimetypes-delete" type="admin:mimetypes-delete">
      <p:documentation>
      This function deletes mimetypes from the configuration. This function always requires
      a server restart to take effect. 
    </p:documentation>

      <p:input port="source"/>
      <p:input port="mimetypes" sequence="true"/>
      <p:output port="result" sequence="false"/>



      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/mimetypes-delete.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:replace match="//mimetypes">
         <p:input port="replacement">
            <p:pipe port="mimetypes" step="admin-mimetypes-delete"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:mimetypes-delete"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity name="params">
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set/>
            </p:inline>
         </p:input>
      </p:identity>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-mimetypes-delete"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-mimetypes-delete"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-mimetypes-get" type="admin:mimetypes-get">
      <p:documentation>
      This function returns all the mimetypes from the configuration. 
    </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>



      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/mimetypes-get.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:mimetypes-get"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity name="params">
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set/>
            </p:inline>
         </p:input>
      </p:identity>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-mimetypes-get"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-mimetypes-get"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-restart-hosts" type="admin:restart-hosts">
      <p:documentation>
		  This function restarts MarkLogic Server for the 
		  specified hosts.
	  </p:documentation>

      <p:input port="source"/>

      <p:option name="ml-hosts" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/restart-hosts.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type" attribute-value="admin:restart-hosts"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="HOSTS"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'HOSTS']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-hosts">
            <p:pipe port="source" step="admin-restart-hosts"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-restart-hosts"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-restart-hosts"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-save-configuration" type="admin:save-configuration">
      <p:documentation>
		  This function saves a configuration specification to 
		  the cluster configuration files.  It restarts MarkLogic 
		  Server for "cold" administrative tasks only (for example,
		  for App Server port assignment changes). If you do not want 
		  those "cold" administrative tasks to automatically restart
		  MarkLogic Server, use 
		   admin:save-configuration-without-restart 
		  instead.
	  </p:documentation>

      <p:input port="source"/>
	  <p:output port="result"/>


      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/save-configuration.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:save-configuration"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity name="params">
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set/>
            </p:inline>
         </p:input>
      </p:identity>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-save-configuration"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-save-configuration"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-save-configuration-without-restart"
                   type="admin:save-configuration-without-restart">
      <p:documentation>
		  This function saves a configuration specification to 
		  the cluster configuration files, without restarting MarkLogic 
		  Server.  If you use this function to save any changes that
		  require a server restart ("cold" changes such as App Server
		  port assignment changes), then the changes will not take
		  effect until the next time MarkLogic Server restarts 
		  (although they will be saved in the configuration).  If you
		  want MarkLogic Server to automatically restart when needed,
		  use  admin:save-configuration  instead.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="true"/>



      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/save-configuration-without-restart.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:save-configuration-without-restart"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity name="params">
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set/>
            </p:inline>
         </p:input>
      </p:identity>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-save-configuration-without-restart"/>
         </p:input>
      </ml:action>
   	
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-save-configuration-without-restart"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-get-debug-allow" type="admin:taskserver-get-debug-allow">
      <p:documentation>
		  This function returns the value for the debug-allow setting
		  configured on the task server for the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-get-debug-allow.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-get-debug-allow"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-get-debug-allow"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-get-debug-allow"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-get-debug-allow"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-get-debug-threads"
                   type="admin:taskserver-get-debug-threads">
      <p:documentation>
		  This function returns the number of debug threads configured 
		  on the task server for the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-get-debug-threads.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-get-debug-threads"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-get-debug-threads"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-get-debug-threads"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-get-debug-threads"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-get-default-time-limit"
                   type="admin:taskserver-get-default-time-limit">
      <p:documentation>
		  This function returns the default time limit configured 
		  on the task server for the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-get-default-time-limit.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-get-default-time-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-get-default-time-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-get-default-time-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-get-default-time-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-get-log-errors" type="admin:taskserver-get-log-errors">
      <p:documentation>
		  This function returns the value for the log-errors setting
		  configured on the task server for the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-get-log-errors.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-get-log-errors"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-get-log-errors"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-get-log-errors"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-get-log-errors"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-get-max-time-limit"
                   type="admin:taskserver-get-max-time-limit">
      <p:documentation>
		  This function returns the maximum time limit configured 
		  on the task server for the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-get-max-time-limit.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-get-max-time-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-get-max-time-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-get-max-time-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-get-max-time-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-get-name" type="admin:taskserver-get-name">
      <p:documentation>
		  This function returns the name of the task server for the
		  specified group from the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-get-name.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-get-name"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-get-name"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-get-name"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-get-name"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-get-post-commit-trigger-depth"
                   type="admin:taskserver-get-post-commit-trigger-depth">
      <p:documentation>
		  This function returns the maximum post-commit trigger
		  depth configured 
		  on the task server for the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-get-post-commit-trigger-depth.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-get-post-commit-trigger-depth"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-get-post-commit-trigger-depth"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-get-post-commit-trigger-depth"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-get-post-commit-trigger-depth"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-get-pre-commit-trigger-depth"
                   type="admin:taskserver-get-pre-commit-trigger-depth">
      <p:documentation>
		  This function returns the maximum pre-commit trigger
		  depth configured 
		  on the task server for the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-get-pre-commit-trigger-depth.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-get-pre-commit-trigger-depth"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-get-pre-commit-trigger-depth"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-get-pre-commit-trigger-depth"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-get-pre-commit-trigger-depth"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-get-pre-commit-trigger-limit"
                   type="admin:taskserver-get-pre-commit-trigger-limit">
      <p:documentation>
		  This function returns the pre-commit trigger
		  limit configured 
		  on the task server for the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-get-pre-commit-trigger-limit.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-get-pre-commit-trigger-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-get-pre-commit-trigger-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-get-pre-commit-trigger-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-get-pre-commit-trigger-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-get-profile-allow"
                   type="admin:taskserver-get-profile-allow">
      <p:documentation>
		  This function returns the value for the profile-allow setting
		  configured on the task server for the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-get-profile-allow.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-get-profile-allow"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-get-profile-allow"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-get-profile-allow"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-get-profile-allow"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-get-queue-size" type="admin:taskserver-get-queue-size">
      <p:documentation>
		  This function returns the number queue size configured 
		  on the task server for the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-get-queue-size.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-get-queue-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-get-queue-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-get-queue-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-get-queue-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-get-threads" type="admin:taskserver-get-threads">
      <p:documentation>
		  This function returns the number of threads configured 
		  on the task server for the specified group.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-get-threads.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-get-threads"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-get-threads"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-get-threads"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-get-threads"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-set-debug-allow" type="admin:taskserver-set-debug-allow">
      <p:documentation>
		  This function sets the value for the debug allow setting 
		  for the task server in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-set-debug-allow.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-set-debug-allow"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-set-debug-allow"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-taskserver-set-debug-allow"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-set-debug-allow"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-set-debug-allow"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-set-debug-threads"
                   type="admin:taskserver-set-debug-threads">
      <p:documentation>
		  This function sets the value in the configuration of
		  the maximum number of debug threads for the specified 
		  task server.
		  This is a "cold" operation; when you use 
		   admin:save-configuration  to save the 
		  configuration, it will automatically restart 
		  MarkLogic Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-set-debug-threads.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-set-debug-threads"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-set-debug-threads"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-taskserver-set-debug-threads"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-set-debug-threads"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-set-debug-threads"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-set-default-time-limit"
                   type="admin:taskserver-set-default-time-limit">
      <p:documentation>
		  This function sets the task server default time limit in the 
		  configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-set-default-time-limit.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-set-default-time-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-set-default-time-limit"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-taskserver-set-default-time-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-set-default-time-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-set-default-time-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-set-log-errors" type="admin:taskserver-set-log-errors">
      <p:documentation>
		  This function sets the value for the log errors setting 
		  for the task server in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-set-log-errors.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-set-log-errors"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-set-log-errors"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-taskserver-set-log-errors"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-set-log-errors"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-set-log-errors"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-set-max-time-limit"
                   type="admin:taskserver-set-max-time-limit">
      <p:documentation>
		  This function sets the task server max time limit in the 
		  configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-set-max-time-limit.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-set-max-time-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-set-max-time-limit"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-taskserver-set-max-time-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-set-max-time-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-set-max-time-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-set-post-commit-trigger-depth"
                   type="admin:taskserver-set-post-commit-trigger-depth">
      <p:documentation>
		  This function sets the value for the task server post-commit 
		  trigger depth in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-set-post-commit-trigger-depth.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-set-post-commit-trigger-depth"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-set-post-commit-trigger-depth"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-taskserver-set-post-commit-trigger-depth"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-set-post-commit-trigger-depth"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-set-post-commit-trigger-depth"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-set-pre-commit-trigger-depth"
                   type="admin:taskserver-set-pre-commit-trigger-depth">
      <p:documentation>
		  This function sets the value for the task server pre-commit 
		  trigger depth in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-set-pre-commit-trigger-depth.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-set-pre-commit-trigger-depth"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-set-pre-commit-trigger-depth"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-taskserver-set-pre-commit-trigger-depth"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-set-pre-commit-trigger-depth"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-set-pre-commit-trigger-depth"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-set-pre-commit-trigger-limit"
                   type="admin:taskserver-set-pre-commit-trigger-limit">
      <p:documentation>
		  This function sets the value for the task server pre-commit 
		  trigger depth in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-set-pre-commit-trigger-limit.xqy"
                    content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-set-pre-commit-trigger-limit"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-set-pre-commit-trigger-limit"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-taskserver-set-pre-commit-trigger-limit"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-set-pre-commit-trigger-limit"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-set-pre-commit-trigger-limit"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-set-profile-allow"
                   type="admin:taskserver-set-profile-allow">
      <p:documentation>
		  This function sets the value for the profile allow setting 
		  for the task server in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-set-profile-allow.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-set-profile-allow"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-set-profile-allow"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-taskserver-set-profile-allow"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-set-profile-allow"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-set-profile-allow"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-set-queue-size" type="admin:taskserver-set-queue-size">
      <p:documentation>
		  This function sets the value in the configuration of
		  the maximum queue size for the specified 
		  task server.
		  This is a "cold" operation; when you use 
		   admin:save-configuration  to save the 
		  configuration, it will automatically restart 
		  MarkLogic Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-set-queue-size.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-set-queue-size"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-set-queue-size"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-taskserver-set-queue-size"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-set-queue-size"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-set-queue-size"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-taskserver-set-threads" type="admin:taskserver-set-threads">
      <p:documentation>
		  This function sets the value in the configuration of
		  the maximum number of threads for the specified task server.
		  This is a "cold" operation; when you use 
		   admin:save-configuration  to save the 
		  configuration, it will automatically restart 
		  MarkLogic Server.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-value" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/taskserver-set-threads.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:taskserver-set-threads"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="VALUE"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-taskserver-set-threads"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'VALUE']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-value">
            <p:pipe port="source" step="admin-taskserver-set-threads"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-taskserver-set-threads"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-taskserver-set-threads"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-webdav-server-create" type="admin:webdav-server-create">
      <p:documentation>
		  This function creates a new WebDAV App Server with the 
		  specified name, library, and port in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-appserver-name" required="true"/>
      <p:option name="ml-root" required="true"/>
      <p:option name="ml-port" required="true"/>
      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/webdav-server-create.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:webdav-server-create"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="APPSERVER_NAME"/>
                  <c:param name="ROOT"/>
                  <c:param name="PORT"/>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-webdav-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-name">
            <p:pipe port="source" step="admin-webdav-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'ROOT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-root">
            <p:pipe port="source" step="admin-webdav-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'PORT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-port">
            <p:pipe port="source" step="admin-webdav-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-webdav-server-create"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-webdav-server-create"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-webdav-server-create"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>


   <p:declare-step name="admin-xdbc-server-create" type="admin:xdbc-server-create">
      <p:documentation>
		  This function creates a new XDBC App Server with the 
		  specified name, root, and port in the configuration.
	  </p:documentation>

      <p:input port="source"/>
      <p:output port="result" sequence="false"/>

      <p:option name="ml-group-id" required="true"/>
      <p:option name="ml-appserver-name" required="true"/>
      <p:option name="ml-root" required="true"/>
      <p:option name="ml-port" required="true"/>
      <p:option name="ml-modules-id" required="true"/>
      <p:option name="ml-database-id" required="true"/>

      <p:unwrap name="configuration" match="/ml:connection"/>
      <p:sink/>

      <p:identity>
         <p:documentation>Retrieve the source query</p:documentation>
         <p:input port="source">
            <p:data href="xquery/admin/xdbc-server-create.xqy" content-type="text/plain"/>
         </p:input>
      </p:identity>
      <p:unescape-markup>
         <p:documentation>Any XML elements in the query need to be un-escaped.</p:documentation>
      </p:unescape-markup>
      <p:replace match="//config">
         <p:input port="replacement">
            <p:pipe port="result" step="configuration"/>
         </p:input>
      </p:replace>
      <p:add-attribute match="/*" attribute-name="step-type"
                       attribute-value="admin:xdbc-server-create"/>
      <p:escape-markup name="query"/>
      <p:sink/>

      <p:identity>
         <p:input port="source">
            <p:inline exclude-inline-prefixes="#all">
               <c:param-set>
                  <c:param name="GROUP_ID"/>
                  <c:param name="APPSERVER_NAME"/>
                  <c:param name="ROOT"/>
                  <c:param name="PORT"/>
                  <c:param name="MODULES_ID"/>
                  <c:param name="DATABASE_ID"/>
               </c:param-set>
            </p:inline>
         </p:input>
      </p:identity>
      <p:add-attribute match="//c:param[@name = 'GROUP_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-group-id">
            <p:pipe port="source" step="admin-xdbc-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'APPSERVER_NAME']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-appserver-name">
            <p:pipe port="source" step="admin-xdbc-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'ROOT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-root">
            <p:pipe port="source" step="admin-xdbc-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'PORT']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-port">
            <p:pipe port="source" step="admin-xdbc-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'MODULES_ID']" attribute-name="value">
         <p:with-option name="attribute-value" select="$ml-modules-id">
            <p:pipe port="source" step="admin-xdbc-server-create"/>
         </p:with-option>
      </p:add-attribute>
      <p:add-attribute match="//c:param[@name = 'DATABASE_ID']" attribute-name="value" name="params">
         <p:with-option name="attribute-value" select="$ml-database-id">
            <p:pipe port="source" step="admin-xdbc-server-create"/>
         </p:with-option>
      </p:add-attribute>

      <ml:action name="action">
         <p:input port="source">
            <p:pipe port="result" step="query"/>
         </p:input>
         <p:input port="params">
            <p:pipe port="result" step="params"/>
         </p:input>
         <p:input port="connection">
            <p:pipe port="source" step="admin-xdbc-server-create"/>
         </p:input>
      </ml:action>
      <p:sink/>
      <p:delete match="/ml:connection/*">
         <p:input port="source">
            <p:pipe port="source" step="admin-xdbc-server-create"/>
         </p:input>
      </p:delete>
      <p:insert match="/*" position="last-child">
         <p:input port="insertion">
            <p:pipe port="result" step="action"/>
         </p:input>
      </p:insert>
   </p:declare-step>
</p:library>