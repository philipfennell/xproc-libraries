<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="permissions.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1043743"></A>
<A ID="47015"></A>
URI Privileges and Permissions on Documents</Heading-1>
<pagenum>
<A ID="pgfId-1045245"></A>
26</pagenum>
<Body>
<A ID="pgfId-1043432"></A>
The MarkLogic Server security model has a set of tools used to control access to documents. These authorization tools control creating, inserting into, updating, and reading documents in a database. This chapter describes those tools and includes the following sections:</Body>
<Body-bullet>
<A ID="pgfId-1044144"></A>
<A href="permissions.xml#id(49920)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating Documents</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1044333"></A>
<A href="permissions.xml#id(20759)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Permissions on Documents</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1044152"></A>
<A href="permissions.xml#id(60427)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Securing Collection Membership</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1044161"></A>
<A href="permissions.xml#id(40216)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Default Permissions</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1044959"></A>
<A href="permissions.xml#id(93947)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Example--Using Permissions</Hyperlink>
</A></Body-bullet>
<Heading-2>
<A ID="pgfId-1044202"></A>
<A ID="49920"></A>
Creating Documents</Heading-2>
<Body>
<A ID="pgfId-1044207"></A>
In order to have the authority to create a document in a MarkLogic Server database, a user must possess the needed privileges to create a document with a given URI. The ability to create documents based on the URI specified is controlled with URI privileges and with two built-in execute privileges (<code>
any-uri</code>
 and <code>
unprotected-uri</code>
). In order for a user to possess a privilege, the user must be part of a role (either directly or indirectly, through role inheritance) to which the privilege is assigned. This section describes these different privileges.</Body>
<Heading-3>
<A ID="pgfId-1044206"></A>
URI Privileges</Heading-3>
<Body>
<A ID="pgfId-1044113"></A>
URI privileges control the ability to create a new document with a given URI prefix. Creating a URI privilege with a given URI protects that URI from new document creation; only users possessing the URI privilege can create a new document with the prefix.</Body>
<Body>
<A ID="pgfId-1044167"></A>
For example, the screenshot below shows a URI privilege with /widget.com/sales/ as the protected URI. Any URI with /widget.com/sales/ as the prefix will be protected, and users must be part of the sales role in order to create documents with URIs beginning with this prefix. In this example, you need this URI privilege (or a privilege with at least as much authority) to create a document with the URI <Emphasis>
/widget.com/sales/my_process.xml</Emphasis>
.</Body>
<Body>
<A ID="pgfId-1044171"></A>
<IMAGE xml:link="simple" href="images/sales_uri.gif" show="embed" actuate="auto"/>
</Body>
<Heading-3>
<A ID="pgfId-1044165"></A>
Built-In any-uri and unprotected-uri Execute Privileges</Heading-3>
<Body>
<A ID="pgfId-1044239"></A>
The following built-in execute privileges control the creation of URIs:</Body>
<Body-bullet>
<A ID="pgfId-1044363"></A>
<code>
any-uri</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1044376"></A>
<code>
unprotected-uri</code>
</Body-bullet>
<Body>
<A ID="pgfId-1044364"></A>
The <code>
any-uri</code>
 privilege provides the authority to create a document with any URI in the database, even if the URI is protected with a URI privilege. The <code>
unprotected-uri</code>
 privilege provides the authority to create a document at any URI in the database except for URIs that are protected with a URI privilege.</Body>
<Heading-2>
<A ID="pgfId-1044318"></A>
<A ID="20759"></A>
Permissions on Documents</Heading-2>
<Body>
<A ID="pgfId-1044395"></A>
Permissions on a document control access to capabilities (<code>
read</code>
, <code>
insert</code>
, <code>
update</code>
, and <code>
execute</code>
) on that document. Each permission consists of a capability and a corresponding role. This section describes the capabilities for permissions and describes the ways to set permissions on a document. It includes the following subsections:</Body>
<Body-bullet>
<A ID="pgfId-1044781"></A>
<A href="permissions.xml#id(62440)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Capabilities Associated Through Permissions</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1044789"></A>
<A href="permissions.xml#id(12138)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Setting Document Permissions</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1044424"></A>
<A ID="62440"></A>
Capabilities Associated Through Permissions</Heading-3>
<Body>
<A ID="pgfId-1045374"></A>
Permissions on a document pair a role with a capability, and you can add multiple permissions to a document. The capability provides any user who possesses the permission with the capability of performing that action. Users possess these capabilities through roles; if the user is part of the role (either directly or through inheriting the role) with the corresponding capability for a document, then the user has that capability for the given document. Each permission associates a role with one of the following capabilities:</Body>
<Body-bullet>
<A ID="pgfId-1044660"></A>
<A href="permissions.xml#id(21750)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Read</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1044664"></A>
<A href="permissions.xml#id(92699)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Update</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1044668"></A>
<A href="permissions.xml#id(78987)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Insert</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1044672"></A>
<A href="permissions.xml#id(33307)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Execute</Hyperlink>
</A></Body-bullet>
<Heading-4>
<A ID="pgfId-1044520"></A>
<A ID="21750"></A>
Read</Heading-4>
<Body>
<A ID="pgfId-1044428"></A>
The <code>
read</code>
 capability provides the authority to see the content in the document. Being able to see the content does not allow you to make any changes to the document. </Body>
<Heading-4>
<A ID="pgfId-1044429"></A>
<A ID="92699"></A>
Update</Heading-4>
<Body>
<A ID="pgfId-1044430"></A>
The <code>
update</code>
 capability provides the authority to modify content in the document as well as delete the document. However, it does not provide the authority to read the document; the ability to read the document requires the addition of the <code>
read</code>
 capability. Without <code>
read</code>
 capability, users with <code>
update</code>
 capability can call <code>
xdmp:document-delete()</code>
 and <code>
xdmp:document-insert()</code>
. However, any node update function (<code>
xdmp:node-replace()</code>
, <code>
xdmp:node-delete()</code>
 and <code>
xdmp:node-insert()</code>
) cannot be called. Node update functions require a node from the document as a parameter. If a user cannot read the document, he cannot access the node in the document and supply it as a parameter. </Body>
<Body>
<A ID="pgfId-1044431"></A>
There is a way to get around the issue with node update functions. The <code>
update</code>
 capability provides the authority to change the permissions on a document. Therefore, you can use <code>
xdmp:add-permissions()</code>
 to add a new permission to the document with <code>
read</code>
 capability for a given role. Once the user has both <code>
read</code>
 and <code>
update</code>
 capabilities, he is able to call node update functions.</Body>
<Body>
<A ID="pgfId-1053131"></A>
Additionally, non-admin users (users who does not have the <code>
admin</code>
 role) must add update permissions on documents when creating them; attempts to create a document without at least one update permission will result in an <code>
XDMP-MUSTHAVEUPDATE</code>
 exception. You can create the permissions in a variety of ways, including options to various functions (as parameters to <code>
xdmp:document-load</code>
 and <code>
xdmp:document-insert</code>
, for example), as default permission on a user or role, or with the permissions APIs (for example, <code>
xdmp:document-add-permissions</code>
, <code>
xdmp:document:set-permissions</code>
).</Body>
<Heading-4>
<A ID="pgfId-1044432"></A>
<A ID="78987"></A>
Insert</Heading-4>
<Body>
<A ID="pgfId-1044433"></A>
The <code>
insert</code>
 capability has a subset of the capabilities of the <code>
update</code>
 capability. The <code>
insert</code>
 capability on a document provides the authority to add new content to the document. The <code>
insert</code>
 capability by itself does not allow a user to change or remove an existing document (that is, calls to <code>
xdmp:document-insert()</code>
 and <code>
xdmp:document-delete()</code>
 on an existing document will fail). Furthermore, you need the <code>
read</code>
 capability on the document to perform actions that use any of the node insert functions (<code>
node-insert-before()</code>
, <code>
node-insert-after()</code>
, <code>
node-insert-child()</code>
), as explained above in the description for <code>
update</code>
. Therefore, a permission with an <code>
insert</code>
 capability must be paired with a permission with a <code>
read</code>
 capability to be useful.</Body>
<Heading-4>
<A ID="pgfId-1044434"></A>
<A ID="33307"></A>
Execute</Heading-4>
<Body>
<A ID="pgfId-1044435"></A>
The <code>
execute</code>
 capability on a document provides the authority to execute application code contained in that document, if the document is stored in a database which is configured as a modules database. Without possessing a permission with <code>
execute</code>
 capability on a stored module, users will not be able to execute that module.</Body>
<Heading-3>
<A ID="pgfId-1044731"></A>
<A ID="12138"></A>
Setting Document Permissions</Heading-3>
<Body>
<A ID="pgfId-1044775"></A>
When you create documents in a database, you must think about setting permissions on the document. If a document has no permission set on it, no one (other than users with the <code>
admin</code>
 role) can read, update, insert, or delete it. </Body>
<Body>
<A ID="pgfId-1044766"></A>
You can set permissions on a document in the following ways:</Body>
<Body-bullet>
<A ID="pgfId-1044767"></A>
You can explicitly set permissions on a document at load time (as a parameter to <code>
xdmp:load</code>
 or <code>
xdmp:document-insert</code>
, for example).</Body-bullet>
<Body-bullet>
<A ID="pgfId-1044768"></A>
You can explicitly set and remove permissions on a document with the <code>
xdmp:document-add-permissions</code>
, <code>
xdmp:document-set-permissions</code>
, and <code>
xdmp:document-remove-permissions</code>
 functions.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1044769"></A>
You can implicitly set the permissions on a document at document creation time based on the default permissions of the user who creates the document. </Body-bullet>
<Body>
<A ID="pgfId-1045495"></A>
For examples of setting permissions on documents, see <A href="permissions.xml#id(93947)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Example--Using Permissions' on page&#160;22</A>.</Body>
<Heading-2>
<A ID="pgfId-1044097"></A>
<A ID="60427"></A>
Securing Collection Membership</Heading-2>
<Body>
<A ID="pgfId-1044339"></A>
Just like you can assign permissions to a document that map roles with capabilities (<code>
read</code>
, <code>
insert</code>
, <code>
update</code>
, <code>
execute</code>
), you can also secure membership in collections by assigning permissions to collections. The difference with collections is that you must use the Admin interface or the <code>
security.xqy</code>
 XQuery functions to assign permissions to collections; you cannot assign permissions to collections implicitly with default permissions. </Body>
<Body>
<A ID="pgfId-1044350"></A>
For more information about permissions on collections, see <A href="../search-dev-guide/collections.xml#id(32054)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Collections and Security</Hyperlink>
</A> in the <Emphasis>
Search Developer's Guide</Emphasis>
.</Body>
<Heading-2>
<A ID="pgfId-1044048"></A>
<A ID="40216"></A>
Default Permissions</Heading-2>
<Body>
<A ID="pgfId-1043923"></A>
When a document is created, it is initialized with a set of permissions. If permissions are not explicitly set (as a parameter to <code>
xdmp:load</code>
 or <code>
xdmp:document-insert</code>
, for example), then the permissions are set to the <Emphasis>
default permissions</Emphasis>
. The default permissions are determined based on the roles assigned (both assigned explicitly and inherited from roles assigned to other roles) to the user who creates the document and on any default permissions assigned directly to the user. </Body>
<Body>
<A ID="pgfId-1044977"></A>
If users will be creating documents in a database, it is very important to set up default permissions for roles to which that user is assigned. Without default permissions, it is easy to create documents that no users (except those who are part of the <code>
admin</code>
 role) can read, update, or delete.</Body>
<Heading-2>
<A ID="pgfId-1044817"></A>
<A ID="93947"></A>
Example--Using Permissions</Heading-2>
<Body>
<A ID="pgfId-1044818"></A>
It is very important to consider document permissions whenever you load content into a database, whether you load data using the built-in functions (for example, <code>
xdmp:load</code>
 or <code>
xdmp:document-insert</code>
), WebDAV (for example, dragging and dropping files into a WebDAV folder), or a custom program to load data. In each case, setting permissions, whether explicitly or using default permissions, is necessary if you have any security policies set up. This example shows several ways of setting permissions on documents.</Body>
<Body>
<A ID="pgfId-1045620"></A>
Suppose that Ron of the <Emphasis>
engineering</Emphasis>
 role is given the task to create a document to describe new features that will be added to the next version of the widget. Once the document is created, other users of the <Emphasis>
engineering</Emphasis>
 role will contribute to the document and add the features they are working on. Ian, of the <Emphasis>
engineering-manager</Emphasis>
 role decides that users of the engineering role should only be allowed to read and add to the document. This enables Ian to control the process of removing or changing features in the document. The document will therefore be created with <code>
read</code>
 and <code>
insert</code>
 permissions for the <Emphasis>
engineering</Emphasis>
 role, and <code>
read</code>
 and <code>
update</code>
 permissions for the <Emphasis>
engineering-manager</Emphasis>
 role.</Body>
<Body>
<A ID="pgfId-1044819"></A>
There are two ways to apply permissions to documents at creation time:</Body>
<Body-bullet>
<A ID="pgfId-1045515"></A>
<A href="permissions.xml#id(15201)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Explicit Parameter</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1045533"></A>
<A href="permissions.xml#id(99089)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Default Permission Settings</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1044820"></A>
<A ID="15201"></A>
Explicit Parameter</Heading-3>
<Body>
<A ID="pgfId-1044821"></A>
Assume that the following code snippet is executed as Ron who has the <Emphasis>
engineering</Emphasis>
 role. The code inserts a document with read and insert permissions for the <Emphasis>
engineering</Emphasis>
 role and update and read permissions for the <Emphasis>
engineering-manager</Emphasis>
 role. </Body>
<TableAnchor>
<A ID="pgfId-1044825"></A>
</TableAnchor>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<A ID="pgfId-1044824"></A>
...
xdmp:document-insert(&quot;/widget.com/engineering/features/2004-q1.xml&quot;, 
       &lt;new-features&gt;
         &lt;feature&gt; 
           &lt;name&gt;blue whistle&lt;/name&gt;
           &lt;assigned to&gt;Ron&lt;/assigned to&gt;
           ...
          &lt;/feature&gt;
         ...
       &lt;/new-features&gt;,
       (xdmp:permission(&quot;engineering&quot;, &quot;read&quot;), 
        xdmp:permission(&quot;engineering&quot;, &quot;insert&quot;),
        xdmp:permission(&quot;engineering-manager&quot;, &quot;read&quot;),
        xdmp:permission(&quot;engineering-manager&quot;, &quot;update&quot;)))
...</Code>
</CELL>
</ROW>
</TABLE>
<Body>
<A ID="pgfId-1044826"></A>
If you specify permissions explicitly to the function call, as shown above, those permissions override any default permission settings associated with the user (through user and role inheritance).</Body>
<Heading-3>
<A ID="pgfId-1044827"></A>
<A ID="99089"></A>
Default Permission Settings</Heading-3>
<Body>
<A ID="pgfId-1044828"></A>
If there is a set of permission requirements that meets the needs of most application scenarios, we recommend creating the appropriate default permission settings at the role or user level. This avoids having to explicitly create and set document permissions each time you call <code>
xdmp:load()</code>
 or <code>
xdmp:document-insert()</code>
. </Body>
<Body>
<A ID="pgfId-1045580"></A>
Default permission settings that apply to a user (either through a role or through the user definition) are also very important when loading documents via a WebDAV client (for example, dragging and dropping into a WebDAV folder). When you drag and drop files into a WebDAV folder, the permissions are automatically set based on the default permissions of the user in which the WebDAV client is logged in. For more information about WebDAV servers, see the <Emphasis>
Administrator's Guide</Emphasis>
.</Body>
<Body>
<A ID="pgfId-1044829"></A>
The screenshot below displays a portion of the Role configuration screen for the <Emphasis>
engineering</Emphasis>
 role. It shows insert and update capabilities being added to the <Emphasis>
engineering</Emphasis>
 role's default permissions. </Body>
<Body>
<A ID="pgfId-1044833"></A>
<IMAGE xml:link="simple" href="images/def_perm1.gif" show="embed" actuate="auto"/>
</Body>
<Body>
<A ID="pgfId-1044834"></A>
A user's set of default permissions is additive; it is the aggregate of the default permissions for all of the user's role(s) as well as for the user himself. Below is another screenshot of a portion of a User configuration screen for Ron. It shows read and update capabilities being added to the engineering-manager role as Ron's default permissions at the user level. </Body>
<Body>
<A ID="pgfId-1044838"></A>
<IMAGE xml:link="simple" href="images/def_perm2.gif" show="embed" actuate="auto"/>
</Body>
<Note>
<A ID="pgfId-1044839"></A>
Ron is of the engineering role and does not have the engineering-manager role. A user does not need to have a certain role in order to specify that role in its default permission set.</Note>
<Body>
<A ID="pgfId-1044840"></A>
You can also use a hybrid of the two methods described above. Assume that read and insert capabilities for the engineering role are specified as default permissions at the engineering role level as shown in the first screenshot. However, update and read capabilities are not specified for the engineering-manager at the user or engineering role level. </Body>
<Body>
<A ID="pgfId-1044841"></A>
Further assume that the following code snippet is executed by Ron. It will achieve the desired objective of giving the engineering-manager role read and update capabilities on the document, and the engineering role read and insert capabilities.</Body>
<TableAnchor>
<A ID="pgfId-1044845"></A>
</TableAnchor>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<A ID="pgfId-1044844"></A>
...
xdmp:document-insert(&quot;/widget.com/engineering/features/2004-q1.xml&quot;, 
       &lt;new-features&gt;
         &lt;feature&gt; 
           &lt;name&gt;blue whistle&lt;/name&gt;
           &lt;assigned to&gt;Ron&lt;/assigned to&gt;
           ...
          &lt;/feature&gt;
         ...
       &lt;/new-features&gt;,
        (xdmp:default-permissions(),
         xdmp:permission(&quot;engineering-manager&quot;, &quot;read&quot;)
         xdmp:permission(&quot;engineering-manager&quot;, &quot;update&quot;)))
...</Code>
</CELL>
</ROW>
</TABLE>
<Body>
<A ID="pgfId-1044846"></A>
<code>
xdmp:default-permissions()</code>
 returns Ron's default permissions (all at the role level in this example) of read and insert capabilities for the <Emphasis>
engineering</Emphasis>
 role. Read and update capabilities for the <Emphasis>
engineering-manager</Emphasis>
 role are then added explicitly as function parameters.</Body>
<Note>
<A ID="pgfId-1044847"></A>
<code>
xdmp:document-insert()</code>
 turns into an update (rather than a create) function if a document with the specified document URI already exists. Consequently, if Ron calls the <code>
xdmp:document-insert()</code>
 function the second time with the same document URI, the call will fail since Ron does not have update capability on the document.</Note>
<Body>
<A ID="pgfId-1044848"></A>
Suppose that Ian, of the <Emphasis>
engineering-manager</Emphasis>
 role, decides to give users of the sales role read permission on the document. (He wisely withholds update or insert capability or there will surely be an explosion of features!) The code snippet below shows how to add permissions to a document after it has been created.</Body>
<TableAnchor>
<A ID="pgfId-1044852"></A>
</TableAnchor>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<A ID="pgfId-1044851"></A>
...
xdmp:document-add-permissions(
  &quot;/widget.com/engineering/features/2004-q1.xml&quot;, 
  xdmp:permission(&quot;sales&quot;, &quot;read&quot;))
...</Code>
</CELL>
</ROW>
</TABLE>
<Body>
<A ID="pgfId-1044853"></A>
Update permission is needed to add permissions to a document. Therefore, the code snippet will only succeed if executed by Ian, or another user of the engineering-manager role. This prevents Ron from giving Emily, his buddy in sales, insert capability on the document.</Body>
<Note>
<A ID="pgfId-1044854"></A>
Changing default permissions for a role or a user does not affect the permissions associated with existing documents. To change permissions on existing documents, you need to use the permission update functions. See the MarkLogic Server built-in documentation for details.</Note>
<Body>
<A ID="pgfId-1035177"></A>
</Body>
</XML>
