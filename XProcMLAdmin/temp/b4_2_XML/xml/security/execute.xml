<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="execute.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1043743"></A>
<A ID="12789"></A>
Execute Privileges and Amps</Heading-1>
<pagenum>
<A ID="pgfId-1044421"></A>
29</pagenum>
<Body>
<A ID="pgfId-1043432"></A>
Execute privileges provide authorization control for executing XQuery functions. There are built-in execute privileges which provide access to certain protected functions such as <code>
xdmp:load</code>
, and you can create your own execute privileges to protect your own application code. You can also temporarily allow a user to have more authority than they possess with an amp. This chapter describes the following:</Body>
<Body-bullet>
<A ID="pgfId-1044119"></A>
<A href="execute.xml#id(56391)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Execute Privileges</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1044127"></A>
<A href="execute.xml#id(12043)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Amps</Hyperlink>
</A></Body-bullet>
<Heading-2>
<A ID="pgfId-1044082"></A>
<A ID="56391"></A>
Execute Privileges</Heading-2>
<Body>
<A ID="pgfId-1044132"></A>
If you want to protect the execution of an individual function in XQuery code, you can use <Emphasis>
execute privileges</Emphasis>
. Execute privileges require that a user must possess a specific privilege in order to run the protected code. </Body>
<Note>
<A ID="pgfId-1044142"></A>
Execute privileges operate at the function level; if you want to protect an entire XQuery document that is stored in a modules database, you can use execute permissions. For details on execute permissions, see <A href="permissions.xml#id(20759)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Permissions on Documents' on page&#160;19</A>.</Note>
<Body>
<A ID="pgfId-1051931"></A>
This section describes aspects of execute privileges and includes the following parts:</Body>
<Body-bullet>
<A ID="pgfId-1051935"></A>
<A href="execute.xml#id(95716)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Using Execute Privileges</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1051946"></A>
<A href="execute.xml#id(25693)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Execute Privileges and HTTP, WebDAV, and XDBC Servers</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1051947"></A>
<A href="execute.xml#id(15971)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Execute Privileges When Creating and Updating Collections</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1051927"></A>
<A ID="95716"></A>
Using Execute Privileges</Heading-3>
<Body>
<A ID="pgfId-1044152"></A>
The following are the basic steps in using execute privileges:</Body>
<Body-bullet>
<A ID="pgfId-1044153"></A>
Create the privilege.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1044158"></A>
Assign the privilege to a role.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1044159"></A>
Write code to test for the privilege.</Body-bullet>
<Body>
<A ID="pgfId-1044253"></A>
You create privileges and assign them to roles using the Admin interface. You use the built-in function <code>
xdmp:security-assert</code>
 in your XQuery code to test for a privilege. Adding the security assert to XQuery code causes the system to test if the user running the code has the specified privilege. If the user possesses the privilege, then the code continues to execute. If the user does not possess the privilege, then the server throws an exception (which the application developer can catch and handle, if desired).</Body>
<Body>
<A ID="pgfId-1044536"></A>
For example, if you want to create an execute privilege to control the access to an XQuery function called <code>
display-salary</code>
, you can use the Admin Interface to create an execute privilege called <code>
allow-display-salary</code>
 and give the execute privilege any URI (for example, <code>
http://my/privs/allow-display-salary</code>
). Then you assign a role to the privilege. Finally, in your <code>
display-salary</code>
 XQuery function, include an <code>
xdmp:security-assert</code>
 call to test for the <code>
allow-display-salary</code>
 execute privilege as follows:</Body>
<Code>
<A ID="pgfId-1044571"></A>
xquery version &quot;1.0-ml&quot;;
<code>
declare function display-salary (
&#160;&#160;&#160;&#160;&#160;$employee-id as xs:unsignedLong) 
as xs:decimal
{
xdmp:security-assert(&quot;allow-display-salary&quot;, &quot;execute&quot;), 
...
} ;</code>
</Code>
<Heading-3>
<A ID="pgfId-1044255"></A>
<A ID="25693"></A>
Execute Privileges and HTTP, WebDAV, and XDBC Servers</Heading-3>
<Body>
<A ID="pgfId-1044263"></A>
You can also use an execute privilege to control access to an HTTP, WebDAV, or XDBC server. In the Admin interface, there is a Privilege drop list on the server administration page. From there, you can specify a privilege required for server access. Any users that access the server must then possess the specified privilege. If a user tries to access an application on the server and does not possess the specified privilege, an exception is thrown. For an example of using this technique to control server access, see <A href="security_db.xml#id(87889)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Example: Using the Security Database in Different Servers' on page&#160;35</A>.</Body>
<Heading-3>
<A ID="pgfId-1044262"></A>
<A ID="15971"></A>
Execute Privileges When Creating and Updating Collections</Heading-3>
<Body>
<A ID="pgfId-1051959"></A>
If you create or update a document and add it to a collection, an execute permission is required. If the collection is a protected collection (that is, a collection that is created using the Admin&#160;Interface), then you either need permissions to update that collection or the <code>
any-collection</code>
 execute privilege. If the collection is an unprotected collection, then you need the <code>
unprotected-collections</code>
 execute privilege. For details on adding collections while creating a document, see the documentation for <code>
xdmp:document-load</code>
, <code>
xdmp:document-insert</code>
, and <code>
xdmp:document-add-collections</code>
 in the <Emphasis>
MarkLogic XQuery and XSLT Function Reference</Emphasis>
.</Body>
<Heading-2>
<A ID="pgfId-1051955"></A>
<A ID="12043"></A>
Amps</Heading-2>
<Body>
<A ID="pgfId-1044256"></A>
<Emphasis>
Amps</Emphasis>
 are security objects that temporarily grant roles to unprivileged users. An amp grants the roles only for the execution of a given function. While executing an 'amped' function, the user temporarily is part of the amped role, which in turn temporarily grant the user the additional privileges and permissions given by the roles configured in the amp. </Body>
<Body>
<A ID="pgfId-1044208"></A>
Amps allow you to grant users additional privileges and permissions at a very granular level--executing a certain function. Assigning the user these additional roles permanently could compromise the security of the system. Amps enable you to limit the effect of the additional roles (privileges and permissions) to a specific function. </Body>
<Body>
<A ID="pgfId-1044225"></A>
For example, a user may need a count of all the documents in the database in order to create a report. However, the user does not have read permissions on all the documents in the database. Therefore, queries run by the user will not 'see' all the documents in the database. You can use an amp for the <code>
document-count()</code>
 function to elevate the user to an <code>
admin</code>
 role (or to a role that has read permissions for all documents) temporarily while the user is executing the function to count the documents in the system. </Body>
<Body>
<A ID="pgfId-1044173"></A>
You use the Admin interface to create amps. Amps are specific to a single function, which you specify by URI and local name when creating the amp. You can only amp a function that resides in the Modules directory (<code>
&lt;install_dir&gt;/Modules</code>
) or in the Modules database for the server in which the function is executed; you cannot amp functions in any other XQuery module (for example, you cannot amp a function in a module installed under the filesystem root of an HTTP server). The reason that functions must reside in the Modules database or in the Modules directory is because these locations are trusted; allowing amped functions from under a server root or from functions submitted by a client can compromise security. For details on creating amps, see the 'Security Administration' chapter of the <Emphasis>
Administrator's Guide</Emphasis>
.</Body>
<Body>
<A ID="pgfId-1035177"></A>
For an example that uses an amp, see <A href="recipes.xml#id(83586)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Access Control Based on Client IP Address' on page&#160;43</A>.</Body>
</XML>
