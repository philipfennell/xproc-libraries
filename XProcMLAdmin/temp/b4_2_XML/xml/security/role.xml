<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="role.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1043743"></A>
<A ID="78081"></A>
Roles and the Role-Based Security Model</Heading-1>
<pagenum>
<A ID="pgfId-1046226"></A>
17</pagenum>
<Body>
<A ID="pgfId-1043432"></A>
MarkLogic Server uses a role-based security model. Each security entity is associated with a role. This chapter describes the components of the role-based security model and includes the following sections:</Body>
<Body-bullet>
<A ID="pgfId-1044077"></A>
<A href="role.xml#id(35955)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Understanding Roles</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1046146"></A>
<A href="role.xml#id(31693)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
The admin and security Roles</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1044095"></A>
<A href="role.xml#id(74515)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Example--Introducing Roles, Users and Execute Privileges</Hyperlink>
</A></Body-bullet>
<Heading-2>
<A ID="pgfId-1043434"></A>
<A ID="35955"></A>
Understanding Roles</Heading-2>
<Body>
<A ID="pgfId-1044100"></A>
As described in <A href="intro.xml#id(29542)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Role-Based Security Model (Authorization)' on page&#160;7</A>, roles are the central point of authorization in MarkLogic Server. This section describes how the other security entities relate to roles, and includes the following sections:</Body>
<Body-bullet>
<A ID="pgfId-1044222"></A>
<A href="role.xml#id(74667)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Assigning Privileges to Roles</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1045975"></A>
<A href="role.xml#id(28904)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Associating Permissions With Roles</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1045979"></A>
<A href="role.xml#id(92521)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Default Permissions in Roles</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1046065"></A>
<A href="role.xml#id(60442)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Assigning Users to Roles</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1045988"></A>
<A href="role.xml#id(93712)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Roles, Privileges, Document Permissions, and Users</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1044043"></A>
<A ID="74667"></A>
Assigning Privileges to Roles</Heading-3>
<Body>
<A ID="pgfId-1044107"></A>
Privileges are used to control access to XQuery code (execute privileges) or to control access to creating documents in a given URI range (URI privileges). You associate roles with privileges by assigning privileges to roles.</Body>
<Heading-4>
<A ID="pgfId-1044108"></A>
Execute Privileges</Heading-4>
<Body>
<A ID="pgfId-1044112"></A>
Execute privileges allow developers to control authorization for the execution of an XQuery function. You can add code to any user-defined XQuery function to check if the user executing the code has a certain privilege. That privilege is assigned to a user through a role. Also, there are many execute privileges predefined in the security database to control authorization to execute a variety of built-in XQuery functions.</Body>
<Body>
<A ID="pgfId-1044120"></A>
For more details on execute privileges, see <A href="execute.xml#id(12789)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Execute Privileges and Amps' on page&#160;27</A>.</Body>
<Heading-4>
<A ID="pgfId-1044114"></A>
URI Privileges</Heading-4>
<Body>
<A ID="pgfId-1044115"></A>
URI privileges control authorization for creation of a document with a given URI prefix. In order to create a document with a prefix that has a URI privilege associated with it, a user must be part of a role to which the needed URI privilege is assigned.</Body>
<Body>
<A ID="pgfId-1044124"></A>
For more details on how URI privileges interact with document creation, see <A href="permissions.xml#id(47015)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'URI Privileges and Permissions on Documents' on page&#160;18</A>.</Body>
<Heading-3>
<A ID="pgfId-1044066"></A>
<A ID="28904"></A>
Associating Permissions With Roles</Heading-3>
<Body>
<A ID="pgfId-1044128"></A>
Permissions are characteristics of documents that associate a role with a capability (<code>
read</code>
, <code>
insert</code>
, <code>
update</code>
, or <code>
execute</code>
). Users gain the authority to perform these capabilities on a document if they are part of a role to which a permission is associated.</Body>
<Body>
<A ID="pgfId-1044132"></A>
For more details on how permissions interact with documents, see <A href="permissions.xml#id(20759)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Permissions on Documents' on page&#160;19</A>.</Body>
<Heading-3>
<A ID="pgfId-1044048"></A>
<A ID="92521"></A>
Default Permissions in Roles</Heading-3>
<Body>
<A ID="pgfId-1046132"></A>
Roles are one of the places where you specify <Emphasis>
default permissions</Emphasis>
. Default permissions are used when creating documents. They are a set of initial permissions that are applied to a document at the time the document is created (if specific permissions are not explicitly specified). The system determines the default permissions for a user based on the roles the user is part of, calculating the total set of default permissions from all inherited roles. </Body>
<Body>
<A ID="pgfId-1044146"></A>
For more details on how default permissions interact with document creation, see <A href="permissions.xml#id(40216)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Default Permissions' on page&#160;22</A>.</Body>
<Heading-3>
<A ID="pgfId-1046055"></A>
<A ID="60442"></A>
Assigning Users to Roles</Heading-3>
<Body>
<A ID="pgfId-1046056"></A>
When accessing a database, users are authenticated against the security database associated with that database. Roles are the mechanism from which authorization entities (privileges, permissions, default permissions) are carried to code and documents. You assign a user to roles, and the roles provide that user with the authority to perform actions against code and documents. The roles provide the user with a set of privileges and permissions. At any given time, a user <Emphasis>
possesses</Emphasis>
 this set of privileges and permissions; this authorization set is the sum of all of the privileges and permissions inherited from all of the roles to which that user is currently assigned. Use the Admin interface to display the set of privileges and permissions for a given user; do not try and calculate it yourself as it can get easily get fairly complex when a system has many roles.</Body>
<Body>
<A ID="pgfId-1046068"></A>
For more details on users, see <A href="authentication.xml#id(63031)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Users and Authentication' on page&#160;30</A>.</Body>
<Heading-3>
<A ID="pgfId-1044226"></A>
<A ID="93712"></A>
Roles, Privileges, Document Permissions, and Users</Heading-3>
<Body>
<A ID="pgfId-1044230"></A>
Privileges, document permissions, and users all interact with roles to define your security policies. The following diagram shows an example of how these entities interact.</Body>
<Body>
<A ID="pgfId-1044260"></A>
<IMAGE xml:link="simple" href="role-1.gif" show="embed" actuate="auto"/>
</Body>
<Body>
<A ID="pgfId-1044231"></A>
Notice how all of the arrows point into the roles; that is because the roles are the center of all security administration in MarkLogic Server. In this diagram, the user is part of <Emphasis>
Role2</Emphasis>
, and <Emphasis>
Role2</Emphasis>
 inherits <Emphasis>
Role3</Emphasis>
. Therefore, even though the user has only been assigned <Emphasis>
Role2</Emphasis>
, she possesses all of the privileges and permissions from both <Emphasis>
Role2</Emphasis>
 and <Emphasis>
Role3</Emphasis>
. Following the arrows pointing into <Emphasis>
Role2</Emphasis>
 and <Emphasis>
Role3</Emphasis>
, the user possesses <Emphasis>
Priv1</Emphasis>
, <Emphasis>
Priv2</Emphasis>
, and <code>
insert</code>
 and <code>
read</code>
 permissions on <Emphasis>
Document1</Emphasis>
.</Body>
<Body>
<A ID="pgfId-1046079"></A>
Because the user possesses <Emphasis>
Priv1</Emphasis>
 (based on role inheritance), she will be able to execute code protected with a <code>
xdmp:security-assert(&quot;Priv1&quot;, &quot;execute&quot;)</code>
 call; users who do not have the <Emphasis>
Priv1</Emphasis>
 privilege will not be able to execute such code.</Body>
<Heading-2>
<A ID="pgfId-1044169"></A>
<A ID="31693"></A>
The admin and security Roles</Heading-2>
<Body>
<A ID="pgfId-1046148"></A>
MarkLogic Server has a special role named <code>
admin</code>
. The <code>
admin</code>
 role has full authority to do everything in MarkLogic Server, regardless of any permissions or privileges set. In general, the <code>
admin</code>
 role is only for administrative activities and should not be used to load data and run applications. Use extreme caution when assigning users the <code>
admin</code>
 role, because it gives them the authority to perform any activity on the system, included adding or deleting users, adding or deleting documents, changing passwords, and so on.</Body>
<Body>
<A ID="pgfId-1046420"></A>
MarkLogic Server also has a built-in role named <code>
security</code>
. Users who are part of the <code>
security</code>
 role have execute privileges to perform security-related tasks on the system using the functions in the <code>
security.xqy</code>
 module file. </Body>
<Note>
<A ID="pgfId-1046442"></A>
The <code>
security</code>
 role does not have enough privileges to allow access to the Admin interface; to access the Admin interface, a user must have the <code>
admin</code>
 role. The <code>
security</code>
 role does provide the privileges to execute functions in the <code>
security.xqy</code>
 module file, which has functions to perform actions such as creating users, creating roles, and so on.</Note>
<Heading-2>
<A ID="pgfId-1046147"></A>
<A ID="74515"></A>
Example--Introducing Roles, Users and Execute Privileges</Heading-2>
<Body>
<A ID="pgfId-1044170"></A>
Consider a simple system with two roles - <Emphasis>
engineering</Emphasis>
 and <Emphasis>
sales</Emphasis>
. The <Emphasis>
engineering</Emphasis>
 role is responsible for making widgets and has privileges needed to perform activities related to making widgets. The <Emphasis>
sales</Emphasis>
 role is responsible for selling widgets and has privileges to perform activities related to selling widgets.</Body>
<Body>
<A ID="pgfId-1044171"></A>
To begin, create two roles in MarkLogic Server named engineering and sales respectively. </Body>
<Body>
<A ID="pgfId-1044172"></A>
The <Emphasis>
engineering</Emphasis>
 role needs to be able to make widgets. You can create an execute privilege with the name <Emphasis>
make-widget</Emphasis>
, and action URI <Emphasis>
http://widget.com/make-widget</Emphasis>
 to represent that privilege. The <Emphasis>
sales</Emphasis>
 role needs to sell widgets so you create an execute privilege with the name <Emphasis>
sell-widget</Emphasis>
 and action URI <Emphasis>
http://widget.com/sell-widget</Emphasis>
 to represent that privilege. </Body>
<Note>
<A ID="pgfId-1044173"></A>
Names for execute privileges are used only as display identifiers in the Admin interface. The action URIs are used within XQuery code to identify the privilege. </Note>
<Body>
<A ID="pgfId-1044174"></A>
Ron is an engineer in your company so you create a user for Ron and assign the <Emphasis>
engineering</Emphasis>
 role to the newly created user. Emily is an account representative so you create a user for Emily and assign her the sales role.</Body>
<Body>
<A ID="pgfId-1044175"></A>
In your XQuery code, use <code>
xdmp:security-assert(&lt;action-uri&gt;, &lt;privilege-type&gt;)</code>
 to ensure that only engineers make widgets and only account representatives sell widgets.   For example:</Body>
<TableAnchor>
<A ID="pgfId-1044179"></A>
</TableAnchor>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<A ID="pgfId-1044178"></A>
xquery version &quot;0.9-ml&quot;
define function make-widget(...) as ...
{
  xdmp:security-assert(&quot;http://widget.com/make-widget&quot;,
     &quot;execute&quot;), make widget...}</Code>
</CELL>
</ROW>
</TABLE>
<Body>
<A ID="pgfId-1044180"></A>
If Ron is logged into the application and executes the <code>
make-widget()</code>
 function, <code>
xdmp:security-assert(&quot;http://widget.com/make-widget&quot;, &quot;execute&quot;)</code>
 succeeds since Ron is of the engineering role which has the execute privilege to make widgets. </Body>
<Body>
<A ID="pgfId-1044181"></A>
If Emily attempts to execute the <code>
make-widget()</code>
 function, <code>
xdmp:security-assert(&quot;http://widget.com/make-widget&quot;, &quot;execute&quot;)</code>
 throws an exception. You can catch the exception and handle it with a <code>
try/catch</code>
 in the code. If the exception is not caught, the transaction that called this function is rolled back.</Body>
<Body>
<A ID="pgfId-1044182"></A>
Some functions are common to several protected actions. You can protect such a function with a single <code>
xdmp:security-assert()</code>
 call by providing the appropriate action URIs in a list. For example, if a user needs to execute the <code>
count-widgets()</code>
 function when making or selling widgets, you might protect the function as follows:</Body>
<TableAnchor>
<A ID="pgfId-1044186"></A>
</TableAnchor>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<A ID="pgfId-1044185"></A>
xquery version &quot;0.9-ml&quot;
define function count-widgets(...) as ...
{
  xdmp:security-assert( (&quot;http://widget.com/make-widget&quot;, 
            &quot;http://widget.com/sell-widget&quot;), &quot;execute&quot;),
  count-widget...
} </Code>
</CELL>
</ROW>
</TABLE>
<Body>
<A ID="pgfId-1044187"></A>
If there is a function that requires more than one privilege before it can be performed, place the <code>
xdmp:security-assert()</code>
 calls sequentially. For example, if you need to be a manager in the sales department to give discounts when selling the widgets, you can protect the function as follows:</Body>
<TableAnchor>
<A ID="pgfId-1044191"></A>
</TableAnchor>
<TABLE>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Code>
<A ID="pgfId-1044190"></A>
xquery version &quot;0.9-ml&quot;
define function discount-widget(...) as ...
{
  xdmp:security-assert( &quot;http://widget.com/sell-widget&quot;,
    &quot;execute&quot;),
  xdmp:security-assert( &quot;http://widget.com/change-price&quot;,
    &quot;execute&quot;),
  discount widget...
}</Code>
</CELL>
</ROW>
</TABLE>
<Body>
<A ID="pgfId-1044192"></A>
where <code>
http://widget.com/change-price</code>
 is an action URI for a <Emphasis>
change-price</Emphasis>
 execute privilege assigned to the <Emphasis>
manager</Emphasis>
 role. A user needs to have the <Emphasis>
sales</Emphasis>
 role and the <Emphasis>
manager</Emphasis>
 role, which provides the user with the sell<Emphasis>
-widget</Emphasis>
 and <Emphasis>
change-price</Emphasis>
 execute privileges, to be able to execute this function.</Body>
<Body>
<A ID="pgfId-1044154"></A>
</Body>
</XML>
