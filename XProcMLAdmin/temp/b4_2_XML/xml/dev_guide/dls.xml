<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="dls.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1053802"></A>
<A ID="22516"></A>
Library Services Applications</Heading-1>
<pagenum>
<A ID="pgfId-1053806"></A>
85</pagenum>
<Body>
<A ID="pgfId-1072987"></A>
This chapter describes how to use Library Services, which enable you to create and manage versioned content in MarkLogic Server in a manner similar to a Content Management System (CMS). This chapter includes the following sections:</Body>
<Body-bullet>
<A ID="pgfId-1053734"></A>
<A href="dls.xml#id(97856)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Understanding Library Services</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1080377"></A>
<A href="dls.xml#id(27453)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Building Applications with Library Services</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1080521"></A>
<A href="dls.xml#id(48902)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Required Range Element Indexes</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1054928"></A>
<A href="dls.xml#id(66522)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Library Services API</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1072592"></A>
<A href="dls.xml#id(95309)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Security Considerations of Library Services Applications</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1053738"></A>
<A href="dls.xml#id(81198)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Transactions and Library Services</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1081108"></A>
<A href="dls.xml#id(90910)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Putting Documents Under Managed Version Control</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1054047"></A>
<A href="dls.xml#id(56448)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Checking Out Managed Documents</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1075063"></A>
<A href="dls.xml#id(25057)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Checking In Managed Documents</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059682"></A>
<A href="dls.xml#id(87706)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Updating Managed Documents</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077006"></A>
<A href="dls.xml#id(91470)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Defining a Retention Policy</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059687"></A>
<A href="dls.xml#id(16641)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Managing Modular Documents in Library Services</Hyperlink>
</A><A href="dls.xml#id(94391)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"></A></Body-bullet>
<Heading-2>
<A ID="pgfId-1062997"></A>
<A ID="97856"></A>
Understanding Library Services</Heading-2>
<Body>
<A ID="pgfId-1081764"></A>
The Library Services enable you to create and maintain versions of managed documents in MarkLogic Server. Access to managed documents is controlled using a check-out/check-in model. You must first check out a managed document before you can perform any update operations on the document. A checked out document can only be updated by the user who checked it out; another user cannot update the document until it is checked back in and then checked out by the other user. </Body>
<Note>
<A ID="pgfId-1081831"></A>
Documents must be stored in a database to be versioned. If a document is created by a CPF application, such as entity enrichment, modular documents, conversion, or a custom CPF application, then the document will only be versioned if the CPF application uses Library Services to insert it into the database. By default, the CPF applications supplied by MarkLogic do not create managed documents.</Note>
<Body>
<A ID="pgfId-1081769"></A>
When you initially put a document under Library Services management, it creates Version 1 of the document. Each time you update the document, a new version of the document is created. Old versions of the updated document are retained according to your retention policy, as described in <A href="dls.xml#id(91470)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Defining a Retention Policy' on page&#160;73</A>.</Body>
<Body>
<A ID="pgfId-1062233"></A>
The Library Services include functions for managing modular documents so that various versions of linked documents can be created and managed, as described in <A href="dls.xml#id(16641)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Managing Modular Documents in Library Services' on page&#160;80</A>.</Body>
<Body>
<A ID="pgfId-1075827"></A>
The following diagram illustrates the workflow of a typical managed document. In this example, the document is added to the database and placed under Library Services management. The managed document is checked out, updated several times, and checked in by Jerry. Once the document is checked in, Elaine checks out, updates, and checks in the same managed document. Each time the document is updated, the previous versions of the document are purged according to the retention policy.</Body>
<Body-indent>
<A ID="pgfId-1080157"></A>
<IMAGE xml:link="simple" href="dls-1.gif" show="embed" actuate="auto"/>
</Body-indent>
<Heading-2>
<A ID="pgfId-1080382"></A>
<A ID="27453"></A>
Building Applications with Library Services</Heading-2>
<Body>
<A ID="pgfId-1080322"></A>
The Library Services API provides the basic tools for implementing applications that store and extract specific drafts of a document as of a particular date or version. You can also use the Library Services API, along with the other MarkLogic Server APIs, to provide structured workflow, version control, and the ability to partition a document into individually managed components. The security API provides the ability to associate user roles and responsibilities with different document types and collections. And the search APIs provide the ability to implement powerful content retrieval features.</Body>
<Heading-2>
<A ID="pgfId-1080491"></A>
<A ID="48902"></A>
Required Range Element Indexes</Heading-2>
<Body>
<A ID="pgfId-1080514"></A>
The range element indexes shown in the table and figure below must be set for the database that contains the documents managed by the Library Services. These indexes are automatically set for you when you create a new database. However, if you want to enable the Library Services for a database created in an earlier release of MarkLogic Server, you must manually set them for the database.</Body>
<TABLE>
<ROW>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1080700"></A>
Scalar Type</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1080702"></A>
Namespace URI</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1080704"></A>
Localname</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1080706"></A>
Range value position</CellHeading>
</TH>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1080708"></A>
dateTime</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1080710"></A>
http://marklogic.com/xdmp/dls</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1080712"></A>
created</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1080714"></A>
false</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1080716"></A>
unsignedLong</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1080718"></A>
http://marklogic.com/xdmp/dls</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1080720"></A>
version-id</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1080722"></A>
false</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
<A ID="pgfId-1080560"></A>
<IMAGE xml:link="simple" href="images/DLSrangeindexes.gif" show="embed" actuate="auto"/>
</Body>
<Heading-2>
<A ID="pgfId-1080324"></A>
<A ID="66522"></A>
Library Services API</Heading-2>
<Body>
<A ID="pgfId-1077300"></A>
This section describes the Library Services API and contains the following sections:</Body>
<Body-bullet>
<A ID="pgfId-1077323"></A>
<A href="dls.xml#id(57049)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Library Services API Categories</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077339"></A>
<A href="dls.xml#id(82404)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Managed Document Update Wrapper Functions</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1080172"></A>
<A ID="57049"></A>
Library Services API Categories</Heading-3>
<Body>
<A ID="pgfId-1080175"></A>
The Library Services functions are described in the <Emphasis>
MarkLogic XQuery and XSLT Function Reference</Emphasis>
. The Library Services functions fall into the following categories:</Body>
<Body-bullet>
<A ID="pgfId-1061825"></A>
Document management functions for putting documents under version management, checking documents in and out of version management, and so on. For usage information, see <A href="dls.xml#id(90910)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Putting Documents Under Managed Version Control' on page&#160;70</A>, <A href="dls.xml#id(56448)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Checking Out Managed Documents' on page&#160;71</A> and <A href="dls.xml#id(25057)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Checking In Managed Documents' on page&#160;72</A>.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1061826"></A>
Document update functions for updating the content of documents and their properties. For usage information, see <A href="dls.xml#id(87706)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Updating Managed Documents' on page&#160;72</A> and <A href="dls.xml#id(82404)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Managed Document Update Wrapper Functions' on page&#160;68</A>.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1061827"></A>
Retention policy functions for managing when particular document versions are purged. For usage information, see <A href="dls.xml#id(91470)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Defining a Retention Policy' on page&#160;73</A>.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1061828"></A>
XInclude functions for creating and managing linked documents. For usage information, see <A href="dls.xml#id(16641)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Managing Modular Documents in Library Services' on page&#160;80</A>.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1079006"></A>
<code>
cts:query</code>
 constructor functions for use by <code>
cts:search</code>
, Library Services XInclude functions,<code>
 </code>
and when defining retention rules. For usage information, see <A href="dls.xml#id(91470)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Defining a Retention Policy' on page&#160;73</A>.</Body-bullet>
<Heading-3>
<A ID="pgfId-1074245"></A>
<A ID="82404"></A>
Managed Document Update Wrapper Functions</Heading-3>
<Body>
<A ID="pgfId-1080182"></A>
All update and delete operations on managed documents must be done through the Library Services API. The Library Services API includes the following 'wrapper' functions that enable you to make the same updates on managed documents as you would on non-managed document using their XDMP counterparts:</Body>
<Body-bullet>
<A ID="pgfId-1074247"></A>
<code>
dls:document-add-collections</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1077364"></A>
<code>
dls:document-add-permissions</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1077365"></A>
<code>
dls:document-add-properties</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1077366"></A>
<code>
dls:document-set-collections</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1074251"></A>
<code>
dls:document-set-permissions</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1074252"></A>
<code>
dls:document-set-properties</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1074253"></A>
<code>
dls:document-remove-properties</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1074254"></A>
<code>
dls:document-remove-permissions</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1074255"></A>
<code>
dls:document-remove-collections</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1074256"></A>
<code>
dls:document-set-property</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1074257"></A>
<code>
dls:document-set-quality</code>
</Body-bullet>
<Heading-2>
<A ID="pgfId-1061683"></A>
<A ID="95309"></A>
Security Considerations of Library Services Applications</Heading-2>
<Body>
<A ID="pgfId-1061703"></A>
There are two pre-defined roles designed for use in Library Services applications, as well as an internal role that the Library Services API uses:</Body>
<Body-bullet>
<A ID="pgfId-1061704"></A>
<A href="dls.xml#id(42735)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
dls-admin Role</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1061705"></A>
<A href="dls.xml#id(59173)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
dls-user Role</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1061706"></A>
<A href="dls.xml#id(79944)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
dls-internal Role</Hyperlink>
</A></Body-bullet>
<Note>
<A ID="pgfId-1081222"></A>
Do not log in with the Admin role when inserting managed documents into the database or when testing your Library Services applications. Instead create test users with the <code>
dls-user</code>
 role and assign them the various permissions needed to access the managed documents. When testing your code in CQ, you must also assign your test users the <code>
cq-basic</code>
 role, as described in <A href="../gs/XQueryTutorial.xml#id(22489)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Using CQ</Hyperlink>
</A> in the <Emphasis>
Getting Started with MarkLogic Server</Emphasis>
 guide.</Note>
<Heading-3>
<A ID="pgfId-1062426"></A>
<A ID="42735"></A>
dls-admin Role</Heading-3>
<Body>
<A ID="pgfId-1062427"></A>
The <code>
dls-admin</code>
 role is designed to give administrators of Library Services applications all of the privileges that are needed to use the Library Services API. It has the needed privileges to perform operations such as inserting retention policies and breaking checkouts, so only trusted users (users who are assumed to be non-hostile, appropriately trained, and follow proper administrative procedures) should be granted the <code>
dls-admin</code>
 role. Assign the <code>
dls-admin</code>
 role to administrators of your Library Services application.</Body>
<Heading-3>
<A ID="pgfId-1061709"></A>
<A ID="59173"></A>
dls-user Role</Heading-3>
<Body>
<A ID="pgfId-1061710"></A>
The <code>
dls-user</code>
 role is a minimally privileged role. It is used in the Library Services API to allow regular users of the Library Services application (as opposed to <code>
dls-admin</code>
 users) to be able to execute code in the Library Services API. It allows users, with document update permission, to manage, checkout, and checkin managed documents. </Body>
<Body>
<A ID="pgfId-1061711"></A>
The <code>
dls-user</code>
 role only has privileges that are needed to run the Library Services API; it does not provide execute privileges to any functions outside the scope of the Library Services API. The Library Services API uses the <code>
dls-user</code>
 role as a mechanism to amp more privileged operations in a controlled way. It is therefore reasonably safe to assign this role to any user whom you trust to use your Library Services application. Assign the <code>
dls-user</code>
 role to all users of your Library Services application.</Body>
<Heading-3>
<A ID="pgfId-1061712"></A>
<A ID="79944"></A>
dls-internal Role</Heading-3>
<Body>
<A ID="pgfId-1081101"></A>
The <code>
dls-internal</code>
 role is a role that is used internally by the Library Services API, but you should not explicitly grant it to any user or role. This role is used to amp special privileges within the context of certain functions of the Library Services API. Assigning this role to users would give them privileges on the system that you typically do not want them to have; do not assign this role to any users.</Body>
<Heading-2>
<A ID="pgfId-1081102"></A>
<A ID="81198"></A>
Transactions and Library Services</Heading-2>
<Body>
<A ID="pgfId-1081103"></A>
The <code>
dls:document-checkout</code>
, <code>
dls:document-update</code>
, and <code>
dls:document-checkin </code>
functions must be executed in separate transactions. If you want to complete a checkout, update, and checkin in a single transaction, use the <code>
dls:document-checkout-update-checkin</code>
 function.</Body>
<Heading-2>
<A ID="pgfId-1081098"></A>
<A ID="90910"></A>
<A ID="47303"></A>
Putting Documents Under Managed Version Control</Heading-2>
<Body>
<A ID="pgfId-1061400"></A>
In order to put a document under managed version control, it must be in your content database. Once the document is in the database, users assigned the <code>
dls-user</code>
 role can use the <code>
dls:document-manage</code>
 function to place the document under management. Alternatively, you can use the <code>
dls:document-insert-and-manage</code>
 function to both insert a document into the database and place it under management.</Body>
<Body>
<A ID="pgfId-1081287"></A>
When inserting a managed document, you should specify at least read and update permissions to the roles assigned to the users that are to manage the document. If no permissions are supplied, the default permissions of the user inserting the managed document are applied. The default permissions can be obtained by calling the <code>
xdmp:default-permissions</code>
 function. When adding a collection to a document, as shown in the example below, the user will also need the <code>
unprotected-collections</code>
 privilege.</Body>
<Body>
<A ID="pgfId-1061875"></A>
For example, the following query inserts a new document into the database and places it under Library Services management. This document can only be read or updated by users assigned the <code>
writer</code>
 and/or <code>
editor</code>
 role and have permission to read and update the <code>
http://marklogic.com/engineering/specs</code>
 collection.</Body>
<Code>
<A ID="pgfId-1062060"></A>
(: Insert a new managed document into the database. :)
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1062040"></A>
import module namespace dls = &quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1079298"></A>
dls:document-insert-and-manage(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;/engineering/beta_overview.xml&quot;,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn:true(),
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;TITLE&gt;Project Beta Overview&lt;/TITLE&gt;,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;Manage beta_overview.xml&quot;,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(xdmp:permission(&quot;writer&quot;, &quot;read&quot;),
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; xdmp:permission(&quot;writer&quot;, &quot;update&quot;), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; xdmp:permission(&quot;editor&quot;, &quot;read&quot;),
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; xdmp:permission(&quot;editor&quot;, &quot;update&quot;)),
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&quot;http://marklogic.com/engineering/specs&quot;))</Code>
<Heading-2>
<A ID="pgfId-1061429"></A>
<A ID="56448"></A>
Checking Out Managed Documents</Heading-2>
<Body>
<A ID="pgfId-1081091"></A>
You must first use the <code>
dls:document-checkout</code>
 function to check out a managed document before performing any update operations. For example, to check out the <code>
beta_overview.xml</code>
 document, along with all of its linked documents, specify the following:</Body>
<Code>
<A ID="pgfId-1063165"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1063166"></A>
import module namespace dls = &quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1063147"></A>
dls:document-checkout(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;/engineering/beta_overview.xml&quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn:true(), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;Updating doc&quot;)</Code>
<Body>
<A ID="pgfId-1063408"></A>
You can specify an optional <code>
timeout</code>
 parameter to <code>
dls:document-checkout </code>
that specifies how long (in seconds) to keep the document checked out. For example, to check out the <code>
beta_overview.xml</code>
 document for one hour, specify the following:</Body>
<Code>
<A ID="pgfId-1072227"></A>
dls:document-checkout(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;/engineering/beta_overview.xml&quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn:true(), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;Updating doc&quot;,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3600)</Code>
<Heading-3>
<A ID="pgfId-1075030"></A>
<A ID="31989"></A>
<A ID="73675"></A>
Displaying the Checkout Status of Managed Documents</Heading-3>
<Body>
<A ID="pgfId-1063131"></A>
You can use the <code>
dls:document-checkout-status</code>
 function to report the status of a checked out document. For example:</Body>
<Code>
<A ID="pgfId-1063243"></A>
dls:document-checkout-status(&quot;/engineering/beta_overview.xml&quot;)</Code>
<Body>
<A ID="pgfId-1063398"></A>
Returns output similar to:</Body>
<Code>
<A ID="pgfId-1070003"></A>
&lt;dls:checkout xmlns:dls=&quot;http://marklogic.com/xdmp/dls&quot;&gt;
&#160;&#160;&lt;dls:document-uri&gt;/engineering/beta_overview.xml&lt;/dls:document-uri&gt;
&#160;&#160;&lt;dls:annotation&gt;Updating doc&lt;/dls:annotation&gt;
&#160;&#160;&lt;dls:timeout&gt;0&lt;/dls:timeout&gt;
&#160;&#160;&lt;dls:timestamp&gt;1240528210&lt;/dls:timestamp&gt;
&#160;&#160;&lt;sec:user-id xmlns:sec=&quot;http://marklogic.com/xdmp/security&quot;&gt;
&#160;&#160;&#160;&#160;10677693687367813363
&#160;&#160;&lt;/sec:user-id&gt;
&lt;/dls:checkout&gt;</Code>
<Heading-3>
<A ID="pgfId-1075045"></A>
<A ID="19085"></A>
Breaking the Checkout of Managed Documents</Heading-3>
<Body>
<A ID="pgfId-1063220"></A>
Users with <code>
dls-admin</code>
 role can call <code>
dls:break-checkout</code>
 to 'un-checkout' documents. For example, if a document was checked out by a user who has since moved on to other projects, the Administrator can break the existing checkout of the document so that other users can check it out.</Body>
<Heading-2>
<A ID="pgfId-1075142"></A>
<A ID="25057"></A>
Checking In Managed Documents</Heading-2>
<Body>
<A ID="pgfId-1075143"></A>
Once you have finished updating the document, use the <code>
dls:document-checkin</code>
 function to check it, along with all of its linked documents, back in:</Body>
<Code>
<A ID="pgfId-1075144"></A>
dls:document-checkin(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;/engineering/beta_overview.xml&quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn:true() )</Code>
<Heading-2>
<A ID="pgfId-1063748"></A>
<A ID="87706"></A>
Updating Managed Documents</Heading-2>
<Body>
<A ID="pgfId-1081152"></A>
You can call the <code>
dls:document-update</code>
 function to replace the contents of an existing managed document. Each time you call the <code>
dls:document-update</code>
 function on a document, the document's version is incremented and a purge operation is initiated that removes any versions of the document that are not retained by the retention policy, as described in <A href="dls.xml#id(91470)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Defining a Retention Policy' on page&#160;73</A>.</Body>
<Note>
<A ID="pgfId-1081156"></A>
You cannot use node update functions, such as <code>
xdmp:node-replace</code>
, with managed documents. Updates to the document must be done in memory before calling the <code>
dls:document-update</code>
 function. For information on how to do in-memory updates on document nodes, see <A href="typeswitch.xml#id(37159)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Transforming XML Structures With a Recursive typeswitch Expression' on page&#160;86</A>.</Note>
<Body>
<A ID="pgfId-1081157"></A>
For example, to update the 'Project Beta Overview' document, enter:</Body>
<Code>
<A ID="pgfId-1070195"></A>
let $contents :=  
&lt;BOOK&gt;
&#160;&#160;&lt;TITLE&gt;Project Beta Overview&lt;/TITLE&gt;
&#160;&#160;&lt;CHAPTER&gt;
&#160;&#160;&#160;&#160;&lt;TITLE&gt;Objectives&lt;/TITLE&gt;
&#160;&#160;&#160;&#160;&lt;PARA&gt;
&#160;&#160;&#160;&#160;The objective of Project Beta, in simple terms, is to corner
&#160;&#160;&#160;&#160;the widget market.
&#160;&#160;&#160;&#160;&lt;/PARA&gt;
&#160;&#160;&lt;/CHAPTER&gt;
&lt;/BOOK&gt; </Code>
<Code>
<A ID="pgfId-1070129"></A>
return
&#160;&#160;&#160;&#160;dls:document-update(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;/engineering/beta_overview.xml&quot;,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;$contents,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;Roughing in the first chapter&quot;,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn:true())</Code>
<Note>
<A ID="pgfId-1074085"></A>
The <code>
dls:document-update</code>
 function replaces the entire contents of the document.</Note>
<Heading-2>
<A ID="pgfId-1061799"></A>
<A ID="91470"></A>
Defining a Retention Policy</Heading-2>
<Body>
<A ID="pgfId-1061800"></A>
A <Emphasis>
retention policy</Emphasis>
 specifies what document versions are retained in the database following a purge operation. A retention policy is made up of one or more <Emphasis>
retention rules</Emphasis>
. If you do not define a retention policy, then none of the previous versions of your documents are retained. </Body>
<Body>
<A ID="pgfId-1069038"></A>
This section describes:</Body>
<Body-bullet>
<A ID="pgfId-1075292"></A>
<A href="dls.xml#id(91632)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Purging Versions of Managed Document</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1067693"></A>
<A href="dls.xml#id(53790)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
About Retention Rules</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1067710"></A>
<A href="dls.xml#id(88167)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating Retention Rules</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1069007"></A>
<A href="dls.xml#id(33686)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Retaining Specific Versions of Documents</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1075266"></A>
<A href="dls.xml#id(48582)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Multiple Retention Rules</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1075274"></A>
<A href="dls.xml#id(70976)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Deleting Retention Rules</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1075239"></A>
<A ID="91632"></A>
Purging Versions of Managed Document </Heading-3>
<Body>
<A ID="pgfId-1075240"></A>
Each update of a managed document initiates a purge operation that removes the versions of that document that are not retained by your retention policy. You can also call <code>
dls:purge</code>
 to purge all of the documents or <code>
dls:document-purge</code>
 to run purge on a specific managed document.</Body>
<Body>
<A ID="pgfId-1075241"></A>
You can also use <code>
dls:purge</code>
 or <code>
dls:document-purge</code>
 to determine what documents would be deleted by the retention policy without actually deleting them. This option can be useful when developing your retention rules. For example, if you change your retention policy and want to determine specifically what document versions will be deleted as a result, you can use:</Body>
<Code>
<A ID="pgfId-1075242"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1075243"></A>
dls:purge(fn:false(), fn:true())</Code>
<Heading-3>
<A ID="pgfId-1067673"></A>
<A ID="53790"></A>
About Retention Rules</Heading-3>
<Body>
<A ID="pgfId-1063609"></A>
Retention rules describe which versions of what documents are to be retained by the purge operation. When using <code>
dls:document-update</code>
 or <code>
dls:document-extract-part</code>
 to create a new version of a document, previous versions of the document that do not match the retention policy are purged.</Body>
<Body>
<A ID="pgfId-1079109"></A>
You can define retention rules to keep various numbers of document versions, to keep documents matching a <code>
cts-query</code>
 expression, and/or to keep documents for a specified period of time. Restrictions in a retention rule are combined with a logical AND, so that all of the expressions in the retention rule must be true for the document versions to be retained. When you combine separate retention rules, the resulting retention policy is an OR of the combined rules (that is, the document versions are retained if they are matched by any of the rules). Multiple rules do not have an order of operation. </Body>
<WarningList>
<Warning>
<A ID="pgfId-1074148"></A>
The retention policy specifies what is <Emphasis>
retained</Emphasis>
, not what is purged. Therefore, anything that does not match the retention policy is removed.</Warning>
</WarningList>
<Heading-3>
<A ID="pgfId-1074150"></A>
<A ID="88167"></A>
Creating Retention Rules</Heading-3>
<Body>
<A ID="pgfId-1074151"></A>
You create a retention rule by calling the <code>
dls:retention-rule</code>
 function. The <code>
dls:retention-rule-insert</code>
 function inserts one or more retention rules into the database.</Body>
<Body>
<A ID="pgfId-1072918"></A>
For example, the following retention rule retains all versions of all documents because the empty <code>
cts:and-query</code>
 function matches all documents:</Body>
<Code>
<A ID="pgfId-1072793"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1072763"></A>
dls:retention-rule-insert(
dls:retention-rule(
&#160;&#160;&#160;&#160;&quot;All Versions Retention Rule&quot;,
&#160;&#160;&#160;&#160;&quot;Retain all versions of all documents&quot;,
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;&quot;Locate all of the documents&quot;,
&#160;&#160;&#160;&#160;cts:and-query(()) ) )</Code>
<Body>
<A ID="pgfId-1066000"></A>
The following retention rule retains the last five versions of all of the documents located under the<code>
 /</code>
engineering<code>
/</code>
 directory:</Body>
<Code>
<A ID="pgfId-1069639"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1069088"></A>
dls:retention-rule-insert(
dls:retention-rule(
&#160;&#160;&#160;&#160;&quot;Engineering Retention Rule&quot;,
&#160;&#160;&#160;&#160;&quot;Retain the five most recent versions of Engineering docs&quot;,
&#160;&#160;&#160;&#160;5,
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;&quot;Locate all of the Engineering documents&quot;,
&#160;&#160;&#160;&#160;cts:directory-query(&quot;/engineering/&quot;, &quot;infinity&quot;) ) )</Code>
<Body>
<A ID="pgfId-1069139"></A>
The following retention rule retains the latest three versions of the engineering documents with 'Project Alpha' in the title that were authored by Jim:</Body>
<Code>
<A ID="pgfId-1069651"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1076376"></A>
dls:retention-rule-insert(
dls:retention-rule(
&#160;&#160;&#160;&#160;&quot;Project Alpha Retention Rule&quot;,
&#160;&#160;&#160;&#160;&quot;Retain the three most recent engineering documents with
&#160;&#160;&#160;&#160;&#160;the title ‘Project Alpha' and authored by Jim.&quot;,
&#160;&#160;&#160;&#160;3,
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;&quot;Locate the engineering docs with 'Project Alpha' in the 
&#160;&#160;&#160;&#160;&#160;title authored by Jim&quot;,
&#160;&#160;&#160;&#160;cts:and-query((
&#160;&#160;&#160;&#160;&#160;&#160;&#160;cts:element-word-query(xs:QName(&quot;TITLE&quot;), &quot;Project Alpha&quot;),
&#160;&#160;&#160;&#160;&#160;&#160;&#160;cts:directory-query(&quot;/engineering/&quot;, &quot;infinity&quot;),
&#160;&#160;&#160;&#160;&#160;&#160;&#160;dls:author-query(xdmp:user(&quot;Jim&quot;)) )) ) )</Code>
<Body>
<A ID="pgfId-1077090"></A>
The following retention rule retains the five most recent versions of documents in the 'specs' collection that are no more than thirty days old:</Body>
<Code>
<A ID="pgfId-1077091"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1077092"></A>
dls:retention-rule-insert(
dls:retention-rule(
&#160;&#160;&#160;&#160;&quot;Specs Retention Rule&quot;,
&#160;&#160;&#160;&#160;&quot;Keep the five most recent versions of documents in the ‘specs'
&#160;&#160;&#160;&#160;collection that are 30 days old or newer&quot;,
&#160;&#160;&#160;&#160;5,
&#160;&#160;&#160;&#160;xs:duration(&quot;P30D&quot;),
&#160;&#160;&#160;&#160;&quot;Locate documents in the 'specs' collection&quot;,
&#160;&#160;&#160;&#160;cts:collection-query(&quot;http://marklogic.com/documents/specs&quot;) ) )</Code>
<Heading-3>
<A ID="pgfId-1068166"></A>
<A ID="33686"></A>
Retaining Specific Versions of Documents</Heading-3>
<Body>
<A ID="pgfId-1075374"></A>
The dls:document-version-query and <code>
dls:as-of-query</code>
 constructor functions can be used in a retention rule to retain <Emphasis>
snapshots</Emphasis>
 of the documents as they were at some point in time. A snapshot may be of specific versions of documents or documents as of a specific date.</Body>
<Body>
<A ID="pgfId-1068168"></A>
For example, the following retention rule retains the latest versions of the engineering documents created before 5:00pm on 4/23/09:</Body>
<Code>
<A ID="pgfId-1069663"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1076458"></A>
dls:retention-rule-insert(
dls:retention-rule(
&#160;&#160;&#160;&#160;&quot;Draft 1 of the Engineering Docs&quot;,
&#160;&#160;&#160;&#160;&quot;Retain each engineering document that was update before
&#160;&#160;&#160;&#160;&#160;5:00pm, 4/23/09&quot;,
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;cts:and-query((
&#160;&#160;&#160;&#160;&#160;&#160;&#160;cts:directory-query(&quot;/documentation/&quot;, &quot;infinity&quot;),
&#160;&#160;&#160;&#160;&#160;&#160;&#160;dls:as-of-query(xs:dateTime(&quot;2009-04-23T17:00:00-07:00&quot;)) )) ))</Code>
<Body>
<A ID="pgfId-1068170"></A>
If you want to retain two separate snapshots of the engineering documents, you can add a retention rule that contains a different <code>
cts:or-query</code>
 function. For example:</Body>
<Code>
<A ID="pgfId-1068171"></A>
cts:and-query((
&#160;&#160;&#160;&#160;cts:directory-query(&quot;/documentation/&quot;, &quot;infinity&quot;),
&#160;&#160;&#160;&#160;dls:as-of-query(xs:dateTime(&quot;2009-25-12T09:00:01-07:00&quot;)) ))</Code>
<Heading-3>
<A ID="pgfId-1068136"></A>
<A ID="48582"></A>
Multiple Retention Rules</Heading-3>
<Body>
<A ID="pgfId-1068137"></A>
In some organizations, it might make sense to create multiple retention rules. For example, the Engineering and Documentation groups may share a database and each organization wants to create and maintain their own retention rule. </Body>
<Body>
<A ID="pgfId-1065075"></A>
Consider the two rules shown below. The first rule retains the latest 5 versions of all of the documents under the <code>
/engineering/</code>
 directory. The second rule, retains that latest 10 versions of all of the documents under the <code>
/documentation/</code>
 directory. The ORed result of these two rules does not impact the intent of each individual rule and each rule can be updated independently from the other.</Body>
<Code>
<A ID="pgfId-1069675"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1069224"></A>
dls:retention-rule-insert((
dls:retention-rule(
&#160;&#160;&#160;&#160;&quot;Engineering Retention Rule&quot;,
&#160;&#160;&#160;&#160;&quot;Retain the five most recent versions of Engineering docs&quot;,
&#160;&#160;&#160;&#160;5,
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;&quot;Apply to all of the Engineering documents&quot;,
&#160;&#160;&#160;&#160;cts:directory-query(&quot;/engineering/&quot;, &quot;infinity&quot;) ), </Code>
<Code>
<A ID="pgfId-1069225"></A>
dls:retention-rule(
&#160;&#160;&#160;&#160;&quot;Documentation Retention Rule&quot;,
&#160;&#160;&#160;&#160;&quot;Retain the ten most recent versions of the documentation&quot;,
&#160;&#160;&#160;&#160;10,
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;&quot;Apply to all of the documentation&quot;,
&#160;&#160;&#160;&#160;cts:directory-query(&quot;/documentation/&quot;, &quot;infinity&quot;) ) ))</Code>
<Body>
<A ID="pgfId-1071921"></A>
As previously described, multiple retention rules define a logical OR between them, so there may be circumstances when multiple retention rules are needed to define the desired retention policy for the same set of documents. </Body>
<Body>
<A ID="pgfId-1071952"></A>
For example, you want to retain the last five versions of all of the engineering documents, as well as all engineering documents that were updated before 8:00am on 4/24/09 and 9:00am on 5/12/09. The following two retention rules are needed to define the desired retention policy:</Body>
<Code>
<A ID="pgfId-1069694"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1068980"></A>
dls:retention-rule-insert((
dls:retention-rule(
&#160;&#160;&#160;&#160;&quot;Engineering Retention Rule&quot;,
&#160;&#160;&#160;&#160;&quot;Retain the five most recent versions of Engineering docs&quot;,
&#160;&#160;&#160;&#160;5,
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;&quot;Retain all of the Engineering documents&quot;,
&#160;&#160;&#160;&#160;cts:directory-query(&quot;/engineering/&quot;, &quot;infinity&quot;) ),</Code>
<Code>
<A ID="pgfId-1076607"></A>
dls:retention-rule(
&#160;&#160;&#160;&#160;&quot;Project Alpha Retention Rule&quot;,
&#160;&#160;&#160;&#160;&quot;Retain the engineering documents that were updated before
&#160;&#160;&#160;&#160;&#160;the review dates below.&quot;,
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;&quot;Retain all of the Engineering documents updated before 
&#160;&#160;&#160;&#160;&#160;the two dates&quot;,
&#160;&#160;&#160;&#160;cts:and-query((
&#160;&#160;&#160;&#160;&#160;&#160;cts:directory-query(&quot;/engineering/&quot;, &quot;infinity&quot;),
&#160;&#160;&#160;&#160;&#160;&#160;cts:or-query((
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dls:as-of-query(xs:dateTime(&quot;2009-04-24T08:00:17.566-07:00&quot;)),
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dls:as-of-query(xs:dateTime(&quot;2009-05-12T09:00:01.632-07:00&quot;))
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;))
&#160;&#160;&#160;&#160;&#160;)) ) ))</Code>
<Body>
<A ID="pgfId-1071964"></A>
It is important to understand the difference between the logical OR combination of the above two retention rules and the logical AND within a single rule. For example, the OR combination of the above two retention rules is not same as the single rule below, which is an AND between retaining the last five versions and the as-of versions. The end result of this rule is that the last five versions are not retained and the as-of versions are only retained as long as they are among the last five versions. Once the revisions of the last five documents have moved past the as-of dates, the AND logic is no longer true and you no longer have an effective retention policy, so no versions of the documents are retained.</Body>
<Code>
<A ID="pgfId-1071965"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1076233"></A>
dls:retention-rule-insert(
dls:retention-rule(
&#160;&#160;&#160;&#160;&quot;Project Alpha Retention Rule&quot;,
&#160;&#160;&#160;&#160;&quot;Retain the 5 most recent engineering documents&quot;,
&#160;&#160;&#160;&#160;5,
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;&quot;Retain all of the Engineering documents updated before 
&#160;&#160;&#160;&#160;&#160;the two dates&quot;,
&#160;&#160;&#160;&#160;cts:and-query((
&#160;&#160;&#160;&#160;&#160;&#160;cts:directory-query(&quot;/engineering/&quot;, &quot;infinity&quot;),
&#160;&#160;&#160;&#160;&#160;&#160;cts:or-query((
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dls:as-of-query(xs:dateTime(&quot;2009-04-24T08:56:17.566-07:00&quot;)),
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dls:as-of-query(xs:dateTime(&quot;2009-05-12T08:59:01.632-07:00&quot;))
&#160;&#160;&#160;&#160;&#160;&#160;&#160;)) )) ) )</Code>
<Heading-3>
<A ID="pgfId-1067850"></A>
<A ID="51884"></A>
<A ID="70976"></A>
Deleting Retention Rules</Heading-3>
<Body>
<A ID="pgfId-1066185"></A>
You can use the <code>
dls:retention-rule-remove</code>
 function to delete retention rules. For example, to delete the 'Project Alpha Retention Rule,' use:</Body>
<Code>
<A ID="pgfId-1069791"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1069792"></A>
dls:retention-rule-remove(&quot;Project Alpha Retention Rule&quot;)</Code>
<Body>
<A ID="pgfId-1069743"></A>
To delete all of your retention rules in the database, use:</Body>
<Code>
<A ID="pgfId-1069730"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1069611"></A>
dls:retention-rule-remove(fn:data(dls:retention-rules(&quot;*&quot;)//dls:name))</Code>
<Heading-2>
<A ID="pgfId-1076948"></A>
<A ID="16641"></A>
Managing Modular Documents in Library Services</Heading-2>
<Body>
<A ID="pgfId-1077107"></A>
As described in <A href="mod-docs.xml#id(86523)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Reusing Content With Modular Document Applications' on page&#160;138</A>, you can create modular documents from the content stored in one or more linked documents. This section describes:</Body>
<Body-bullet>
<A ID="pgfId-1077144"></A>
<A href="dls.xml#id(87065)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating Managed Modular Documents</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077166"></A>
<A href="dls.xml#id(36286)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Expanding Managed Modular Documents</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077173"></A>
<A href="dls.xml#id(20378)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Managing Versions of Modular Documents</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1077130"></A>
<A ID="87065"></A>
Creating Managed Modular Documents</Heading-3>
<Body>
<A ID="pgfId-1076952"></A>
As described in <A href="mod-docs.xml#id(86523)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Reusing Content With Modular Document Applications' on page&#160;138</A>, you can create modular documents from the content stored in one or more linked documents. The <code>
dls:document-extract-part</code>
 function provides a shorthand method for creating modular managed documents. This function extracts a child element from a managed document, places the child element in a new managed document, and replaces the extracted child element with an XInclude reference.</Body>
<Body>
<A ID="pgfId-1076953"></A>
For example, the following function call extracts Chapter 1 from the 'Project Beta Overview' document:</Body>
<Code>
<A ID="pgfId-1076954"></A>
dls:document-extract-part(&quot;/engineering/beta_overview_chap1.xml&quot;, 
&#160;&#160;&#160;&#160;fn:doc(&quot;/engineering/beta_overview.xml&quot;)//CHAPTER[1], 
&#160;&#160;&#160;&#160;&quot;Extracting Chapter 1&quot;,
&#160;&#160;&#160;&#160;fn:true() )</Code>
<Body>
<A ID="pgfId-1076955"></A>
The contents of <code>
/engineering/beta_overview.xml</code>
 is now as follows:</Body>
<Code>
<A ID="pgfId-1076956"></A>
&lt;BOOK&gt;
&#160;&#160;&lt;TITLE&gt;Project Beta Overview&lt;/TITLE&gt;
&#160;&#160;&lt;xi:include href=&quot;/engineering/beta_overview_chap1.xml&quot;/&gt;
&lt;/BOOK&gt;</Code>
<Body>
<A ID="pgfId-1076957"></A>
The contents of <code>
/engineering/beta_overview_chap1.xml</code>
 is as follows:</Body>
<Code>
<A ID="pgfId-1076958"></A>
&lt;CHAPTER&gt;
&#160;&#160;&lt;TITLE&gt;Objectives&lt;/TITLE&gt;
&#160;&#160;&lt;PARA&gt;
&#160;&#160; The objective of Project Beta, in simple terms, is to corner
&#160;&#160; the widget market.
&#160;&#160;&lt;/PARA&gt;
&lt;/CHAPTER&gt;</Code>
<Note>
<A ID="pgfId-1076959"></A>
The newly created managed document containing the extracted child element is initially checked-in and must be checked out before you can make any updates.</Note>
<Body>
<A ID="pgfId-1077746"></A>
The <code>
dls:document-extract-part</code>
 function can only be called once in a transaction for the same document. There may be circumstances in which you want to extract multiple elements from a document and replace them with XInclude statements. For example, the following query creates separate documents for all of the chapters from the 'Project Beta Overview' document and replaces them with XInclude statements:</Body>
<Code>
<A ID="pgfId-1077804"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1077769"></A>
declare namespace xi=&quot;http://www.w3.org/2001/XInclude&quot;;</Code>
<Code>
<A ID="pgfId-1079512"></A>
let $includes := for $chap at $num in
&#160;&#160;&#160;doc(&quot;/engineering/beta_overview.xml&quot;)/BOOK/CHAPTER</Code>
<Code>
<A ID="pgfId-1079515"></A>
return (
&#160;&#160;&#160;dls:document-insert-and-manage(
&#160;&#160;&#160;&#160;&#160;fn:concat(&quot;/engineering/beta_overview_chap&quot;, $num, &quot;.xml&quot;),
&#160;&#160;&#160;&#160;&#160;fn:true(),
&#160;&#160;&#160;&#160;&#160;$chap),</Code>
<Code>
<A ID="pgfId-1079522"></A>
&#160;&#160;&#160;&lt;xi:include href=&quot;/engineering/beta_overview_chap{$num}.xml&quot;
&#160;&#160;&#160;&#160;xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;/&gt;
&#160;&#160;)</Code>
<Code>
<A ID="pgfId-1079527"></A>
let $contents := 
&#160;&#160;&#160;&lt;BOOK&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;TITLE&gt;Project Beta Overview&lt;/TITLE&gt;
&#160;&#160;&#160;&#160;&#160;&#160;{$includes}
&#160;&#160;&#160;&lt;/BOOK&gt;</Code>
<Code>
<A ID="pgfId-1079533"></A>
return
&#160;&#160;&#160;dls:document-update(
&#160;&#160;&#160;&#160;&#160;&#160;&quot;/engineering/beta_overview.xml&quot;,
&#160;&#160;&#160;&#160;&#160;&#160;$contents,
&#160;&#160;&#160;&#160;&#160;&#160;&quot;Chapters are XIncludes&quot;,
&#160;&#160;&#160;&#160;&#160;&#160;fn:true() )</Code>
<Body>
<A ID="pgfId-1077986"></A>
This query produces a 'Project Beta Overview' document similar to the following:</Body>
<Code>
<A ID="pgfId-1078008"></A>
&lt;BOOK&gt;
&#160;&#160;&#160;&lt;TITLE&gt;Project Beta Overview&lt;/TITLE&gt;
&#160;&#160;&#160;&lt;xi:include href=&quot;/engineering/beta_overview_chap1.xml&quot;
&#160;&#160;&#160;&#160;xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;/&gt;
&#160;&#160;&#160;&lt;xi:include href=&quot;/engineering/beta_overview_chap1.xml&quot;
&#160;&#160;&#160;&#160;xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;/&gt;
&#160;&#160;&#160;&lt;xi:include href=&quot;/engineering/beta_overview_chap2.xml&quot;
&#160;&#160;&#160;&#160;xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;/&gt;
&lt;/BOOK&gt;</Code>
<Heading-3>
<A ID="pgfId-1076961"></A>
<A ID="36286"></A>
Expanding Managed Modular Documents</Heading-3>
<Body>
<A ID="pgfId-1076962"></A>
Modular documents can be 'expanded' so that you can view the entire node, complete with its linked nodes, or a specific linked node. You can expand a modular document using <code>
dls:node-expand</code>
, or a linked node in a modular document using <code>
dls:link-expand</code>
 .</Body>
<Note>
<A ID="pgfId-1076966"></A>
When using the <code>
dls:node-expand</code>
 function to expand documents that contain XInclude links to specific versioned documents, specify the <code>
$restriction</code>
 parameter as an empty sequence.</Note>
<Body>
<A ID="pgfId-1076970"></A>
For example, to return the expanded <code>
beta_overview.xml</code>
 document, you can use:</Body>
<Code>
<A ID="pgfId-1079999"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1076971"></A>
let $node := fn:doc(&quot;/engineering/beta_overview.xml&quot;)</Code>
<Code>
<A ID="pgfId-1076973"></A>
return dls:node-expand($node, ())</Code>
<Body>
<A ID="pgfId-1079890"></A>
To return the first linked node in the <code>
beta_overview.xml</code>
 document, you can use:</Body>
<Code>
<A ID="pgfId-1079987"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1079891"></A>
declare namespace xi=&quot;http://www.w3.org/2001/XInclude&quot;;</Code>
<Code>
<A ID="pgfId-1079892"></A>
let $node := fn:doc(&quot;/engineering/beta_overview.xml&quot;)</Code>
<Code>
<A ID="pgfId-1079909"></A>
return dls:link-expand(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$node, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$node/BOOK/xi:include[1], 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;() )</Code>
<Body>
<A ID="pgfId-1076974"></A>
The <code>
dls:node-expand</code>
 and <code>
dls:link-expand</code>
 functions allow you to specify a <code>
cts:query</code>
 constructor to restrict what document version is to be expanded. For example, to expand the most recent version of the 'Project Beta Overview' document created before 1:30pm on 4/6/09, you can use:</Body>
<Code>
<A ID="pgfId-1076975"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1076976"></A>
let $node := fn:doc(&quot;/engineering/beta_overview.xml&quot;)</Code>
<Code>
<A ID="pgfId-1076977"></A>
return dls:node-expand(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$node, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dls:as-of-query(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xs:dateTime(&quot;2009-04-06T13:30:33.576-07:00&quot;)) )</Code>
<Heading-3>
<A ID="pgfId-1061778"></A>
<A ID="20378"></A>
Managing Versions of Modular Documents</Heading-3>
<Body>
<A ID="pgfId-1065207"></A>
Library Services can manage modular documents so that various versions can be created for the linked documents. As a modular document's linked documents are updated, you might want to take periodic snapshots of the entire node. </Body>
<Body>
<A ID="pgfId-1078796"></A>
For example, as shown in <A href="dls.xml#id(87065)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating Managed Modular Documents' on page&#160;80</A>, the 'Project Beta Overview' document contains three chapters that are linked as separate documents. The following query takes a snapshot of the latest version of each chapter and creates a new version of the 'Project Beta Overview' document that includes the versioned chapters:</Body>
<Code>
<A ID="pgfId-1071385"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace dls=&quot;http://marklogic.com/xdmp/dls&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/dls.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078316"></A>
declare namespace xi=&quot;http://www.w3.org/2001/XInclude&quot;;</Code>
<Code>
<A ID="pgfId-1078349"></A>
(: For each chapter in the document, get the URI :)
let $includes := 
&#160;&#160;for $chap at $num in doc(&quot;/engineering/beta_overview.xml&quot;) //xi:include/@href</Code>
<Code>
<A ID="pgfId-1078350"></A>
(: Get the latest version of each chapter :)
let $version_number :=
&#160;&#160;fn:data(dls:document-history($chap)//dls:version-id)[last()]</Code>
<Code>
<A ID="pgfId-1079212"></A>
let $version :=  dls:document-version-uri($chap, $version_number)</Code>
<Code>
<A ID="pgfId-1078351"></A>
(: Create an XInclude statement for each versioned chapter :)
&#160;&#160;return
&#160;&#160;&#160;&#160;&lt;xi:include href=&quot;{$version}&quot;/&gt;</Code>
<Code>
<A ID="pgfId-1078354"></A>
(: Update the book with the versioned chapters :)
let $contents := 
&#160;&#160;&lt;BOOK&gt;
&#160;&#160;&#160;&#160;&lt;TITLE&gt;Project Beta Overview&lt;/TITLE&gt;
&#160;&#160;&#160;&#160;{$includes}
&#160;&#160;&lt;/BOOK&gt;</Code>
<Code>
<A ID="pgfId-1078360"></A>
return
&#160;&#160;dls:document-update(
&#160;&#160;&#160;&#160;&quot;/engineering/beta_overview.xml&quot;,
&#160;&#160;&#160;&#160;$contents,
&#160;&#160;&#160;&#160;&quot;Latest Draft&quot;,
&#160;&#160;&#160;&#160;fn:true() )</Code>
<Body>
<A ID="pgfId-1078322"></A>
The above query results in a new version of the 'Project Beta Overview' document that looks like:</Body>
<Code>
<A ID="pgfId-1078783"></A>
&lt;BOOK&gt;
&#160;&#160;&lt;TITLE&gt;Project Beta Overview&lt;/TITLE&gt;
&#160;&#160;&lt;xi:include href=&quot;/engineering/beta_overview_chap1.xml_versions/4-beta_overview_
chap1.xml&quot; xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;/&gt;
&#160;&#160;&lt;xi:include href=&quot;/engineering/beta_overview_chap2.xml_versions/3-beta_overview_
chap2.xml&quot; xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;/&gt;
&#160;&#160;&lt;xi:include href=&quot;/engineering/beta_overview_chap3.xml_versions/3-beta_overview_
chap3.xml&quot; xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;/&gt;
&lt;/BOOK&gt;</Code>
<Note>
<A ID="pgfId-1073382"></A>
When using the <code>
dls:node-expand</code>
 function to expand modular documents that contain XInclude links to specific versioned documents, specify the <code>
$restriction</code>
 parameter as an empty sequence.</Note>
<Body>
<A ID="pgfId-1077480"></A>
You can also create modular documents that contain different versions of linked documents. For example, in the illustration below, Doc R.xml, Version 1 contains the contents of:</Body>
<Body-bullet>
<A ID="pgfId-1077481"></A>
Doc A.xml, Version 1</Body-bullet>
<Body-bullet>
<A ID="pgfId-1062908"></A>
Doc B.xml, Version 2</Body-bullet>
<Body-bullet>
<A ID="pgfId-1062909"></A>
Doc C.xml, Version 2</Body-bullet>
<Body>
<A ID="pgfId-1062910"></A>
While Doc X, Version 2 contains the contents of:</Body>
<Body-bullet>
<A ID="pgfId-1062911"></A>
Doc A.xml, Version 2</Body-bullet>
<Body-bullet>
<A ID="pgfId-1062912"></A>
Doc B.xml, Version 2</Body-bullet>
<Body-bullet>
<A ID="pgfId-1062913"></A>
Doc C.xml, Version 3</Body-bullet>
<Body-indent>
<A ID="pgfId-1062950"></A>
<IMAGE xml:link="simple" href="dls-3.gif" show="embed" actuate="auto"/>
</Body-indent>
<Body>
<A ID="pgfId-1073484"></A>
<A ID="94391"></A>
</Body>
</XML>
