<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="languages.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1053802"></A>
<A ID="40505"></A>
Language Support in MarkLogic Server</Heading-1>
<pagenum>
<A ID="pgfId-1053806"></A>
208</pagenum>
<Body>
<A ID="pgfId-1049471"></A>
MarkLogic Server supports loading and querying content in multiple languages. This chapter describes how languages are handled in MarkLogic Server, and includes the following sections:</Body>
<Body-bullet>
<A ID="pgfId-1056254"></A>
<A href="languages.xml#id(25247)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Overview of Language Support in MarkLogic Server</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1064151"></A>
<A href="languages.xml#id(59632)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Tokenization and Stemming</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1054662"></A>
<A href="languages.xml#id(34155)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Language Aspects of Loading and Updating Documents</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1064442"></A>
<A href="languages.xml#id(90159)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Querying Documents By Languages</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1063148"></A>
<A href="languages.xml#id(64343)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Supported Languages</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1056241"></A>
<A href="languages.xml#id(40354)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Generic Language Support</Hyperlink>
</A></Body-bullet>
<Heading-2>
<A ID="pgfId-1056279"></A>
<A ID="25247"></A>
Overview of Language Support in MarkLogic Server</Heading-2>
<Body>
<A ID="pgfId-1056283"></A>
In MarkLogic Server, the language of the content is specified when you load the content and the language of the query is specified when you query the content. At load-time, the content is tokenized, indexed, and stemmed (if enabled) based on the language specified during the load. Also, MarkLogic Server uses any languages specified at the element level in the XML markup for the content (see <A href="languages.xml#id(91703)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'xml:lang Attribute' on page&#160;202</A>), making it possible to load documents with multiple languages. Similarly, at query time, search terms are tokenized (and stemmed) based on the language specified in the <code>
cts:query</code>
 expression. The result is that a query performed in one language might not yield the same results as the same query performed in another language, as both the indexes that store the information about the content and the queries against the content are language-aware. </Body>
<Body>
<A ID="pgfId-1056292"></A>
Even if your content is entirely in a single language, MarkLogic Server is still multiple-language aware. If your content is all in a single language, and if that language is the default language for that database, and if the content does not have any language (<code>
xml:lang</code>
) attributes, and if your queries all specify (or default to) the language in which the content is loaded, then everything will behave as if there is a single language. </Body>
<Body>
<A ID="pgfId-1056305"></A>
Because MarkLogic Server is multiple-language aware, it is important to understand the fundamental aspects of languages when loading and querying content in MarkLogic Server. The remainder of this chapter, particularly <A href="languages.xml#id(34155)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Language Aspects of Loading and Updating Documents' on page&#160;201</A> and <A href="languages.xml#id(90159)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Querying Documents By Languages' on page&#160;204</A>, describe these details. </Body>
<Heading-2>
<A ID="pgfId-1056246"></A>
<A ID="59632"></A>
Tokenization and Stemming</Heading-2>
<Body>
<A ID="pgfId-1064153"></A>
To understand the language implications of querying and loading documents, you must first understand tokenization and stemming, which are both language-specific. This section describes these topics, and has the following parts:</Body>
<Body-bullet>
<A ID="pgfId-1064154"></A>
<A href="languages.xml#id(11138)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Language-Specific Tokenization</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1064158"></A>
<A href="languages.xml#id(36495)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Stemmed Searches in Different Languages</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1064161"></A>
<A ID="11138"></A>
Language-Specific Tokenization</Heading-3>
<Body>
<A ID="pgfId-1064165"></A>
When you search for a string (typically a word or a phrase) in MarkLogic Server, or when you load content (which is made up of text strings) into MarkLogic Server, the string is broken down to a set of parts, each of which is called a <Emphasis>
token</Emphasis>
. Each token is classified as a word, as punctuation, or as whitespace. The process of breaking down strings into tokens is called <Emphasis>
tokenization</Emphasis>
. Tokenization occurs during document loading as well as during query evaluation, and they are independent of each other. </Body>
<Body>
<A ID="pgfId-1064166"></A>
Tokenization is language-specific; that is, a given string is tokenized differently depending on the language in which it is tokenized. The language is determined based on the language specified at load or query time (or the database default language if no language is specified) and on any <code>
xml:lang</code>
 attributes in the content (for details, see <A href="languages.xml#id(91703)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'xml:lang Attribute' on page&#160;202</A>).</Body>
<Body>
<A ID="pgfId-1064283"></A>
Note the following about the way strings are tokenized in MarkLogic Server:</Body>
<Body-bullet>
<A ID="pgfId-1064170"></A>
The <code>
cts:tokenize</code>
 API will return how text is tokenized in the specified language.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1064171"></A>
Using <code>
xdmp:describe</code>
 of a <code>
cts:tokenize</code>
 expression returns the tokens and the type of tokens produced from the specified string. For example:</Body-bullet>
<Code>
<A ID="pgfId-1064172"></A>
xdmp:describe(cts:tokenize(&quot;this is, obviously, a phrase&quot;, &quot;en&quot;), 100)
=&gt; (cts:word(&quot;this&quot;), cts:space(&quot; &quot;), cts:word(&quot;is&quot;),
&#160;&#160;&#160;cts:punctuation(&quot;,&quot;), cts:space(&quot; &quot;), cts:word(&quot;obviously&quot;),
&#160;&#160;&#160;cts:punctuation(&quot;,&quot;), cts:space(&quot; &quot;), cts:word(&quot;a&quot;), 
&#160;&#160;&#160;cts:space(&quot; &quot;), cts:word(&quot;phrase&quot;))</Code>
<Body-bullet>
<A ID="pgfId-1064173"></A>
Every query has a language associated with it; if the language is not explicitly specified in the <code>
cts:query</code>
 expression, then it takes on the default language of the database.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1064177"></A>
MarkLogic Server comes configured such that when an element is in an Asian or Middle Eastern language, the Latin characters tokenize as English. This allows searches to find English words inside Asian or Middle Eastern language elements. For example, a search in English can find Latin characters in a Simplified Chinese element as in the following:</Body-bullet>
<Code>
<A ID="pgfId-1064178"></A>
let $x := &lt;el xml:lang=&quot;zh&quot;&gt;<Emphasis>
Chinese-text-here</Emphasis>
 hello&lt;/el&gt;
return
$x//el[cts:contains(., 
         cts:word-query(&quot;hello&quot;, (&quot;stemmed&quot;, &quot;lang=en&quot;)))]

=&gt; &lt;el xml:lang=&quot;zh&quot;&gt;<Emphasis>
Chinese-text-here</Emphasis>
 hello&lt;/el&gt;</Code>
<Body-indent>
<A ID="pgfId-1064179"></A>
A stemmed search for the Latin characters in a non-English language, however, will not find the non-English word stems (it will only find the non-English word itself, which stems to itself). Similarly, Asian or Middle Eastern characters will tokenize in a language appropriate to the character set, even when they occur in elements that are not in their language. The result is that searches in English sometimes match content that is labeled in an Asian or Middle Eastern character set, and vice-versa. For example, consider the following (<code>
zh</code>
 is the language code for Simplified Chinese):</Body-indent>
<Code>
<A ID="pgfId-1064180"></A>
let $x := 
&lt;root&gt;
&#160;&lt;el xml:lang=&quot;en&quot;&gt;hello&lt;/el&gt;
&#160;&lt;el xml:lang=&quot;fr&quot;&gt;hello&lt;/el&gt;
&#160;&lt;el xml:lang=&quot;zh&quot;&gt;hello&lt;/el&gt;
&lt;/root&gt;
return
$x//el[cts:contains(., 
         cts:word-query(&quot;hello&quot;, (&quot;stemmed&quot;, &quot;lang=en&quot;)))]

=&gt; &lt;el xml:lang=&quot;en&quot;&gt;hello&lt;/el&gt;
&#160;&#160;&#160;&lt;el xml:lang=&quot;zh&quot;&gt;hello&lt;/el&gt;</Code>
<Body-indent>
<A ID="pgfId-1064181"></A>
This search, even though in English, returns both the element in English and the one in Chinese. It returns the Chinese element because the word 'hello' is in Latin characters and therefore tokenizes as English, and it matches the Chinese query (which also tokenizes 'hello' in English). </Body-indent>
<Heading-3>
<A ID="pgfId-1064183"></A>
<A ID="36495"></A>
Stemmed Searches in Different Languages</Heading-3>
<Body>
<A ID="pgfId-1064184"></A>
A <Emphasis>
stemmed</Emphasis>
 search for a term matches all the terms that have the same stem as the search term (which includes the exact same terms in the language specified in the query). Words that are derived from the same meaning and part of speech have the same stem (for example, 'mouse' and 'mice'). Some words can have multiple stems (if the same word can be used as a different part of speech, or if there are two words with the same spelling), and if you use advanced stemming (which can find multiple stems for a word), then stemmed searches find all of the words having the same stem as any of the stems. The purpose of stemming is to increase the recall for a search. For details about how stemming works in MarkLogic Server, including the different stemming types of stemming available, see <A href="stemming.xml#id(90878)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Understanding and Using Stemmed Searches' on page&#160;135</A>. This sections describes how the language settings affect stemmed searches.</Body>
<Body>
<A ID="pgfId-1064191"></A>
To get the stem of a search term, you must take the language into consideration. For example, the word 'chat' is a different word in French than it is in English (in French, it is a noun meaning 'cat', in English, it is a verb meaning to converse informally). In French, 'chatting' is not a word, and therefore it does not stem to 'chat'. But in English, 'chatting' does stem to 'chat'. Therefore, stemming is language-specific, and stemmed searches in one language might find different results than stemmed searches in another.</Body>
<Body>
<A ID="pgfId-1064192"></A>
At query time, you can specify a language (or if you do not specify a language, the default language of the database is used). This language is used when performing a stemmed search. The language specification is in the options to the <code>
cts:query</code>
 expression. For example, the following <code>
cts:query</code>
 expression specifies a stemmed search in French for the word 'chat', and it only matches tokens that are stemmed in French.</Body>
<Code>
<A ID="pgfId-1064193"></A>
cts:word-query(&quot;chat&quot;, (&quot;stemmed&quot;, &quot;lang=fr&quot;))</Code>
<Body>
<A ID="pgfId-1064196"></A>
For more details about how languages affect queries, see <A href="languages.xml#id(90159)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Querying Documents By Languages' on page&#160;204</A>.</Body>
<Body>
<A ID="pgfId-1064247"></A>
At load time, the specified language is used to determine in which language to stem the words in the document. For more details about the language aspects of loading documents, see <A href="languages.xml#id(34155)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Language Aspects of Loading and Updating Documents' on page&#160;201</A>.</Body>
<Body>
<A ID="pgfId-1064236"></A>
For details about the syntax of the various <code>
cts:query</code>
 constructors, see the <Emphasis>
MarkLogic XQuery and XSLT Function Reference</Emphasis>
.</Body>
<Heading-2>
<A ID="pgfId-1055105"></A>
<A ID="34155"></A>
Language Aspects of Loading and Updating Documents</Heading-2>
<Body>
<A ID="pgfId-1061063"></A>
This section describes the impact of languages on loading and updating documents, and includes the following sections:</Body>
<Body-bullet>
<A ID="pgfId-1064467"></A>
<A href="languages.xml#id(31956)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Tokenization and Stemming</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1063352"></A>
<A href="languages.xml#id(91703)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
xml:lang Attribute</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1063357"></A>
<A href="languages.xml#id(34181)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Language-Related Notes About Loading and Updating Documents</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1064344"></A>
<A ID="31956"></A>
Tokenization and Stemming</Heading-3>
<Body>
<A ID="pgfId-1064345"></A>
Tokenization and stemming occur when loading documents, just as they do when querying documents (for details, see <A href="languages.xml#id(11138)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Language-Specific Tokenization' on page&#160;199</A> and <A href="languages.xml#id(36495)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Stemmed Searches in Different Languages' on page&#160;201</A>). When loading documents, the <code>
stemmed search</code>
 indexes are created based on the language. The tokenization and stemming at load time is completely independent from the tokenization and stemming at query time.</Body>
<Heading-3>
<A ID="pgfId-1063362"></A>
<A ID="91703"></A>
xml:lang Attribute</Heading-3>
<Body>
<A ID="pgfId-1063363"></A>
You can specify languages in XML documents at the element level by using the <code>
xml:lang</code>
 attribute. MarkLogic Server uses the <code>
xml:lang</code>
 attribute to determine the language with which to tokenize and stem the contents of that element. Note the following about the <code>
xml:lang</code>
 attribute:</Body>
<Body-bullet>
<A ID="pgfId-1063369"></A>
The <code>
xml:lang</code>
 attribute (see <Hyperlink>
<A href="http://www.w3.org/TR/2006/REC-xml-20060816/#sec-lang-tag" xml:link="simple" show="replace" actuate="user" CLASS="URL">http://www.w3.org/TR/2006/REC-xml-20060816/#sec-lang-tag</A></Hyperlink>
) has some special properties such as not needing to declare the namespace bound to the <code>
xml</code>
 prefix, and that it is inherited by all children of the element (unless they explicitly have a different <code>
xml:lang</code>
 value).</Body-bullet>
<Body-bullet>
<A ID="pgfId-1063391"></A>
You can explicitly add an <code>
xml:lang</code>
 attribute to the root node of a document during loading by specifying the <code>
default-language</code>
 option to <code>
xdmp:document-load</code>
; without the <code>
default-language</code>
 option, the root node will remain as-is.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1063371"></A>
If no <code>
xml:lang</code>
 attribute is present, then the document is processed in the default language of the database into which it is loaded.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1063372"></A>
For the purpose of indexing terms, the language specified by the <code>
xml:lang</code>
 attribute only applies to stemmed search terms; the <code>
word searches</code>
 (unstemmed) database configuration setting indexes terms irrespective of language. Tokenization of terms honors the <code>
xml:lang</code>
 value for both <code>
stemmed searches</code>
 and <code>
word searches</code>
 index settings in the database configuration.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1063373"></A>
All of the text node children and text node descendants of an element with an <code>
xml:lang</code>
 attribute are treated as the language specified in the <code>
xml:lang</code>
 attribute, unless a child element has an <code>
xml:lang</code>
 attribute with a different value. If so, any text node children and text node descendants are treated as the new language, and so on until no other <code>
xml:lang</code>
 attributes are encountered. </Body-bullet>
<Body-bullet>
<A ID="pgfId-1063374"></A>
The value of the <code>
xml:lang</code>
 attribute must conform to the following lexical standard: <Hyperlink>
<A href="http://www.ietf.org/rfc/rfc3066.txt" xml:link="simple" show="replace" actuate="user" CLASS="URL">http://www.ietf.org/rfc/rfc3066.txt</A></Hyperlink>
. The following are some typical <code>
xml:lang</code>
 attributes (specifying French, Simplified Chinese, and English, respectively):</Body-bullet>
<Code>
<A ID="pgfId-1063459"></A>
xml:lang=&quot;fr&quot;
xml:lang=&quot;zh&quot;
xml:lang=&quot;en&quot;</Code>
<Body-bullet>
<A ID="pgfId-1064595"></A>
If an element has an <code>
xml:lang</code>
 attribute with a value of the empty string (<code>
xml:lang=&quot;&quot;</code>
), then any <code>
xml:lang</code>
 value in effect (from some ancestor <code>
xml:lang</code>
 value) is overridden for that element; its value takes on the database language default. Additionally, if a <code>
default-language</code>
 option is specified during loading, any empty string <code>
xml:lang</code>
 values are replaced with the language specified in the <code>
default-language</code>
 option. For example, consider the following XML:</Body-bullet>
<Code>
<A ID="pgfId-1064645"></A>
&lt;rhone xml:lang=&quot;fr&quot;&gt;
&#160;&#160;&#160;&lt;wine&gt;vin rouge&lt;/wine&gt;
&#160;&#160;&#160;&lt;wine xml:lang=&quot;&quot;&gt;red wine&lt;/wine&gt;
&lt;/rhone&gt;</Code>
<Body-indent>
<A ID="pgfId-1064654"></A>
In this sample, the phrase 'vin rouge' is treated as French, and the phrase 'red wine' is treated in the default language for the database (English by default). </Body-indent>
<Body-indent>
<A ID="pgfId-1064672"></A>
If this sample was loaded with a default-language option specifying Italian (specifying <code>
&lt;default-language&gt;it&lt;/default-language&gt;</code>
 for the <code>
xdmp:document-load</code>
 option, for example), then the resulting document would be as follows:</Body-indent>
<Code>
<A ID="pgfId-1064659"></A>
&lt;rhone xml:lang=&quot;fr&quot;&gt;
&#160;&#160;&#160;&lt;wine&gt;vin rouge&lt;/wine&gt;
&#160;&#160;&#160;&lt;wine xml:lang=&quot;it&quot;&gt;red wine&lt;/wine&gt;
&lt;/rhone&gt;</Code>
<Heading-3>
<A ID="pgfId-1063389"></A>
<A ID="34181"></A>
Language-Related Notes About Loading and Updating Documents</Heading-3>
<Body>
<A ID="pgfId-1063382"></A>
When you load content into MarkLogic Server, it determines how to index the content based on several factors, including the language specified during the load operation, the default language of the database, and any languages encoded into the content with <code>
xml:lang</code>
 attributes. Note the following about languages with respect to loading content, updating content, and changing language settings on a database:</Body>
<Body-bullet>
<A ID="pgfId-1056214"></A>
Changing the default language starts a reindex operation if <code>
reindex enable</code>
 is set to <code>
true</code>
.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1056221"></A>
Documents with no <code>
xml:lang</code>
 attribute are indexed upon load or update in the database default language.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1061083"></A>
Any content within an element having an <code>
xml:lang</code>
 attribute is indexed in that language. Additionally, the <code>
xml:lang</code>
 value is inherited by all of the descendants of that element, until another <code>
xml:lang</code>
 value is encountered.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1063581"></A>
MarkLogic Server comes configured such that when an element is in an Asian or Middle Eastern language, the Latin characters tokenize as English. Therefore, a document with Latin characters in a non-English language will create stemmed index terms in English for those Latin characters. Similarly, Asian or Middle Eastern characters will tokenize in their respective languages, even in elements that are not in their language. </Body-bullet>
<Heading-2>
<A ID="pgfId-1064365"></A>
<A ID="90159"></A>
Querying Documents By Languages</Heading-2>
<Body>
<A ID="pgfId-1064366"></A>
Full-text search queries (queries that use <code>
cts:search</code>
 or <code>
cts:contains</code>
) are language-aware; that is, they search for text, tokenize the search terms, and stem (if enabled) in a particular language. This section describes how queries are language-aware and describes their behavior. It includes the following topics:</Body>
<Body-bullet>
<A ID="pgfId-1064370"></A>
<A href="languages.xml#id(69423)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Tokenization, Stemming, and the xml:lang Attribute</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1064374"></A>
<A href="languages.xml#id(44034)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Language-Aware Searches</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1064378"></A>
<A href="languages.xml#id(50842)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Unstemmed Searches</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1064382"></A>
<A href="languages.xml#id(46574)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Unknown Languages</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1064384"></A>
<A ID="69423"></A>
Tokenization, Stemming, and the xml:lang Attribute</Heading-3>
<Body>
<A ID="pgfId-1064385"></A>
Tokenization and stemming are both language-specific; that is, a string can be tokenized and stemmed differently in different languages. For searches, the language is specified by the cts:query constructors (or by the default language of the database if a language is not specified). For more details, see <A href="languages.xml#id(59632)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Tokenization and Stemming' on page&#160;199</A>. For nodes constructed in XQuery, any <code>
xml:lang</code>
 attributes are treated the same way as if the document were loaded into a database. For details, see <A href="languages.xml#id(91703)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'xml:lang Attribute' on page&#160;202</A>.</Body>
<Heading-3>
<A ID="pgfId-1064390"></A>
<A ID="44034"></A>
Language-Aware Searches</Heading-3>
<Body>
<A ID="pgfId-1064394"></A>
All searches in MarkLogic Server are language-aware. You can construct searches using <code>
cts:search or cts:contains</code>
, each of which takes a <code>
cts:query</code>
 expression. Each leaf-level <code>
cts:query</code>
 constructor in the <code>
cts:query</code>
 expression specifies a language (or defaults to a language). For details on the <code>
cts:query</code>
 constructors, see <A href="cts_query.xml#id(51991)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Composing cts:query Expressions' on page&#160;56</A>.</Body>
<Body>
<A ID="pgfId-1064398"></A>
All searches use the language setting in the <code>
cts:query</code>
 constructor to determine how to tokenize the search terms. Stemmed searches also use the language setting to derive stems. Unstemmed searches use the specified language for tokenization but use the unstemmed (<code>
word searches</code>
) indexes, which are language-independent. </Body>
<Heading-3>
<A ID="pgfId-1064400"></A>
<A ID="50842"></A>
Unstemmed Searches</Heading-3>
<Body>
<A ID="pgfId-1064401"></A>
An <Emphasis>
unstemmed</Emphasis>
 search matches terms that are exactly like the search term; it does not take into consideration the stem of the word. Unstemmed searches match terms in a language independent way, but tokenize the search according to the specified language. Therefore, when you specify a language in an unstemmed query, the language applies only to tokenization; the unstemmed query will match any text in any language that matches the query. </Body>
<Body>
<A ID="pgfId-1064402"></A>
Note the following characteristics of unstemmed searches:</Body>
<Body-bullet>
<A ID="pgfId-1064403"></A>
Unstemmed searches require <code>
word search</code>
 indexes, otherwise they throw an exception (this is a change of behavior from MarkLogic Server 3.1, see the <Emphasis>
Release Notes</Emphasis>
 for details). You can perform unstemmed searches without <code>
word search</code>
 indexes using <code>
cts:contains</code>
, however. To perform unstemmed searches without the <code>
word search</code>
 indexes enabled, use a <code>
let</code>
 to bind the results of a stemmed search to a variable, and then filter the results using <code>
cts:contains</code>
 with an unstemmed query.</Body-bullet>
<Body-indent>
<A ID="pgfId-1064570"></A>
The following example demonstrates this. It binds the unstemmed search to a varaiable, then iterates over the results of the search in a FLWOR loop, filtering out all but the unstemmed results in the <code>
where</code>
 clause (using <code>
cts:contains</code>
 with a <code>
cts:query</code>
 that specifies the <code>
unstemmed</code>
 option).</Body-indent>
<Code>
<A ID="pgfId-1064410"></A>
let $search := cts:search(doc(), cts:word-query(&quot;my words&quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&quot;stemmed&quot;, &quot;lang=en&quot;)))
for $x in $search
where cts:contains($x, cts:word-query(&quot;my words&quot;, &quot;unstemmed&quot;))
return $x</Code>
<Note>
<A ID="pgfId-1064532"></A>
While it is likely that everything returned by this search will have an English match to the <code>
cts:query</code>
, it does not necessarily <Emphasis>
guarantee</Emphasis>
 that everything returned is in English. Because this search returns documents, it is possible for a document to contain words in another language that do not match the language-specific query, but do match the unstemmed query (if the document contains text in multiple languages, and if it has 'my&#160;words' in some other language than the one specified in the stemmed <code>
cts:query</code>
). </Note>
<Body-bullet>
<A ID="pgfId-1064412"></A>
The <code>
word search</code>
 indexes have no language information.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1064413"></A>
Unstemmed searches use the <code>
lang=&lt;language&gt;</code>
 option to determine the language for tokenization.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1064414"></A>
Unstemmed searches search all content, regardless of language (and regardless of <code>
lang=&lt;language&gt;</code>
 option). The language only affects how the search terms are tokenized. For example, the following unstemmed search returns true:</Body-bullet>
<Code>
<A ID="pgfId-1064415"></A>
(: returns true :)
let $x := &lt;el xml:lang=&quot;fr&quot;&gt;chat&lt;/el&gt;
return
cts:contains($x, cts:word-query(&quot;chat&quot;, (&quot;unstemmed&quot;, &quot;lang=en&quot;)))</Code>
<Body-indent>
<A ID="pgfId-1064416"></A>
whereas the following stemmed search returns false:</Body-indent>
<Code>
<A ID="pgfId-1064417"></A>
(: returns true :)
let $x := &lt;el xml:lang=&quot;fr&quot;&gt;chat&lt;/el&gt;
return
cts:contains($x, cts:word-query(&quot;chat&quot;, (&quot;stemmed&quot;, &quot;lang=en&quot;)))</Code>
<Heading-3>
<A ID="pgfId-1064419"></A>
<A ID="46574"></A>
Unknown Languages</Heading-3>
<Body>
<A ID="pgfId-1064420"></A>
If the language specified in a search is not one of the languages in which language-specific stemming and tokenization are supported, or if it is a language for which you do not have a license key, then it is treated as a generic language. Typically, generic languages with Latin script are tokenized the same way as English, with token breaks at whitespace and punctuation, and with each word stemming to itself, but this is not always the case (especially for languages supported by MarkLogic Server--see <A href="languages.xml#id(64343)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Supported Languages' on page&#160;207</A>--but for which you are not licensed). For details, see <A href="languages.xml#id(40354)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Generic Language Support' on page&#160;208</A>.</Body>
<Heading-2>
<A ID="pgfId-1061410"></A>
<A ID="64343"></A>
Supported Languages</Heading-2>
<Body>
<A ID="pgfId-1063150"></A>
This section lists languages with advanced stemming and tokenization support in MarkLogic Server. All of the languages except English require a license key with support for the language. If your license key does not include support for a given language, the language is treated as a generic language (see <A href="languages.xml#id(40354)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Generic Language Support' on page&#160;208</A>). The following are the supported languages:</Body>
<Body-bullet>
<A ID="pgfId-1063176"></A>
English</Body-bullet>
<Body-bullet>
<A ID="pgfId-1063187"></A>
French</Body-bullet>
<Body-bullet>
<A ID="pgfId-1063188"></A>
Italian</Body-bullet>
<Body-bullet>
<A ID="pgfId-1063189"></A>
German</Body-bullet>
<Body-bullet>
<A ID="pgfId-1063191"></A>
Russian</Body-bullet>
<Body-bullet>
<A ID="pgfId-1067951"></A>
Spanish</Body-bullet>
<Body-bullet>
<A ID="pgfId-1063192"></A>
Arabic</Body-bullet>
<Body-bullet>
<A ID="pgfId-1063193"></A>
Chinese (Simplified and Traditional)</Body-bullet>
<Body-bullet>
<A ID="pgfId-1064678"></A>
Korean</Body-bullet>
<Body-bullet>
<A ID="pgfId-1064679"></A>
Persian (Farsi)</Body-bullet>
<Body-bullet>
<A ID="pgfId-1067937"></A>
Dutch</Body-bullet>
<Body-bullet>
<A ID="pgfId-1068073"></A>
Japanese</Body-bullet>
<Body-bullet>
<A ID="pgfId-1068093"></A>
Portuguese</Body-bullet>
<Body>
<A ID="pgfId-1063177"></A>
For a list of base collations and character sets used with each language, see <A href="encodings_collations.xml#id(40354)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Collations and Character Sets By Language' on page&#160;217</A>.</Body>
<Heading-2>
<A ID="pgfId-1063149"></A>
<A ID="40354"></A>
Generic Language Support</Heading-2>
<Body>
<A ID="pgfId-1055165"></A>
You can load and query documents in any language into MarkLogic Server, as long as you can convert the character encoding to UTF-8. If the language is not one of the languages with advanced support, or if the language is one for which you are not licensed, then the tokenization is performed in a generic way (on whitespace and punctuation characters for non-Asian characters, and on each character for Asian characters), and each term stems to itself.</Body>
<Body>
<A ID="pgfId-1060816"></A>
For example, if you load the following document:</Body>
<Code>
<A ID="pgfId-1060817"></A>
&lt;doc xml:lang=&quot;nn&quot;&gt;
&#160;&#160;&lt;a&gt;Some text in any language here.&lt;/a&gt;
&lt;/doc&gt;</Code>
<Body>
<A ID="pgfId-1060818"></A>
then that document is loaded as the language <code>
nn</code>
, and a stemmed search in any other language would not match. Therefore, the following does not match the document:</Body>
<Code>
<A ID="pgfId-1060827"></A>
(: does not match because it was stemmed as &quot;nn&quot; :)
cts:search(doc(), cts:word-query(&quot;language&quot;, (&quot;stemmed&quot;, &quot;lang=en&quot;))</Code>
<Body>
<A ID="pgfId-1060828"></A>
and the following search does match the document:</Body>
<Code>
<A ID="pgfId-1060833"></A>
(: does match because the query specifies &quot;nn&quot; as the language :)
cts:search(doc(), cts:word-query(&quot;language&quot;, (&quot;stemmed&quot;, &quot;lang=nn&quot;))</Code>
<Body>
<A ID="pgfId-1054588"></A>
Generic language support allows you to query documents in any language, regardless of which languages you are licensed for or which languages have advanced support. Because the generic language support only stems words to themselves, queries in these languages will not include variations of words based on their meanings in the results. If you desire further support than the generic language support for some particular language, contact MarkLogic Technical Support. </Body>
</XML>
