<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="geospatial.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1053802"></A>
<A ID="86523"></A>
 Geospatial Search Applications</Heading-1>
<pagenum>
<A ID="pgfId-1053806"></A>
115</pagenum>
<Body>
<A ID="pgfId-1049471"></A>
This chapter describes how to use the geospatial functions and describes the type of applications that might use these functions, and includes the following sections:</Body>
<Body-bullet>
<A ID="pgfId-1053734"></A>
<A href="geospatial.xml#id(97677)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Overview of Geospatial Data in MarkLogic Server</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1060195"></A>
<A href="geospatial.xml#id(53281)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Understanding Geospatial Coordinates and Regions</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1060769"></A>
<A href="geospatial.xml#id(54091)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Geospatial Indexes</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1060690"></A>
<A href="geospatial.xml#id(64164)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Using the API</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059352"></A>
<A href="geospatial.xml#id(39929)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Simple Geospatial Search Example</Hyperlink>
</A></Body-bullet>
<Heading-2>
<A ID="pgfId-1054048"></A>
<A ID="97677"></A>
Overview of Geospatial Data in MarkLogic Server</Heading-2>
<Body>
<A ID="pgfId-1055449"></A>
In its most basic form, geospatial data is a set of latitude and longitude coordinates. Geospatial data in MarkLogic Server is marked up in XML elements and/or attributes. There are a variety of ways you can represent geospatial data as XML, and MarkLogic Server supports several different representations. This section provides an overview of how geospatial data and queries work in MarkLogic Server, and includes the following parts:</Body>
<Body-bullet>
<A ID="pgfId-1059310"></A>
<A href="geospatial.xml#id(82391)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Terminology</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059318"></A>
<A href="geospatial.xml#id(98149)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
WGS84--World Geodetic System</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059323"></A>
<A href="geospatial.xml#id(67842)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Types of Geospatial Queries</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059328"></A>
<A href="geospatial.xml#id(28731)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
XQuery Primitive Types And Constructors for Geospatial Queries</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1055553"></A>
<A ID="82391"></A>
Terminology</Heading-3>
<Body>
<A ID="pgfId-1059433"></A>
The following terms are used to describe the geospatial features in MarkLogic Server:</Body>
<Body-bullet>
<A ID="pgfId-1059370"></A>
coordinate system</Body-bullet>
<Body-indent>
<A ID="pgfId-1059378"></A>
A geospatial <Emphasis>
coordinate system </Emphasis>
is a set of mappings that map places on Earth to a set of numbers. The vertical axis is represented by a latitude coordinate, and the horizontal axis is represented by a longitude coordinate, and together they make up a coordinate system that is used to map places on the Earth. For more details, see <A href="geospatial.xml#id(86655)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Latitude and Longitude Coordinates in MarkLogic Server' on page&#160;107</A>.</Body-indent>
<Body-bullet>
<A ID="pgfId-1055600"></A>
point</Body-bullet>
<Body-indent>
<A ID="pgfId-1059360"></A>
A geospatial <Emphasis>
point</Emphasis>
 is the spot in the geospatial coordinate system representing the intersection of a given latitude and longitude. For more details, see <A href="geospatial.xml#id(88520)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Points in MarkLogic Server' on page&#160;107</A>.</Body-indent>
<Body-bullet>
<A ID="pgfId-1059391"></A>
proximity</Body-bullet>
<Body-indent>
<A ID="pgfId-1059397"></A>
The <Emphasis>
proximity</Emphasis>
 of search results is how close the results are to each other in a document. Proximity can apply to any type of search terms, included geospatial search terms. For example, you might want to find a search term <Emphasis>
dog</Emphasis>
 that occurs within 10 words of a point in a given zip code.</Body-indent>
<Body-bullet>
<A ID="pgfId-1059392"></A>
distance</Body-bullet>
<Body-indent>
<A ID="pgfId-1059425"></A>
The <Emphasis>
distance</Emphasis>
 between two geospatial objects refers to the geographical closeness of those geospatial objects. </Body-indent>
<Heading-3>
<A ID="pgfId-1055593"></A>
<A ID="98149"></A>
WGS84--World Geodetic System</Heading-3>
<Body>
<A ID="pgfId-1059160"></A>
MarkLogic Server uses the World Geodetic System (WGS84) as the basis for geocoding. WGS84 sets out a coordinate system that assumes a single map projection of the earth. WGS84 is widely used for mapping locations on the earth, and is used by a wide range of services, including many satellite services (notably: Global Positioning System--GPS) and Google Maps. There are other geocoding systems, some of which have advantages or disadvantages over WGS84 (for example, some are more accurate in a given region, some are less popular); MarkLogic Server uses WGS84, which is a widely accepted standard for global point representation. For details on WGS84, see <Hyperlink>
<A href="http://en.wikipedia.org/wiki/World_Geodetic_System" xml:link="simple" show="replace" actuate="user" CLASS="URL">http://en.wikipedia.org/wiki/World_Geodetic_System</A></Hyperlink>
.</Body>
<Heading-3>
<A ID="pgfId-1059161"></A>
<A ID="67842"></A>
Types of Geospatial Queries</Heading-3>
<Body>
<A ID="pgfId-1055589"></A>
The following types of geospatial queries are supported in MarkLogic Server:</Body>
<Body-bullet>
<A ID="pgfId-1055569"></A>
point query--matches a single point</Body-bullet>
<Body-bullet>
<A ID="pgfId-1055570"></A>
box query--any point within a rectangular box</Body-bullet>
<Body-bullet>
<A ID="pgfId-1055571"></A>
radius query--any point within a specified distance around a point</Body-bullet>
<Body-bullet>
<A ID="pgfId-1058929"></A>
polygon query--any point within a specified <Emphasis>
n</Emphasis>
-sided polygon</Body-bullet>
<Body>
<A ID="pgfId-1059482"></A>
Geospatial <code>
cts:query</code>
 constructors are composable just like any other <code>
cts:query</code>
 constructors. For details on composing <code>
cts:query</code>
 constructors, see <A href="cts_query.xml#id(51991)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Composing cts:query Expressions' on page&#160;56</A>.</Body>
<Note>
<A ID="pgfId-1061052"></A>
Using the geospatial query constructors requires a valid geospatial license key; without a valid license key, searches that include geospatial queries will throw an exception.</Note>
<Heading-3>
<A ID="pgfId-1055611"></A>
<A ID="28731"></A>
XQuery Primitive Types And Constructors for Geospatial Queries</Heading-3>
<Body>
<A ID="pgfId-1055615"></A>
To support geospatial queries, MarkLogic Server has the following XQuery primitive types:</Body>
<Body-bullet>
<A ID="pgfId-1060874"></A>
<code>
cts:point</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1060875"></A>
<code>
cts:box</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1060876"></A>
<code>
cts:circle</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1058933"></A>
<code>
cts:polygon</code>
</Body-bullet>
<Body>
<A ID="pgfId-1058937"></A>
You use these primitive types in geospatial <code>
cts:query</code>
 constructors (for example, <code>
cts:element-geospatial-query</code>
, <code>
cts:element-attribute-geospatial-query</code>
, <code>
cts:element-pair-geospatial-query</code>
, and so on.). Each of the <code>
cts:point</code>
, <code>
cts:box</code>
, <code>
cts:circle</code>
, and <code>
cts:polygon</code>
 XQuery primitive types is an instance of the <code>
cts:region</code>
 base type. These types define regions, and then the query returns true if the regions contain matching data in the context of a search. </Body>
<Body>
<A ID="pgfId-1059901"></A>
Additionally, there are constructors for each primitive type which attempt to take data and construct it into the corresponding type. If the data is not constructible, then an exception is thrown. MarkLogic Server parses the data to try and extract points to construct into the type. For example, the following constructs the string into a <code>
cts:polygon</code>
 which includes the points separated by a space:</Body>
<Code>
<A ID="pgfId-1059910"></A>
cts:polygon(&quot;38,-10 40,-10 39-15&quot;)</Code>
<Body>
<A ID="pgfId-1059923"></A>
The following constructs these coordinates (represented as numbers) into a <code>
cts:point</code>
:</Body>
<Code>
<A ID="pgfId-1059934"></A>
cts:point(38.7, -10.3)</Code>
<Heading-2>
<A ID="pgfId-1055455"></A>
<A ID="53281"></A>
Understanding Geospatial Coordinates and Regions</Heading-2>
<Body>
<A ID="pgfId-1060340"></A>
This section describes the rules for geospatial coordinates and the various regions (<code>
cts:point</code>
, <code>
cts:box</code>
, <code>
cts:polygon</code>
, and <code>
cts:circle</code>
), and includes the following parts:</Body>
<Body-bullet>
<A ID="pgfId-1060343"></A>
<A href="geospatial.xml#id(27260)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Understanding the Basics of Coordinates and Points</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1060366"></A>
<A href="geospatial.xml#id(82464)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Understanding Geospatial Boxes</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1060377"></A>
<A href="geospatial.xml#id(70683)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Understanding Geospatial Polygons</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1060511"></A>
<A href="geospatial.xml#id(78272)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Understanding Geospatial Circles</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1060339"></A>
<A ID="27260"></A>
Understanding the Basics of Coordinates and Points</Heading-3>
<Body>
<A ID="pgfId-1060557"></A>
To understand how geospatial regions are defined in MarkLogic Server, you should first understand the basics of coordinates and of points. This section describes the following:</Body>
<Body-bullet>
<A ID="pgfId-1060571"></A>
<A href="geospatial.xml#id(86655)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Latitude and Longitude Coordinates in MarkLogic Server</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1060578"></A>
<A href="geospatial.xml#id(88520)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Points in MarkLogic Server</Hyperlink>
</A></Body-bullet>
<Heading-4>
<A ID="pgfId-1060556"></A>
<A ID="86655"></A>
Latitude and Longitude Coordinates in MarkLogic Server</Heading-4>
<Body>
<A ID="pgfId-1060320"></A>
Latitudes have north/south coordinates. They start at 0 degrees for the equator and head north to 90 degrees for the north pole and south to -90 degrees for the south pole. If you specify a coordinate that is greater than 90 degrees or less than -90 degrees, the value is truncated to either 90 or -90, respectively. </Body>
<Body>
<A ID="pgfId-1060329"></A>
Longitudes have east/west coordinates. They start at 0 degrees at the Prime Meridian and head east around the Earth to 180 degrees, and head west around the earth (from the Prime Meridian) to -180 degrees. If you travel 360 degrees, it brings you back to the Prime Meridian. If you go west from the Prime Meridian, the numbers go negative. For example, New York City is west of the Prime Meridian, and its longitude is -73.99 degrees. Adding or subtracting any multiple of 360 to a longitude coordinate gives an equivalent coordinate.</Body>
<Heading-4>
<A ID="pgfId-1060561"></A>
<A ID="88520"></A>
Points in MarkLogic Server</Heading-4>
<Body>
<A ID="pgfId-1060595"></A>
A point is simply a pair of latitude and longitude coordinates. Where the points intersect is a place on the Earth. For example, the coordinates of San Francisco, California are a the pair that includes the latitude of 37.655983 and the longitude of -122.425525. The <code>
cts:point</code>
 type is used to define a point in MarkLogic Server. Use the <code>
cts:point</code>
 constructor to construct a point from a set of coordinates. Additionally, points are used to define the other regions in MarkLogic Server (<code>
cts:box</code>
, <code>
cts:polygon</code>
, and <code>
cts:circle</code>
).</Body>
<Heading-3>
<A ID="pgfId-1060316"></A>
<A ID="82464"></A>
Understanding Geospatial Boxes</Heading-3>
<Body>
<A ID="pgfId-1060194"></A>
Geospatial boxes allow you to make a region defined by four coordinates. The four coordinates define a <Emphasis>
geospatial box</Emphasis>
 which, when projected onto a flat plane, forms a rectangular box. A point is said to be in that geospatial box if it is inside the boundaries of the box. The four coordinates that define a box represent the southern, western, northern, and eastern boundaries of the box. The box is two-dimensional, and is created by taking a projection from the three-dimensional Earth onto a flat surface. On the surface of the Earth, the edges of the box are arcs, but when those arcs are projected into a plane, they become two-dimensional latitude and longitude lines, and the space defined by those lines forms a rectangle (represented by a <code>
cts:box</code>
), as shown in the following figure.</Body>
<Body>
<A ID="pgfId-1060410"></A>
<IMAGE xml:link="simple" href="geospatial-1.gif" show="embed" actuate="auto"/>
</Body>
<Body>
<A ID="pgfId-1060278"></A>
The following are the assumptions and restrictions associated with geospatial boxes:</Body>
<Body-bullet>
<A ID="pgfId-1060228"></A>
The four points on a box are south, west, north, and east, in that order.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1060247"></A>
Assuming a projection from the Earth onto a two-dimensional plane, boxes are determined by going from the south western limit to south eastern limit (even if it passes the date line), then north to the north eastern limit (border on the poles), then west to the north western limit, then back south to the south western limit where you started.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1060232"></A>
When determining the west/east boundary of the box, you always start at the western longitude and head east toward the eastern longitude. This means that if your western point is east of the date line, and your eastern point is west of the date line, then you will head east around the Earth until you get back to the eastern point.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1060260"></A>
Similarly, when determining the south/north sides of the box, you always start at the southern latitude and head north to the northern latitude. You cannot cross the pole, however, as it does not make sense to have the northern point south of the southern point. If you do cross a pole, a search that uses that box will throw an <code>
XDMP-BADBOX</code>
 runtime error (because you cannot go north from the north pole). Note that the error will happen at search time, not at box creation time.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1060236"></A>
If the eastern coordinate is equal to the western coordinate, then only that longitude is considered. Similarly, if the northern coordinate is equal to the southern coordinate, only that latitude is considered. The consequence of these facts are the following:</Body-bullet>
<Body-bullet-2>
<A ID="pgfId-1060302"></A>
If the western and eastern coordinates are the same, the box is a vertical line between the southern and northern coordinates passing through that longitude coordinate.</Body-bullet-2>
<Body-bullet-2>
<A ID="pgfId-1060308"></A>
If the southern and northern coordinates are the same, the box is a horizontal line between the western and eastern coordinates passing through that latitude coordinate.</Body-bullet-2>
<Body-bullet-2>
<A ID="pgfId-1060313"></A>
If the western and eastern coordinates are the same, and if the southern and northern coordinates are the same, then the box is a point specified by those coordinates.</Body-bullet-2>
<Body-bullet>
<A ID="pgfId-1060238"></A>
The boundaries on the box are either in or out of the box, depending on query options (there are various boundary options on the geospatial <code>
cts:query</code>
 constructors to control this behavior).</Body-bullet>
<Heading-3>
<A ID="pgfId-1060193"></A>
<A ID="70683"></A>
Understanding Geospatial Polygons</Heading-3>
<Body>
<A ID="pgfId-1058958"></A>
Geospatial polygons allow you to make a region with n-sided boundaries for your geospatial queries. These boundaries can represent any area on Earth (with the exceptions described below). For example, you might create a polygon to represent a country or a geographical region. Polygons offer a large degree of flexibility compared with circles or boxes. In exchange for the flexibility, geospatial polygons are not quite as fast and not quite as accurate as geospatial boxes. The efficiency of the polygons is proportional to the number of sides to the polygon. For example, a typical 10-sided polygon will likely perform faster than a typical 1000-sided polygon. The speed is dependent on many factors, including where the polygon is, the nature of your geospatial data, and so on.</Body>
<Body>
<A ID="pgfId-1058979"></A>
The following are the assumptions and restrictions associated with geospatial polygons:</Body>
<Body-bullet>
<A ID="pgfId-1058959"></A>
Assumes the Earth is a sphere, divided by great circle arcs running through the center of the earth, one great circle divided the longitude (running through the Greenwich Meridian, sometimes called the Prime Meridian) and the other dividing the latitude (at the equator).</Body-bullet>
<Body-bullet>
<A ID="pgfId-1058963"></A>
Each side of the polygons are semi-spherical projections from the endpoints onto the spherical Earth surface. Therefore, the lines are not all in a single plane, but instead follow the curve of the Earth (approximated to be a sphere).</Body-bullet>
<Body-bullet>
<A ID="pgfId-1058965"></A>
A polygon cannot include both poles. Therefore, it cannot have both poles as a boundary (regardless of whether the boundaries are included), which means it cannot encompass the full 180 degrees of latitude.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1058966"></A>
A polygon edge must be less than 180 degrees; that is, two adjacent points of a polygon must wrap around less than half of the earth's longitude or latitude. If you need a polygon to wrap around more than 180 degrees, you can still do it, but you must use more than two points. Therefore, adjacent vertices cannot be separated by more than 180 degrees of longitude. As a result, a polygon cannot include the pole, except along one of its edges. Also as a result, if two points that make up a polygon edge are greater than 180 degrees apart, MarkLogic Server will always choose the direction that is less than 180 degrees.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1058972"></A>
Geospatial queries are constrained to elements and attributes named in the <code>
cts:query</code>
 constructors. To cross multiple formats in a single query, use <code>
cts:or-query</code>
.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1058980"></A>
Some searches will throw a runtime exception if a polygon is not valid for the coordinate system (the coordinate system is specified at search time, not at <code>
cts:polygon</code>
 creation time).</Body-bullet>
<Body-bullet>
<A ID="pgfId-1060538"></A>
The boundaries on the polygon are either in or out of the polygon, depending on query options (there are various boundary options on the geospatial <code>
cts:query</code>
 constructors to control this behavior).</Body-bullet>
<Body-bullet>
<A ID="pgfId-1061034"></A>
Because of the spherical Earth assumption, and because points are represented by floats, results are not exact; polygons are not as accurate as the other methods because they use a sphere as a model of the Earth. While it may not be that intuitive, floats are used to represent points on the Earth because it turns out that there is no benefit in the accuracy if you use doubles (the Earth is just not that big).</Body-bullet>
<Heading-3>
<A ID="pgfId-1055602"></A>
<A ID="78272"></A>
Understanding Geospatial Circles</Heading-3>
<Body>
<A ID="pgfId-1060510"></A>
Geospatial circles allow you to define a region with boundaries defined by a point with a radius specified in miles. The point and radius define a circle, and anything inside the circle is within the boundaries of the <code>
cts:circle</code>
, and the boundaries of the circle are either in or out, depending on query options (there are various boundary options on the geospatial <code>
cts:query</code>
 constructors to control this behavior).</Body>
<Heading-2>
<A ID="pgfId-1060702"></A>
<A ID="54091"></A>
Geospatial Indexes</Heading-2>
<Body>
<A ID="pgfId-1060703"></A>
Because you store geospatial data in XML markup within a document, you can query the content constraining on the geospatial XML markup. You can create geospatial indexes to speed up geospatial queries and to enable geospatial lexicon queries, allowing you to take full advantage of having the geospatial data marked up in your content. This section describes the different kinds of geospatial indexes and includes the following parts:</Body>
<Body-bullet>
<A ID="pgfId-1060707"></A>
<A href="geospatial.xml#id(57072)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Different Kinds of Geospatial Indexes</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1060711"></A>
<A href="geospatial.xml#id(17778)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Geospatial Index Positions</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1060713"></A>
<A ID="57072"></A>
Different Kinds of Geospatial Indexes</Heading-3>
<Body>
<A ID="pgfId-1060714"></A>
Use the Admin Interface to create any of these indexes, under Database &gt; <Emphasis>
database_name</Emphasis>
 &gt; Geospatial Indexes. The following sections describe how the geospatial data is structured for each of the four types of geospatial indexes, and also describes the geospatial positions option, which is available for each index.</Body>
<Body-bullet>
<A ID="pgfId-1060718"></A>
<A href="geospatial.xml#id(44359)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Geospatial Element Indexes</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1060722"></A>
<A href="geospatial.xml#id(85173)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Geospatial Element Child Indexes</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1060726"></A>
<A href="geospatial.xml#id(23010)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Geospatial Element Pair Indexes</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1060730"></A>
<A href="geospatial.xml#id(95631)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Geospatial Attribute Pair Indexes</Hyperlink>
</A></Body-bullet>
<Note>
<A ID="pgfId-1061057"></A>
You must have a valid geospatial license key to create or use any geospatial indexes.</Note>
<Heading-4>
<A ID="pgfId-1060732"></A>
<A ID="44359"></A>
Geospatial Element Indexes</Heading-4>
<Body>
<A ID="pgfId-1060733"></A>
With a geospatial element index, the geospatial data is represented by whitespace or punctuation (except <code>
+</code>
, <code>
-</code>
, or <code>
.</code>
) separated element content:</Body>
<Code>
<A ID="pgfId-1060734"></A>
&lt;element-name&gt;37.52  -122.25&lt;/element-name&gt;</Code>
<Body>
<A ID="pgfId-1060735"></A>
The first entry represents the latitude coordinate, and the second entry represents the longitude coordinate. You can also have other entries, but they are ignored (for example, KML has an additional altitude coordinate, which can be present but is ignored).</Body>
<Heading-4>
<A ID="pgfId-1060737"></A>
<A ID="85173"></A>
Geospatial Element Child Indexes</Heading-4>
<Body>
<A ID="pgfId-1060738"></A>
With a geospatial element child index, the geospatial data comes from whitespace or punctuation (except <code>
+</code>
, <code>
-</code>
, or <code>
.</code>
) separated element content, but only for elements that are a specific child of a specific element.</Body>
<Code>
<A ID="pgfId-1060739"></A>
&lt;element-name1&gt;
&#160;&#160;&lt;element-name2&gt;37.52  -122.25&lt;/element-name2&gt;
&lt;/element-name1&gt;</Code>
<Body>
<A ID="pgfId-1060740"></A>
The first entry represents the latitude coordinate, and the second entry represents the longitude coordinate.</Body>
<Heading-4>
<A ID="pgfId-1060742"></A>
<A ID="23010"></A>
Geospatial Element Pair Indexes</Heading-4>
<Body>
<A ID="pgfId-1060743"></A>
With a geospatial element pair index, the geospatial data comes from a specific pair of elements that are a child of another specific element. </Body>
<Code>
<A ID="pgfId-1060744"></A>
&lt;element-name&gt;
&#160;&#160;&lt;latitude&gt;37.52&lt;/latitude&gt;
&#160;&#160;&lt;longitude&gt;-122.25&lt;/longitude&gt;
&lt;/element-name1&gt;</Code>
<Heading-4>
<A ID="pgfId-1060746"></A>
<A ID="95631"></A>
Geospatial Attribute Pair Indexes</Heading-4>
<Body>
<A ID="pgfId-1060747"></A>
With a geospatial attribute pair index, the geospatial data comes from a pair of specific attributes of a specific element.</Body>
<Code>
<A ID="pgfId-1060748"></A>
&lt;element-name latitude=&quot;37.52&quot; longitude=&quot;-122.25&quot;/&gt;</Code>
<Heading-3>
<A ID="pgfId-1060750"></A>
<A ID="17778"></A>
Geospatial Index Positions </Heading-3>
<Body>
<A ID="pgfId-1060751"></A>
Each geospatial index has a positions option. The positions option speeds up queries that constrain the distance in the document between geospatial data in the document (using <code>
cts:near-query</code>
, for example). Additionally, when element positions are enabled in the database, it improves index resolution (more accurate estimates) for element queries that involve geospatial queries (with a geospatial index with positions enabled for the geospatial data). </Body>
<Heading-3>
<A ID="pgfId-1060752"></A>
Geospatial Lexicons</Heading-3>
<Body>
<A ID="pgfId-1060753"></A>
Geospatial indexes enable geospatial lexicon lookups. The lexicon lookups enable very fast retrieval of geospatial values. For details on geospatial lexicons, see <A href="lexicon.xml#id(90832)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Geospatial Lexicons' on page&#160;86</A>.</Body>
<Heading-2>
<A ID="pgfId-1060646"></A>
<A ID="64164"></A>
Using the API</Heading-2>
<Body>
<A ID="pgfId-1060647"></A>
Using the geospatial API is just like using any <code>
cts:query</code>
 constructors, where you use the <code>
cts:query</code>
 as the second parameter (or a building block of the second parameter) of <code>
cts:search</code>
. The basic procedure involves the following steps: </Body>
<Number1>
<A ID="pgfId-1060648"></A>
Load geospatial data into a database.</Number1>
<NumberList>
<Number>
<A ID="pgfId-1060649"></A>
Create geospatial indexes (optional, speeds performance).</Number>
<Number>
<A ID="pgfId-1060650"></A>
Construct primitive types to use in geospatial <code>
cts:query</code>
 constructors.</Number>
<Number>
<A ID="pgfId-1060651"></A>
Construct the geospatial queries using the geospatial primitive types.</Number>
<Number>
<A ID="pgfId-1060652"></A>
Use the geospatial queries in a <code>
cts:search</code>
 operation.</Number>
</NumberList>
<EndList-root>
<A ID="pgfId-1060653"></A>
You can also use the geospatial queries in <code>
cts:contains</code>
 operations, regardless of whether the geospatial data is in the database.</EndList-root>
<Heading-3>
<A ID="pgfId-1060654"></A>
Geospatial cts:query Constructors</Heading-3>
<Body>
<A ID="pgfId-1060655"></A>
The following geospatial <code>
cts:query</code>
 constructors are available:</Body>
<Body-bullet>
<A ID="pgfId-1060656"></A>
<code>
cts:element-attribute-pair-geospatial-query</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1060657"></A>
<code>
cts:element-pair-geospatial-query</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1060658"></A>
<code>
cts:element-geospatial-query</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1060659"></A>
<code>
cts:element-child-geospatial-query</code>
</Body-bullet>
<Heading-3>
<A ID="pgfId-1060660"></A>
Geospatial Value Constructors for Regions</Heading-3>
<Body>
<A ID="pgfId-1060661"></A>
The following APIs are used to construct geospatial regions. Use these functions with the geospatial <code>
cts:query</code>
 constructors above to construct <code>
cts:queries</code>
.</Body>
<Body-bullet>
<A ID="pgfId-1060662"></A>
<code>
cts:box</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1060663"></A>
<code>
cts:circle</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1060664"></A>
<code>
cts:point</code>
</Body-bullet>
<Body-bullet>
<A ID="pgfId-1060665"></A>
<code>
cts:polygon</code>
</Body-bullet>
<Body>
<A ID="pgfId-1060669"></A>
For details on these functions, see the <Emphasis>
MarkLogic XQuery and XSLT Function Reference</Emphasis>
. These functions are complementary to the type constructors with the same names, which are described in <A href="geospatial.xml#id(28731)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'XQuery Primitive Types And Constructors for Geospatial Queries' on page&#160;106</A>.</Body>
<Heading-3>
<A ID="pgfId-1060673"></A>
Geospatial Format Conversion Functions</Heading-3>
<Body>
<A ID="pgfId-1060674"></A>
There are XQuery library modules to translate Metacarta, GML, KML, and GeoRSS formats to <code>
cts:box</code>
, <code>
cts:circle</code>
, <code>
cts:point</code>
, and <code>
cts:polygon</code>
 formats. The functions in these libraries are designed to take geospatial data in these formats and construct <code>
cts:region</code>
 primitive types to pass into the geospatial <code>
cts:query</code>
 constructors and construct appropriate queries. For the signatures of these functions, see the XQuery Library Module section of the <Emphasis>
MarkLogic XQuery and XSLT Function Reference</Emphasis>
.</Body>
<Heading-2>
<A ID="pgfId-1060506"></A>
<A ID="39929"></A>
Simple Geospatial Search Example</Heading-2>
<Body>
<A ID="pgfId-1059705"></A>
This section provides an example showing a <code>
cts:search</code>
 that uses a geospatial query.</Body>
<Body>
<A ID="pgfId-1059713"></A>
Assume a document with the URI <code>
/geo/zip_labels.xml</code>
 with the following form:</Body>
<Code>
<A ID="pgfId-1059717"></A>
&lt;labels&gt;
&#160;&#160;&lt;label id=&quot;1&quot;&gt;96044&lt;/label&gt;
&#160;&#160;...
&#160;&#160;&lt;label id=&quot;589&quot;&gt;95616&lt;/label&gt;
&#160;&#160;&lt;label id=&quot;712&quot;&gt;95616&lt;/label&gt;
&#160;&#160;&lt;label id=&quot;715&quot;&gt;95616&lt;/label&gt;
&#160;&#160;...
&lt;/labels&gt;</Code>
<Body>
<A ID="pgfId-1059825"></A>
Assume you have polygon data in a document with the URI <code>
/geo/zip.xml</code>
 with the following form:</Body>
<Code>
<A ID="pgfId-1059839"></A>
&lt;polygon id=&quot;712&quot;&gt;
       0.383337584506173E+02,       -0.121659014798844E+03
       0.383133840000000E+02,       -0.121656011000000E+03
       0.383135090000000E+02,       -0.121666647000000E+03
       0.383135090000000E+02,       -0.121666647000000E+03
       0.383135120000000E+02,       -0.121666875000000E+03
       0.383349030000000E+02,       -0.121667035000000E+03
       0.383353510000000E+02,       -0.121657355000000E+03
       0.383496550000000E+02,       -0.121656811000000E+03
       0.383495590000000E+02,       -0.121646955000000E+03
       0.383494950000000E+02,       -0.121645323000000E+03
       0.383473190000000E+02,       -0.121645691000000E+03
       0.383370790000000E+02,       -0.121650187000000E+03
       0.383133840000000E+02,       -0.121656011000000E+03
&lt;/polygon&gt;</Code>
<Body>
<A ID="pgfId-1059744"></A>
You can then take the contents of the polygon element and cast it to a <code>
cts:polygon</code>
 using the <code>
cts:polygon</code>
 constructor. For example, the following returns a <code>
cts:polygon</code>
 for the above data:</Body>
<Code>
<A ID="pgfId-1059885"></A>
cts:polygon(fn:data(fn:doc(&quot;/geo/zip.xml&quot;)//polygon[@id eq &quot;712&quot;]))</Code>
<Body>
<A ID="pgfId-1059866"></A>
Further assume you have content of the following form:</Body>
<Code>
<A ID="pgfId-1059758"></A>
&lt;feature id=&quot;1703188&quot; class=&quot;School&quot;&gt;
&#160;&#160;&lt;name&gt;Ralph Waldo Emerson Junior High School&lt;/name&gt;
&#160;&#160;&lt;state id=&quot;06&quot;&gt;CA&lt;/state&gt;
&#160;&#160;&lt;county id=&quot;113&quot;&gt;Yolo&lt;/county&gt;
&#160;&#160;&lt;lat dms=&quot;383306N&quot;&gt;38.5515731&lt;/lat&gt;
&#160;&#160;&lt;long dms=&quot;1214639W&quot;&gt;-121.7774624&lt;/long&gt;
&#160;&#160;&lt;elevation&gt;17&lt;/elevation&gt;
&#160;&#160;&lt;map&gt;Merritt&lt;/map&gt;
&lt;/feature&gt;</Code>
<Body>
<A ID="pgfId-1059821"></A>
Now consider the following XQuery:</Body>
<Code>
<A ID="pgfId-1059776"></A>
let $searchterms := (&quot;school&quot;, &quot;junior&quot;)
let $zip := &quot;95616&quot;
let $ziplabel := fn:doc(&quot;/geo/zip_labels.xml&quot;)//label[contains(.,$zip)]
let $polygons := 
&#160;&#160;&#160;for $p in fn:doc(&quot;/geo/zip.xml&quot;)//polygon[@id=$ziplabel/@id]
   return cts:polygon(fn:data($p))
let $query := 
   cts:and-query((
       for $term in $searchterms return cts:word-query($term),
       cts:element-pair-geospatial-query(xs:QName(&quot;feature&quot;), 
             xs:QName(&quot;lat&quot;), xs:QName(&quot;long&quot;), $polygons) ))
return  (
&lt;h2&gt;{fn:concat(&quot;Places with the term '&quot;, 
               fn:string-join($searchterms, &quot;' and the term '&quot;), 
               &quot;' in the zipcode &quot;, fn:data($zip), &quot;:&quot;)}&lt;/h2&gt;,
  &lt;ol&gt;{for $feature in cts:search(//feature, $query)
  order by $feature/name
  return (
  &lt;li&gt;&lt;h3&gt;{fn:data($feature/name),&quot; &quot;}   
  &lt;code&gt;({fn:data($feature/lat)},{fn:data($feature/long)})&lt;/code&gt;&lt;/h3&gt;
  &lt;p&gt;{fn:data($feature/@class)} in {fn:data($feature/county)},   
  {fn:data($feature/state)} from map {fn:data($feature/map)}&lt;/p&gt;&lt;/li&gt; )
&#160;&#160;}&lt;/ol&gt; )</Code>
<Body>
<A ID="pgfId-1059771"></A>
This returns results similar to the following (shown rendered in a browser):</Body>
<Body>
<A ID="pgfId-1059816"></A>
<IMAGE xml:link="simple" href="images/zips.gif" show="embed" actuate="auto"/>
</Body>
<Body>
<A ID="pgfId-1059819"></A>
</Body>
</XML>
