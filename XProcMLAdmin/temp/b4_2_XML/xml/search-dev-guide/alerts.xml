<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="alerts.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1053802"></A>
<A ID="86523"></A>
 Creating Alerting Applications</Heading-1>
<pagenum>
<A ID="pgfId-1053806"></A>
129</pagenum>
<Body>
<A ID="pgfId-1049471"></A>
This chapter describes how to create alerting applications in MarkLogic Server as well as describes the components of alerting applications, and includes the following sections:</Body>
<Body-bullet>
<A ID="pgfId-1053734"></A>
<A href="alerts.xml#id(29203)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Overview of Alerting Applications in MarkLogic Server</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1054928"></A>
<A href="alerts.xml#id(17057)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
cts:reverse-query Constructor</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1053738"></A>
<A href="alerts.xml#id(95161)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
XML Serialization of cts:query Constructors</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1054047"></A>
<A href="alerts.xml#id(48531)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Security Considerations of Alerting Applications</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059682"></A>
<A href="alerts.xml#id(20177)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Indexes for Reverse Queries</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059687"></A>
<A href="alerts.xml#id(13356)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Alerting API</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059691"></A>
<A href="alerts.xml#id(74899)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Alerting Sample Application</Hyperlink>
</A></Body-bullet>
<Heading-2>
<A ID="pgfId-1054048"></A>
<A ID="29203"></A>
Overview of Alerting Applications in MarkLogic Server</Heading-2>
<Body>
<A ID="pgfId-1055449"></A>
An <Emphasis>
alerting application</Emphasis>
 is used to notify users when new content is available that matches a predefined (and usually stored) query. MarkLogic Server includes several infrastructure components that you can use to create alerting applications that have very flexible features and perform and scale to very large numbers of stored queries.</Body>
<Body>
<A ID="pgfId-1059030"></A>
MarkLogic Server ships with a sample alerting application, which uses the Alerting API. The sample application has all of the low-level components needed in many enterprise-class alerting applications, but it is packaged in a sample application with a user interface designed to demonstrate the functionality of an alert application; your own applications would likely have a very different and more powerful user interface. Also, the sample application is for demonstration purposes only, and is not designed to be put into production; see the <code>
samples-license.txt</code>
 file in the <code>
&lt;</code>
<Emphasis>
marklogic-dir</Emphasis>
<code>
&gt;/Samples</code>
 directory for more information. If you do not care about understanding the low-level components of an alerting application, you can skip to the sections of this chapter about the Alerting API and the sample application, <A href="alerts.xml#id(13356)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Alerting API' on page&#160;122</A> and <A href="alerts.xml#id(74899)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Alerting Sample Application' on page&#160;129</A>.</Body>
<Body>
<A ID="pgfId-1059007"></A>
The heart of the components for alerting applications is the ability to create <Emphasis>
reverse queries</Emphasis>
. A reverse query (<code>
cts:reverse-query</code>
) is a <code>
cts:query</code>
 that returns true if the node supplied to the reverse query would match a query if that query were run in a search. For more details about <code>
cts:reverse-query</code>
, see <A href="alerts.xml#id(17057)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'cts:reverse-query Constructor' on page&#160;120</A>.</Body>
<Body>
<A ID="pgfId-1059008"></A>
Alerting applications use reverse queries and several other components, including serialized <code>
cts:query</code>
 constructors, reverse query indexes, MarkLogic Server security components, the Alert&#160;API, Content Processing Framework domains and pipelines, and triggers.</Body>
<Note>
<A ID="pgfId-1059101"></A>
Alerting applications require a valid alerting license key. The license key is required to use the reverse index and to use the Alerting API.</Note>
<Heading-2>
<A ID="pgfId-1059009"></A>
<A ID="17057"></A>
cts:reverse-query Constructor</Heading-2>
<Body>
<A ID="pgfId-1058964"></A>
The <code>
cts:reverse-query</code>
 constructor is used in a <code>
cts:query</code>
 expression. It returns true for <code>
cts:query</code>
 nodes that match an input. For example, consider the following:</Body>
<Code>
<A ID="pgfId-1059323"></A>
let $node := &lt;a&gt;hello there&lt;/a&gt;
let $query := &lt;xml-element&gt;{cts:word-query(&quot;hello&quot;)}&lt;/xml-element&gt;
return
cts:contains($query, cts:reverse-query($node))
(: returns true :)</Code>
<Body>
<A ID="pgfId-1059311"></A>
This query returns <code>
true</code>
 because the <code>
cts:query</code>
 in <code>
$query</code>
 would match <code>
$node</code>
. In concept, the <code>
cts:reverse-query</code>
 constructor is the opposite of the other <code>
cts:query</code>
 constructors; while the other <code>
cts:query</code>
 constructors match documents to queries, the <code>
cts:reverse-query</code>
 constructor matches queries to documents. This functionality is the heart of an alerting application, as it allows you to efficiently run searches that return all queries that, if they were run, would match a given node.</Body>
<Body>
<A ID="pgfId-1059309"></A>
The <code>
cts:reverse-query</code>
 constructor is fully composable; you can combine the <code>
cts:reverse-query</code>
 constructor with other constructors, just like you can any other <code>
cts:query</code>
 constructor. The Alerting API abstracts the <code>
cts:reverse-query</code>
 constructor from the developer, as it generates any needed reverse queries. For details about how <code>
cts:query</code>
 constructors work, see <A href="cts_query.xml#id(51991)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Composing cts:query Expressions' on page&#160;56</A>.</Body>
<Heading-2>
<A ID="pgfId-1058963"></A>
<A ID="95161"></A>
XML Serialization of cts:query Constructors</Heading-2>
<Body>
<A ID="pgfId-1059219"></A>
A <code>
cts:query</code>
 expression is used in a search to specify what to search for. A <code>
cts:query</code>
 expression can be very simple or it can be arbitrarily complex. In order to store <code>
cts:query</code>
 expressions, MarkLogic Server has an XML representation of a <code>
cts:query</code>
. Alerting applications store the serialized XML representation or <code>
cts:query</code>
 expressions and index them with the reverse index. This provides fast and scalable answers to searches that ask 'what queries match this document.' Storing the XML representation of a <code>
cts:query</code>
 in a database is one of the components of an alerting application. The Alerting API abstracts the XML serialization from the developer. For more details about serializing a <code>
cts:query</code>
 to XML, see the <A href="cts_query.xml#id(11229)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
XML Serializations of cts:query Constructors</Hyperlink>
</A> section of the chapter <A href="cts_query.xml#id(51991)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Composing cts:query Expressions' on page&#160;56</A>.</Body>
<Heading-2>
<A ID="pgfId-1055452"></A>
<A ID="48531"></A>
Security Considerations of Alerting Applications</Heading-2>
<Body>
<A ID="pgfId-1059138"></A>
Alerting applications typically allow individual users to create their own criteria for being alerted, and therefore there are some inherent security requirements in alerting applications. For example, you don't want everyone to be alerted when a particular user's alerting criteria is met, you only want that particular user alerted. This section describes some of the security considerations and includes the following parts:</Body>
<Body-bullet>
<A ID="pgfId-1059139"></A>
<A href="alerts.xml#id(48272)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Alert Users, Alert Administrators, and Controlling Access</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059171"></A>
<A href="alerts.xml#id(47303)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Predefined Roles for Alerting Applications</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1059137"></A>
<A ID="48272"></A>
Alert Users, Alert Administrators, and Controlling Access</Heading-3>
<Body>
<A ID="pgfId-1059153"></A>
Because there is both a need to manage an alerting application and a need for users of the alerting application to have some ability to perform actions on the database, alerting applications need to manage security. Users of an alerting application need to run some queries that they might not be privileged to run. For example, they need to look at configuration information in a controlled way. To manage this, alerting applications can use amps to allow users to perform operations for which they do not have privileges by providing the needed privileges <Emphasis>
only</Emphasis>
 in the context of the alerting application. For details about amps and the MarkLogic Server security model, see the <Emphasis>
Understanding and Using Security Guide</Emphasis>
 guide.</Body>
<Body>
<A ID="pgfId-1059717"></A>
The Alerting API, along with the built-in roles <code>
alert-admin</code>
 and <code>
alert-user</code>
, abstracts all of the complex security logic so you can create a applications that properly deal with security, but without having to manage the security yourself. </Body>
<Heading-3>
<A ID="pgfId-1059152"></A>
<A ID="47303"></A>
Predefined Roles for Alerting Applications</Heading-3>
<Body>
<A ID="pgfId-1059128"></A>
There are two pre-defined roles designed for use in alerting applications that are built using the Alerting API, as well as some internal roles that the Alerting API uses:</Body>
<Body-bullet>
<A ID="pgfId-1059123"></A>
<A href="alerts.xml#id(92840)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Alert-Admin Role</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059127"></A>
<A href="alerts.xml#id(53275)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Alert-User Role</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059793"></A>
<A href="alerts.xml#id(38646)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Roles For Internal Use Only</Hyperlink>
</A></Body-bullet>
<Heading-4>
<A ID="pgfId-1059122"></A>
<A ID="92840"></A>
Alert-Admin Role</Heading-4>
<Body>
<A ID="pgfId-1059732"></A>
The <code>
alert-admin</code>
 role is designed to give administrators of an alerting applications all of the privileges that are needed to create configurations (alert configs) with the Alerting API. It has a significant amount of privileges, including the ability to run code as any user that has a rule, so only trusted users (users who are assumed to be non-hostile, appropriately trained, and follow proper administrative procedures) should be granted the <code>
alert-admin</code>
 role. Assign the <code>
alert-admin</code>
 role to administrators of your alerting application.</Body>
<Heading-4>
<A ID="pgfId-1059794"></A>
<A ID="53275"></A>
Alert-User Role</Heading-4>
<Body>
<A ID="pgfId-1059136"></A>
The <code>
alert-user</code>
 role is a minimally privileged role. It is used in the Alerting API to allow regular alert users (as opposed to <code>
alert-admin</code>
 users) to be able to execute code in the Alerting API. Some of that code needs to read and update documents used by the alerting application (configuration files, rules, and so on), and this role provides a mechanism for the Alerting API to give the access needed (and no more access) to users of an alerting application. </Body>
<Body>
<A ID="pgfId-1059282"></A>
The <code>
alert-user</code>
 role only has privileges that are used by the Alerting API; it does not provide execute privileges to any functions outside the scope of the Alerting API. The Alerting API uses the <code>
alert-user</code>
 role as a mechanism to amp more privileged operations in a controlled way. It is therefore reasonably safe to assign this role to any user whom you trust to use your alerting application.</Body>
<Heading-4>
<A ID="pgfId-1059798"></A>
<A ID="38646"></A>
Roles For Internal Use Only</Heading-4>
<Body>
<A ID="pgfId-1059805"></A>
There are also two other roles used by the Alerting API which you should not explicitly grant to any user or role: <code>
alert-internal</code>
 and <code>
alert-execution</code>
. These roles are used to amp special privileges within the context of certain functions of the Alerting API, and giving these roles to any users would give them privileges on the system that you might not want them to have; do not grant these roles to any users.</Body>
<Heading-2>
<A ID="pgfId-1059129"></A>
<A ID="20177"></A>
Indexes for Reverse Queries</Heading-2>
<Body>
<A ID="pgfId-1059250"></A>
You enable or disable the reverse query index in the database configuration by setting the <code>
fast reverse searches</code>
 index setting to <code>
true</code>
:</Body>
<Body>
<A ID="pgfId-1059251"></A>
<IMAGE xml:link="simple" href="images/reverse-searches.gif" show="embed" actuate="auto"/>
</Body>
<Body>
<A ID="pgfId-1059259"></A>
The <code>
fast reverse searches</code>
 index speeds up searches that use <code>
cts:reverse-query</code>
. For alerting applications to scale to large numbers of rules, you should enable fast reverse searches. </Body>
<Note>
<A ID="pgfId-1059742"></A>
Alerting applications require a valid alerting license key. The license key is required to use the reverse index and to use the Alerting API.</Note>
<Heading-2>
<A ID="pgfId-1059253"></A>
<A ID="13356"></A>
Alerting API</Heading-2>
<Body>
<A ID="pgfId-1054927"></A>
The Alerting API is designed to help you build a robust alerting application. The API handles the details for security in the application, as well as provides mechanisms to set up all of the components of an alerting application. It is designed to make it easy to use triggers and CPF to keep the state of documents being alerted. This section describes the Alerting API and includes the following parts:</Body>
<Body-bullet>
<A ID="pgfId-1059534"></A>
<A href="alerts.xml#id(20001)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Alerting API Concepts</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059542"></A>
<A href="alerts.xml#id(39130)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Using the Alerting API</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059759"></A>
<A href="alerts.xml#id(60506)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Using CPF With an Alerting Application</Hyperlink>
</A></Body-bullet>
<Body>
<A ID="pgfId-1060592"></A>
The Alerting API is implemented as an XQuery library module. For the individual function signatures and descriptions, see the <Emphasis>
MarkLogic XQuery and XSLT Function Reference</Emphasis>
.</Body>
<Heading-3>
<A ID="pgfId-1059515"></A>
<A ID="20001"></A>
Alerting API Concepts</Heading-3>
<Body>
<A ID="pgfId-1059516"></A>
There are three main concepts to understand when using the Alerting API:</Body>
<Body-bullet>
<A ID="pgfId-1059413"></A>
<A href="alerts.xml#id(95589)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Alert Config</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059501"></A>
<A href="alerts.xml#id(34775)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Actions to Execute When an Alert Fires</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059231"></A>
<A href="alerts.xml#id(71547)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Rules For Firing Alerts</Hyperlink>
</A></Body-bullet>
<Heading-4>
<A ID="pgfId-1059428"></A>
<A ID="95589"></A>
Alert Config</Heading-4>
<Body>
<A ID="pgfId-1059432"></A>
The alert <Emphasis>
config</Emphasis>
 is the XML representation of an alerting configuration for an alerting application. Typically, an alerting application needs only one alert config, although you can have many if you need them. The Alerting API defines an XML representation of an alert config, and that XML representation is returned from the <code>
alert:make-config</code>
 function. You then persist the config in the database using the <code>
alert:config-insert</code>
 function. The Alerting API also has setter and getter functions to manipulate an alert config. The alert config is designed to be created and updated by an administrator of the alerting application, and therefore users who manipulate the alert config must have the <code>
alert-admin</code>
 role. </Body>
<Heading-4>
<A ID="pgfId-1060710"></A>
<A ID="34775"></A>
Actions to Execute When an Alert Fires</Heading-4>
<Body>
<A ID="pgfId-1060711"></A>
An <Emphasis>
action</Emphasis>
 is some XQuery code to execute when an alert occurs. An action could be to update a document in the database, to send an email, or whatever makes sense for your application. The action is an XQuery main module, and the Alerting API defines an XML representation of an action, and that XML representation is returned from the <code>
alert:make-action</code>
 function. The action XML representation points to the XQuery main module that performs the action. You then persist this XML representation of an alert action in the database using the <code>
alert:action-insert</code>
 function. The Alerting API also has setter and getter functions to manipulate an alert action. Alert actions are designed to be created and updated by an administrator of the alerting application, and therefore users who manipulate alert actions must have the <code>
alert-admin</code>
 role.</Body>
<Body>
<A ID="pgfId-1060922"></A>
Alert actions are invoked or spawned with <code>
alert:invoke-matching-actions</code>
 or <code>
alert:spawn-matching-actions</code>
, and the actions can accept the following external variables:</Body>
<Code>
<A ID="pgfId-1060923"></A>
declare namespace alert = &quot;http://marklogic.com/xdmp/alert&quot;;

declare variable $alert:config-uri as xs:string external;
declare variable $alert:doc as node() external;
declare variable $alert:rule as element(alert:rule) external;
declare variable $alert:action as element(alert:action) external;</Code>
<Body>
<A ID="pgfId-1060897"></A>
These external variables are available to the action if it needs to use them. To use the variables, the above variable declarations must be in the prolog of the action module that is invoked or spawned.</Body>
<Heading-4>
<A ID="pgfId-1059433"></A>
<A ID="71547"></A>
Rules For Firing Alerts</Heading-4>
<Body>
<A ID="pgfId-1059437"></A>
A <Emphasis>
rule</Emphasis>
 is the criteria for which a user is alerted combined with a reference to an action to perform if that criteria is met. For example, if you are interested in any new or changed content that matches a search for <code>
jelly beans</code>
, you can define a rule that fires an alert when a new or changed document comes in that has the term <code>
jelly beans</code>
 in it. This might translate into the following <code>
cts:query</code>
:</Body>
<Code>
<A ID="pgfId-1059477"></A>
cts:word-query(&quot;jelly beans&quot;)</Code>
<Body>
<A ID="pgfId-1059483"></A>
The rule also has an action associated with it, which will be performed if the document matches the query. Alerting applications are designed to support very large numbers of rules with fast, scalable performance. The amount of work for each rule also depends on what the action is for each rule. For example, if you have an application that has an action to send an email for each matching rule, you must consider the impact of sending all of those emails if you have large numbers of matching rules.</Body>
<Body>
<A ID="pgfId-1059553"></A>
The Alerting API defines an XML representation of a rule, and that XML representation is returned from the <code>
alert:make-rule</code>
 function. You then persist the rule in the database using the <code>
alert:rule-insert</code>
 function. Rules are designed to be created and updated by regular users of the alerting application. The Alerting API also has setter and getter functions to manipulate an alert rule. Because those regular users who create rules must have the needed privileges and permissions to perform certain tasks (such as reading and updating certain documents), a minimal set of privileges are required to insert a rule. Therefore users who create rules in an alerting application must have the <code>
alert-user</code>
 role, which has a minimum set of privileges. </Body>
<Heading-3>
<A ID="pgfId-1059529"></A>
<A ID="39130"></A>
Using the Alerting API</Heading-3>
<Body>
<A ID="pgfId-1059533"></A>
Once you understand the concepts described in the previous section, using the Alerting API is straight-forward. This section describes the following details of using the Alerting API:</Body>
<Body-bullet>
<A ID="pgfId-1059816"></A>
<A href="alerts.xml#id(58011)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Set Up the Configuration (User With alert-admin Role)</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059820"></A>
<A href="alerts.xml#id(66641)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Set Up Actions (User With alert-admin Role)</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059821"></A>
<A href="alerts.xml#id(52543)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Create Rules (Users With alert-user Role)</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059872"></A>
<A href="alerts.xml#id(46002)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Run the Rules Against Content</Hyperlink>
</A></Body-bullet>
<Heading-4>
<A ID="pgfId-1059822"></A>
<A ID="58011"></A>
Set Up the Configuration (User With alert-admin Role)</Heading-4>
<Body>
<A ID="pgfId-1059826"></A>
The first step in using the Alerting API is to create an alert config. For details about an alert config, see <A href="alerts.xml#id(95589)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Alert Config' on page&#160;123</A>. You should create the alert config as an alerting application administrator (a user with the <code>
alert-admin</code>
 role or the <code>
admin</code>
 role). The following sample code demonstrates how to create an alert config:</Body>
<Code>
<A ID="pgfId-1059887"></A>
(: run this a user with the alert-admin role :)
xquery version &quot;1.0-ml&quot;;
import module namespace alert = &quot;http://marklogic.com/xdmp/alert&quot; 
		  at &quot;/MarkLogic/alert.xqy&quot;;

let $config := alert:make-config(
      &quot;my-alert-config-uri&quot;,
      &quot;My Alerting App&quot;,
      &quot;Alerting config for my app&quot;,
        &lt;alert:options/&gt; )
return
alert:config-insert($config)</Code>
<Heading-4>
<A ID="pgfId-1059828"></A>
<A ID="66641"></A>
Set Up Actions (User With alert-admin Role)</Heading-4>
<Body>
<A ID="pgfId-1059871"></A>
An alerting application administrator must also set up actions to be performed when an alert occurs. An action is an XQuery main module and can be arbitrarily simple or arbitrarily complex. For details about alert actions, see <A href="alerts.xml#id(34775)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Actions to Execute When an Alert Fires' on page&#160;123</A>. </Body>
<Body>
<A ID="pgfId-1059924"></A>
In practice, setting up the actions will require a good understanding of what you are trying to accomplish in an alerting application. The following is an extremely simple action that sends a log message to the <code>
ErrorLog.txt</code>
 file. To create this action, create an XQuery document under your App Server root with the following content:</Body>
<Code>
<A ID="pgfId-1059929"></A>
xdmp:log(fn:concat(xdmp:get-current-user(), &quot; was alerted&quot;))</Code>
<Body>
<A ID="pgfId-1059944"></A>
For example, if the App Server in which your alerting application is running has a root of <code>
/space/alert</code>
, put this XQuery document in <code>
/space/alert/log.xqy</code>
. </Body>
<Body>
<A ID="pgfId-1060232"></A>
For another example of an alert action, see the <code>
&lt;</code>
<Emphasis>
marklogic-dir</Emphasis>
<code>
&gt;/Modules/alert/log.xqy</code>
 XQuery file. Alert actions can perform any action you can write in XQuery.</Body>
<Body>
<A ID="pgfId-1059977"></A>
You also need to set up the action with the Alerting API, as in the following example (run this as a user with the <code>
alert-admin</code>
 role):</Body>
<Code>
<A ID="pgfId-1059990"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace alert = &quot;http://marklogic.com/xdmp/alert&quot; 
		  at &quot;/MarkLogic/alert.xqy&quot;;

let $action := alert:make-action(
    &quot;xdmp:log&quot;, 
    &quot;log to ErrorLog.txt&quot;,
    xdmp:modules-database(),
    xdmp:modules-root(), 
    &quot;/alert-action.xqy&quot;,
    &lt;alert:options&gt;put anything here&lt;/alert:options&gt; )
return
alert:action-insert(&quot;my-alert-config-uri&quot;, $action)</Code>
<Heading-4>
<A ID="pgfId-1059868"></A>
<A ID="52543"></A>
Create Rules (Users With alert-user Role)</Heading-4>
<Body>
<A ID="pgfId-1059954"></A>
You should set up the alerting application so that regular users of the application can create rules. You might have a form, for example, to assist users in creating the rules. The following is the basic code needed to set up a rule. Note that your code will probably be considerably more complex, as this code has no user interface. This code simply creates a rule with the action described above and associates a <code>
cts:query</code>
 with the rule. Run this code as a user with the <code>
alert-user</code>
 role.</Body>
<Code>
<A ID="pgfId-1060043"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace alert = &quot;http://marklogic.com/xdmp/alert&quot; 
		  at &quot;/MarkLogic/alert.xqy&quot;;

let $rule := alert:make-rule(
    &quot;simple&quot;, 
    &quot;hello world rule&quot;,
    0, (: equivalent to xdmp:user(xdmp:get-current-user()) :)
    cts:word-query(&quot;hello world&quot;),
    &quot;xdmp:log&quot;,
    &lt;alert:options/&gt; )
return
alert:rule-insert(&quot;my-alert-config-uri&quot;, $rule)</Code>
<Note>
<A ID="pgfId-1059970"></A>
If your action performs any privileged activities, including reading or creating documents in the database, you will need to add the appropriate execute privileges and URI privileges to users running the application.</Note>
<Heading-4>
<A ID="pgfId-1060574"></A>
<A ID="46002"></A>
Run the Rules Against Content</Heading-4>
<Body>
<A ID="pgfId-1060575"></A>
To make the application fire alerts (that is, execute the actions for rules), you must run the rules against some content. You can do this in several ways, including setting up triggers with the Alerting API (<code>
alert:create-triggers</code>
), using CPF and the Alerting pipeline, or creating your own mechanism to run the rules against content. </Body>
<Body>
<A ID="pgfId-1060067"></A>
To run the rules manually, you can use the <code>
alert:spawn-matching-actions</code>
 or <code>
alert:invoke-matching-actions</code>
 APIs. These are useful to run alerts in any context, either within an application or as an easy way to test your rules. The <code>
alert:spawn-matching-actions</code>
 is good when you have many alerts that might fire at once, because it will spawn the actions to the task server to execute asynchronously. The <code>
alert:invoke-matching-actions</code>
 API runs the action immediately, so be careful using this if there can be large numbers of matching actions, as they will all be run in the same context. You can run these APIs as any user, and whether or not they produce an action will depend upon what each rule's owner has permissions to see. The following is a very simple example that fires the previously created alert:</Body>
<Code>
<A ID="pgfId-1060093"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace alert = &quot;http://marklogic.com/xdmp/alert&quot; 
  at &quot;/MarkLogic/alert.xqy&quot;;

alert:invoke-matching-actions(&quot;my-alert-config-uri&quot;, 
      &lt;doc&gt;hello world&lt;/doc&gt;, &lt;options/&gt;)</Code>
<Body>
<A ID="pgfId-1060088"></A>
If you created the config, action, and rule as described in the previous sections, this logs the following to your <code>
ErrorLog.txt</code>
 file when running the code as a user named <code>
some-user</code>
 who has the <code>
alert-user</code>
 role (assuming this user created the rule):</Body>
<Code>
<A ID="pgfId-1060112"></A>
some-user was alerted</Code>
<Note>
<A ID="pgfId-1060180"></A>
If you have very large numbers of alerts, and if the actions for your rules are resource-intensive, invoking or spawning matching actions can produce a significant amount of query activity for your system. This is OK, as that is the purpose of an alerting application, but you should plan your resources accordingly.</Note>
<Heading-3>
<A ID="pgfId-1060829"></A>
<A ID="60506"></A>
Using CPF With an Alerting Application</Heading-3>
<Body>
<A ID="pgfId-1059764"></A>
It is a natural fit to use alerting applications built using the Alerting API with the Content Processing Framework (CPF). CPF is designed to keep state for documents, so it is easy to use CPF to keep track of when a document in a particular scope is created or updated, and then perform some action on that document. For alerting applications, that action involves running a reverse query on the changed documents and then firing alerts for any matching rules (the Alerting API abstracts the reverse query from the developer). </Body>
<Body>
<A ID="pgfId-1060220"></A>
To simplify using CPF with alerting applications, there is a pre-built pipeline for alerting. The pipeline is designed to be used with an alerting application built with the Alerting API. This Alerting CPF application will run alerts on all new and changed content within the scope of the CPF domain to which the Alerting pipeline is attached.</Body>
<Body>
<A ID="pgfId-1060741"></A>
If you use the Alerting pipelines with any of the other pipelines included with MarkLogic Server (for example, the conversion pipelines and/or the modular documents pipelines), the Alerting pipeline is defined to have a priority such that it runs after all of the other pipelines have completed their processing. This way, alerts happen on the final view of content that runs through a pipeline process. If you have any custom pipelines that you use with the Alerting pipeline, consider adding priorities to those pipelines so the alerting occurs in the order in which you are expecting. </Body>
<Body>
<A ID="pgfId-1060263"></A>
To set up a CPF application that uses alerting, perform the following steps:</Body>
<Number1>
<A ID="pgfId-1060253"></A>
Enable the reverse index for your database, as described in <A href="alerts.xml#id(20177)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Indexes for Reverse Queries' on page&#160;122</A>.</Number1>
<NumberList>
<Number>
<A ID="pgfId-1060585"></A>
Set up the alert config and alert actions as a user with the <code>
alert-admin</code>
 role, as described in <A href="alerts.xml#id(58011)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Set Up the Configuration (User With alert-admin Role)' on page&#160;125</A> and <A href="alerts.xml#id(66641)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Set Up Actions (User With alert-admin Role)' on page&#160;125</A>.</Number>
<Number>
<A ID="pgfId-1060269"></A>
Set up an application to have users (with the <code>
alert-user</code>
 role) define rules, as described in <A href="alerts.xml#id(52543)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Create Rules (Users With alert-user Role)' on page&#160;126</A>.</Number>
<Number>
<A ID="pgfId-1059765"></A>
Install Content Processing in your database, if it is not already installed (Databases &gt; <Emphasis>
database_name</Emphasis>
 &gt; Content Processing &gt; Install tab).</Number>
<Number>
<A ID="pgfId-1060293"></A>
Set up the <code>
domain scope</code>
 for a domain.</Number>
<Number>
<A ID="pgfId-1061321"></A>
Attach the Alerting pipeline and the Status Change Handling pipeline to the domain. You can also attach any other pipelines you need to the domain (for example, the various conversion pipelines).</Number>
<Number>
<A ID="pgfId-1061329"></A>
Use either the <code>
alert:config-set-cpf-domain-names</code>
 or <code>
alert:config-set-cpf-domain-ids</code>
 function to notify the alerting configuration of the domain, so that the alerting action can determine what alerting configuration it is to use. </Number>
</NumberList>
<Body-indent>
<A ID="pgfId-1061366"></A>
For example, if your CPF domain's name is Default Documents, you could do the following.</Body-indent>
<Code>
<A ID="pgfId-1061331"></A>
alert:config-insert(
&#160;&#160;&#160;alert:config-set-cpf-domain-names(
&#160;&#160;&#160;&#160;&#160;&#160;alert:config-get($config-uri),
&#160;&#160;&#160;&#160;&#160;&#160;(&quot;Default Documents&quot;)))</Code>
<Note>
<A ID="pgfId-1061343"></A>
An alerting configuration can be used with multiple CPF domains, in which case you set a sequence of multiple domain names or IDs.</Note>
<Body>
<A ID="pgfId-1060203"></A>
Any new or updated content within the domain scope will cause all matching rules to fire their corresponding action. If you will have many alerts that are spawned to the task server, make sure the task server is configured appropriately for your machine. For example, if you are running on a machine that has 16 cores, you might want to raise the <code>
threads</code>
 setting for the task server to a higher number then the default of 4. What you set the <code>
threads</code>
 setting depends on what other work is going on your machine.</Body>
<EndList-root>
<A ID="pgfId-1059770"></A>
For details about CPF, see the <Emphasis>
Content Processing Framework Guide</Emphasis>
 guide.</EndList-root>
<Heading-2>
<A ID="pgfId-1059760"></A>
<A ID="74899"></A>
Alerting Sample Application</Heading-2>
<Body>
<A ID="pgfId-1058962"></A>
MarkLogic Server ships with a sample alerting application. The sample application uses the Alerting API, and has all of the low-level components needed in many enterprise-class alerting applications, but it is packaged in a sample application with a user interface designed to demonstrate the functionality of an alert application; your own applications would likely have a very different and more powerful user interface. This sample code is provided on an as-is basis; the sample code is not intended for production applications and is not supported. For details, including setup instructions, see the <code>
samples-license.txt</code>
 file in the <code>
&lt;</code>
<Emphasis>
marklogic-dir</Emphasis>
<code>
&gt;/Samples</code>
 directory and the <code>
README.txt</code>
 file in the <code>
&lt;</code>
<Emphasis>
marklogic-dir</Emphasis>
<code>
&gt;/Samples/alerting</code>
 directory.</Body>
</XML>
