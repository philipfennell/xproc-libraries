<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="infoAPI.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1062302"></A>
<A ID="29470"></A>
Scripting Information Studio Tasks</Heading-1>
<pagenum>
<A ID="pgfId-1074752"></A>
56</pagenum>
<Body>
<A ID="pgfId-1074753"></A>
You can use the <code>
info</code>
 API to programmatically accomplish the same tasks as described for the Information Studio interface in chapters <A href="database.xml#id(87773)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating and Configuring Databases' on page&#160;9</A> and <A href="loadingContent.xml#id(80580)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating and Configuring Flows' on page&#160;20</A>. </Body>
<Body>
<A ID="pgfId-1074742"></A>
This chapter describes:</Body>
<Body-bullet>
<A ID="pgfId-1067547"></A>
<A href="infoAPI.xml#id(20095)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
The info API</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1067552"></A>
<A href="infoAPI.xml#id(13001)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a Database</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1067574"></A>
<A href="infoAPI.xml#id(36182)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Loading Data into Databases</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1067645"></A>
<A href="infoAPI.xml#id(84299)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Establishing Ingestion Policies</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1067667"></A>
<A href="infoAPI.xml#id(45249)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Applying Ingestion Policies</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1069612"></A>
<A href="infoAPI.xml#id(46084)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Ingestion Policies and Multiple Load Operations</Hyperlink>
</A></Body-bullet>
<Heading-2>
<A ID="pgfId-1073982"></A>
<A ID="20095"></A>
The info API</Heading-2>
<Body>
<A ID="pgfId-1073983"></A>
The <code>
info</code>
 API provides functions that allow you to easily create databases and load them with data. The <code>
info</code>
 API functions that manage databases are built on top of the <code>
admin</code>
 API described in the <Emphasis>
Scripting Administrative Tasks Guide</Emphasis>
. In addition, the <code>
info</code>
 API provides functions that greatly simplify and enhance database load operations.</Body>
<Heading-2>
<A ID="pgfId-1073705"></A>
<A ID="13001"></A>
Creating a Database</Heading-2>
<Body>
<A ID="pgfId-1063710"></A>
The <code>
info:database-create</code>
 function greatly simplifies the task of programmatically creating a forests and databases. The task of creating forests and databases using the <code>
admin</code>
 API is described in <A href="../AdminAPI/configure.xml#id(26239)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating and Configuring Forests and Databases</Hyperlink>
</A> in the <Emphasis>
Scripting Administrative Tasks Guide</Emphasis>
. When using the <code>
info:database-create</code>
 function, you are trading the finer-level control provided by the <code>
admin</code>
 functions for simplicity.</Body>
<Body>
<A ID="pgfId-1064015"></A>
For example, the following function creates a new database, named <code>
Sample-Database</code>
, with two forests per host. By default, the database is located in the <code>
Default</code>
 group and the forest data is placed in the default location (<code>
/MarkLogic/Data/Forests</code>
) on each host in the <code>
Default</code>
 group. Each forest is given a name like <code>
Sample-Database-&lt;unique-id&gt;</code>
, where <code>
&lt;unique-id&gt; </code>
is a unique number generated by the API. The <code>
Sample-Database </code>
database is configured with the default security and schema databases, <code>
Security</code>
 and <code>
Schemas</code>
.</Body>
<Code>
<A ID="pgfId-1063799"></A>
xquery version &quot;1.0-ml&quot;; </Code>
<Code>
<A ID="pgfId-1063907"></A>
import module namespace info = 
&#160;&#160;&#160;&quot;http://marklogic.com/appservices/infostudio&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/appservices/infostudio/info.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1063922"></A>
info:database-create(&quot;Sample-Database&quot;, 2)</Code>
<Body>
<A ID="pgfId-1064438"></A>
The <code>
info:database-create</code>
 function provides optional parameters to control the location of your forest data, as well as which databases to use to manage security, schema and trigger data. The function also accepts a <code>
group</code>
 parameter. The <code>
info</code>
 API determines which hosts are in the group and creates the specified number of forests for each host in the group. </Body>
<Body>
<A ID="pgfId-1064196"></A>
For example, the following function creates a <code>
Sample-Database</code>
 with three forests per host. The database is located in the <code>
MyGroup</code>
 group and the forest data is placed in the <code>
c:\myData</code>
 directory on each host in the <code>
MyGroup</code>
 group. The security database is <code>
MySecurity</code>
, the schema database is <code>
MySchemas</code>
 and the triggers database is <code>
MyTriggers</code>
.</Body>
<Code>
<A ID="pgfId-1064098"></A>
xquery version &quot;1.0-ml&quot;; </Code>
<Code>
<A ID="pgfId-1064099"></A>
import module namespace info = 
&#160;&#160;&#160;&quot;http://marklogic.com/appservices/infostudio&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/appservices/infostudio/info.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1064100"></A>
info:database-create(
&#160;&#160;&quot;Sample-Database&quot;,
&#160;&#160;3,
&#160;&#160;&quot;MyGroup&quot;,
&#160;&#160;&quot;c:\myData&quot;,
&#160;&#160;&quot;MySecurity&quot;,
&#160;&#160;&quot;MySchemas&quot;,
&#160;&#160;&quot;MyTriggers&quot;)</Code>
<Heading-2>
<A ID="pgfId-1068220"></A>
Configuring the Database Text Indexes</Heading-2>
<Body>
<A ID="pgfId-1068234"></A>
You can configure the database Text Indexes by means of the <code>
info:database-set-feature</code>
 function. This function allows you to configure the database in a manner similar to that described in <A href="database.xml#id(59091)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Configuring Text Indexes' on page&#160;13</A>.</Body>
<Body>
<A ID="pgfId-1068483"></A>
For example, the following query enables both Wildcards and Positions:</Body>
<Code>
<A ID="pgfId-1068259"></A>
xquery version &quot;1.0-ml&quot;; </Code>
<Code>
<A ID="pgfId-1068378"></A>
import module namespace info = 
&#160;&#160;&#160;&quot;http://marklogic.com/appservices/infostudio&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/appservices/infostudio/info.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1068396"></A>
let $settings :=
&lt;settings xmlns=&quot;http://marklogic.com/appservices/infostudio&quot;&gt;
&#160;&#160;&lt;wildcard&gt;true&lt;/wildcard&gt;
&#160;&#160;&lt;position&gt;true&gt;&lt;/position&gt;
&#160;&#160;&lt;reverse&gt;false&lt;/reverse&gt;
&lt;/settings&gt; )</Code>
<Code>
<A ID="pgfId-1068410"></A>
return
&#160;&#160;info:database-set-feature(&quot;Sample-Database&quot;, $settings)</Code>
<Body>
<A ID="pgfId-1068504"></A>
The following table lists the possible elements in a database <code>
settings</code>
 node, as well as their purpose and possible values:</Body>
<TableAnchor>
<A ID="pgfId-1068672"></A>
</TableAnchor>
<TABLE>
<ROW>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1068507"></A>
Element</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1068509"></A>
Description</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1068511"></A>
Possible Values</CellHeading>
</TH>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1068513"></A>
<code>
wildcard</code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1068515"></A>
Enables Three Character Searches and Codepoint Word Lexicon indexing. Use this setting for more efficient wildcard searches on the documents in your database. </Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1068517"></A>
<code>
true
false</code>
</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1068519"></A>
<code>
position</code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1068523"></A>
Enables Word Positions indexing. Use this setting for more efficient phrase searches on the documents in your database.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1068957"></A>
<code>
true
false</code>
</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1068529"></A>
<code>
reverse</code>
</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1069541"></A>
Enables Fast Reverse Searches. Use this setting to index saved queries in order to speed up reverse query searches. This option requires a special license.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1068970"></A>
<code>
true
false</code>
</Body>
</CELL>
</ROW>
</TABLE>
<Heading-2>
<A ID="pgfId-1064383"></A>
<A ID="36182"></A>
Loading Data into Databases</Heading-2>
<Body>
<A ID="pgfId-1064395"></A>
The <code>
info</code>
 API allows you to script the operations described in <A href="loadingContent.xml#id(80580)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating and Configuring Flows' on page&#160;20</A>. </Body>
<Body>
<A ID="pgfId-1067623"></A>
When a database load operation is initiated, Information Studio immediately returns a ticket URI. You can pass the ticket URI to the <code>
info:ticket</code>
 function to return the contents of the ticket, which includes the status of the load and any errors encountered. Load operations are asynchronous, so the ticket is returned before the load operation has completed. Information Studio updates the status of the ticket during the load operation. Initially, the ticket status is ‘active.' When the load has completed, the ticket status is updated to ‘completed.' Under special circumstances, other statuses can be set on the ticket. These will be described later in this chapter.</Body>
<Body>
<A ID="pgfId-1064595"></A>
The simplest way to load data into the database is by calling the <code>
info:load</code>
 function. The following example loads the files from the <code>
C:\mydocs</code>
 directory into the <code>
Sample-Database</code>
:</Body>
<Code>
<A ID="pgfId-1064700"></A>
xquery version &quot;1.0-ml&quot;; </Code>
<Code>
<A ID="pgfId-1064797"></A>
import module namespace info = 
&#160;&#160;&#160;&quot;http://marklogic.com/appservices/infostudio&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/appservices/infostudio/info.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1064817"></A>
info:load(&quot;C:\mydocs&quot;, (), (), &quot;Sample-Database&quot;)</Code>
<Body>
<A ID="pgfId-1066845"></A>
The <code>
info:load</code>
 function also allows you to specify an Ingestion Policy and/or deltas for an Ingestion Policy to fine-tune how documents are to be loaded into the database. Ingestion Policies are discussed in <A href="infoAPI.xml#id(84299)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Establishing Ingestion Policies' on page&#160;48</A>.</Body>
<Heading-2>
<A ID="pgfId-1064762"></A>
<A ID="84299"></A>
Establishing Ingestion Policies</Heading-2>
<Body>
<A ID="pgfId-1065088"></A>
When using the Information Studio interface, you establish an Ingestion Policy by means of the Ingestion Settings described in <A href="loadingContent.xml#id(11451)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Configuring Ingestion Options' on page&#160;26</A>. This section describes how to programmatically establish and use Ingestion Policies.</Body>
<Body>
<A ID="pgfId-1065067"></A>
Ingestion Policies control which documents are loaded into the database and to what URI location, as well as the permissions, collections, and format type to be assigned to each document. If you are bulk loading a large number of files into a database, you may want to break the load operation into multiple transactions. Ingestion policies allow you to control the maximum number of files to be loaded during a single transaction. Ingestion policies also allow you to control whether to overwrite existing files in the database or generate an error when an attempt is made to overwrite an existing file.</Body>
<Body>
<A ID="pgfId-1064769"></A>
You can create a ‘default' policy to be used in the event no policy is specified for a load operation. When you set a policy, you need only specify the options you want to change. Information Studio will then merge your changes with the global default policy settings.</Body>
<Body>
<A ID="pgfId-1064776"></A>
The following is an example of a simple ‘default' Ingestion Policy:</Body>
<Code>
<A ID="pgfId-1065143"></A>
let $policy :=
&lt;options name=&quot;default&quot; xmlns=&quot;http://marklogic.com/appservices/infostudio&quot;&gt;
&#160;&#160;&lt;collection&gt;http://marklogic.com/appservices/infostudio&lt;/collection&gt;
&#160;&#160;&lt;error-handling&gt;continue-with-warning&lt;/error-handling&gt;
&#160;&#160;&lt;fab-retention-duration&gt;P30D&lt;/fab-retention-duration&gt;
&#160;&#160;&lt;file-filter&gt;^[^\.]&lt;/file-filter&gt;
&#160;&#160;&lt;max-docs-per-transaction&gt;100&lt;/max-docs-per-transaction&gt;
&#160;&#160;&lt;overwrite&gt;overwrite&lt;/overwrite&gt;
&#160;&#160;&lt;ticket-retention-duration&gt;P30D&lt;/ticket-retention-duration&gt;
&#160;&#160;&lt;uri&gt;
&#160;&#160;&#160;&#160;&lt;literal&gt;/content&lt;/literal&gt;
&#160;&#160;&#160;&#160;&lt;filename/&gt;
&#160;&#160;&#160;&#160;&lt;literal&gt;.&lt;/literal&gt;
&#160;&#160;&#160;&#160;&lt;ext/&gt;
&#160;&#160;&lt;/uri&gt;
&lt;/options&gt;</Code>
<Body>
<A ID="pgfId-1067158"></A>
You can ‘set' the Ingestion Policy as the ‘default' policy by calling the <code>
info:policy-set</code>
 function, as follows:</Body>
<Code>
<A ID="pgfId-1067192"></A>
info:policy-set(&quot;default&quot;, $policy)</Code>
<Body>
<A ID="pgfId-1066810"></A>
The following table lists all of the possible elements in an Ingestion Policy, as well as their purpose and possible values:</Body>
<TableAnchor>
<A ID="pgfId-1065361"></A>
</TableAnchor>
<TABLE>
<ROW>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1065433"></A>
Element</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1065435"></A>
Description</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1065437"></A>
Possible Values and Default Value</CellHeading>
</TH>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065439"></A>
<code>
annotation</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065441"></A>
A description of the policy, or any other notation.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065443"></A>
Any string</Body>
<Body>
<A ID="pgfId-1074123"></A>
Default: None</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065445"></A>
<code>
overwrite</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065447"></A>
Specify how to manage files that already exist in the database.</Body>
<Body>
<A ID="pgfId-1066270"></A>
Specify <code>
overwrite</code>
 to overwrite existing files in the database; <code>
skip </code>
to not overwrite the files, but continue with the load, or <code>
error</code>
 to not overwrite the files and generate an error.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074131"></A>
<code>
overwrite
skip
error</code>
</Body>
<Body>
<A ID="pgfId-1065449"></A>
Default: <code>
overwrite</code>
</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065451"></A>
<code>
error-handling</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065453"></A>
How to handle load errors. Specify <code>
continue-with-warning</code>
 to continue the load or <code>
error</code>
 to abort the load when an error is encountered.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074144"></A>
<code>
continue-with-warning
error</code>
</Body>
<Body>
<A ID="pgfId-1065455"></A>
Default: <code>
continue-with-warning</code>
</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065457"></A>
<code>
collection</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065459"></A>
The URI of a collection. </Body>
<Body>
<A ID="pgfId-1074114"></A>
By default, any existing collections will be overridden by the specified collection. You can use the <code>
add</code>
 attribute to add the collection to any existing collections, rather than overriding them.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065461"></A>
The collection URI.</Body>
<Body>
<A ID="pgfId-1065733"></A>
Default: None</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065463"></A>
<code>
max-docs-per-transaction</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065465"></A>
The maximum number of documents to be ingested in a single transaction. If ingesting more than the maximum, the ingest operation will be scheduled as more than one transaction.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074172"></A>
Any <code>
xs:unsignedInt</code>
</Body>
<Body>
<A ID="pgfId-1065467"></A>
Default: <code>
100</code>
</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065469"></A>
<code>
file-filter</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1066141"></A>
The filter used to select the documents in the filesystem. This can be any XQuery regular expression. The default regular expression specifies all documents in the directory and its subdirectories except for those that start with a dot, such as <code>
.mydoc</code>
.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074185"></A>
Any valid XQuery regular expression</Body>
<Body>
<A ID="pgfId-1065473"></A>
Default: <code>
^[^\.]</code>
</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065475"></A>
<code>
repair</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1066167"></A>
Specify <code>
full</code>
 to attempt to repair malformed XML content on each document during ingestion. Specifying no value or <code>
none</code>
 will cause documents containing malformed XML content to be rejected with an error.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074198"></A>
<code>
none
full</code>
</Body>
<Body>
<A ID="pgfId-1065479"></A>
Default: None</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065481"></A>
<code>
format</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1066212"></A>
Ingest documents as a particular format, such as XML, Text, or Binary. No value indicates to ingest documents as any format. Documents that are not of the specified format will generate an error.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074211"></A>
<code>
xml
text
binary</code>
</Body>
<Body>
<A ID="pgfId-1065485"></A>
Default: None</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065487"></A>
<code>
default-namespace</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065489"></A>
Apply a default namespace to all the nodes that do not have an associated namespace.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074224"></A>
The namespace URI.</Body>
<Body>
<A ID="pgfId-1065491"></A>
Default: None</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065493"></A>
<code>
default-language</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1066155"></A>
Add an <code>
xml:lang</code>
 attribute to the root element node on all ingested documents to indicate they are written in a particular language, such as English or French. Default indicates to not tag ingested documents with an <code>
xml:lang</code>
 attribute.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074237"></A>
<code>
ar
de
en
es
fa
fr
it
ko
nl
pt
ru
zh
zh-Hant</code>
</Body>
<Body>
<A ID="pgfId-1065497"></A>
Default: None</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065499"></A>
<code>
uri</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065501"></A>
The URI structure for the ingested documents in the database. For a complete discussion, see <A href="loadingContent.xml#id(64817)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Configuring the URI Structure' on page&#160;38</A>.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074250"></A>
<code>
&lt;literal/&gt;
&lt;path @[strip-prefix]/&gt;
&lt;guid/&gt;
&lt;filename/&gt;
&lt;ext/&gt;</code>
</Body>
<Body>
<A ID="pgfId-1065503"></A>
Default: </Body>
<Body>
<A ID="pgfId-1074415"></A>
&lt;literal&gt;
&#160;&#160;&#160;/content
&lt;/literal&gt;
&lt;path/&gt;
&lt;literal&gt;/&lt;/literal&gt;
&lt;filename/&gt;
&lt;literal&gt;.&lt;/literal&gt;
&lt;ext/&gt;</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065505"></A>
<code>
encoding</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065507"></A>
Ingest documents as a particular encoding type, such as UTF-8, ASCII, and so on. See the <Emphasis>
Search Developer's Guide</Emphasis>
 for a list of character set encodings by language. All encodings will be translated into UTF-8 from the specified encoding. The string specified for the encoding option will be matched to an encoding name according to the Unicode Charset Alias Matching rules (http://www.unicode.org/reports/tr22/#Charset_Alias_Matching). Auto indicates to use an automatic encoding detector. If no encoding can be detected, the encoding defaults to UTF-8.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074263"></A>
A valid encoding type</Body>
<Body>
<A ID="pgfId-1065509"></A>
Default: <code>
UTF-8</code>
</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065511"></A>
<code>
filesize-limit-kb</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065513"></A>
Specifies the maximum size a file can be without generating a load error.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074276"></A>
<code>
xs:unsignedInt</code>
</Body>
<Body>
<A ID="pgfId-1065515"></A>
Default: None</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065517"></A>
<code>
permission</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065519"></A>
Specifies the permissions to set on the loaded documents. This is expressed in the form:</Body>
<CodeLeft>
<A ID="pgfId-1066541"></A>
<code>
&lt;permission&gt;
&#160;&#160;&lt;role&gt;</code>
<Emphasis>
role</Emphasis>
<code>
&lt;/role&gt; 
&#160;&#160;&lt;capability&gt;</code>
<Emphasis>
permission</Emphasis>
<code>
&lt;/capability&gt;
&lt;/permission&gt;</code>
</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1066452"></A>
Possible roles are:</Body>
<Body>
<A ID="pgfId-1069963"></A>
<code>
&#160;&#160;app-user
&#160;&#160;alert-user
&#160;&#160;alert-admin
&#160;&#160;alert-execution
&#160;&#160;dls-admin
&#160;&#160;dls-user
&#160;&#160;flexrep-admin
&#160;&#160;flexrep-user
&#160;&#160;infostudio-user</code>
</Body>
<Body>
<A ID="pgfId-1074543"></A>
As well as any custom roles you have created.</Body>
<Body>
<A ID="pgfId-1066400"></A>
Possible permissions are:</Body>
<Body>
<A ID="pgfId-1074289"></A>
<code>
&#160;&#160;read
&#160;&#160;insert
&#160;&#160;update
&#160;&#160;execute</code>
</Body>
<Body>
<A ID="pgfId-1066629"></A>
Default: None</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065523"></A>
<code>
quality</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1066127"></A>
Associate all ingested documents with the specified quality value. A positive value increases the relevance score of the document in text search functions. The converse is true for a negative value. Leaving this field blank specifies the default document quality.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074302"></A>
<code>
xs:integer</code>
</Body>
<Body>
<A ID="pgfId-1065527"></A>
Default: <code>
1</code>
</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065529"></A>
<code>
forest</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065531"></A>
The name of a specific forest in which to load the documents.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074315"></A>
<code>
xs:string</code>
</Body>
<Body>
<A ID="pgfId-1065533"></A>
Default: None</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065535"></A>
<code>
ticket-retention-duration</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065537"></A>
The length of time to keep the state data for tickets in the <code>
App-Services</code>
 database. For an overview of the <code>
App-Services</code>
 database, see <A href="intro.xml#id(50587)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Application Services App Server and Databases' on page&#160;6</A>.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074328"></A>
<code>
xs:duration</code>
</Body>
<Body>
<A ID="pgfId-1065539"></A>
Default: <code>
P30D
</code>
(30 days)</Body>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1065541"></A>
<code>
fab-retention-duration</code>
</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1066764"></A>
The length of time to keep the document ingestion data generated by the load operation in the <code>
Fab</code>
 database. For an overview of the <code>
Fab</code>
 database, see <A href="intro.xml#id(50587)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Application Services App Server and Databases' on page&#160;6</A>.</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1074341"></A>
<code>
xs:duration</code>
</Body>
<Body>
<A ID="pgfId-1065545"></A>
Default: <code>
P30D
</code>
(30 days)</Body>
</CELL>
</ROW>
</TABLE>
<Body>
<A ID="pgfId-1064974"></A>
</Body>
<Heading-2>
<A ID="pgfId-1064985"></A>
<A ID="45249"></A>
Applying Ingestion Policies</Heading-2>
<Body>
<A ID="pgfId-1074564"></A>
The <code>
info:load</code>
 function allows you to name a stored Ingestion Policy to be used for the load operation, as well as a set of specific options (deltas) that selectively override the stored policy. If no Ingestion Policy is specified for a load operation, the ‘default' policy is used. If no ‘default' policy has been specified, then a policy consisting of the global defaults are applied to the load operation.</Body>
<Body>
<A ID="pgfId-1067741"></A>
For example, the following query loads the documents from the <code>
C:\mydocs</code>
 directory into the <code>
Sample-Database</code>
 using the above ‘default' ingestion policy:</Body>
<Code>
<A ID="pgfId-1068051"></A>
xquery version &quot;1.0-ml&quot;; </Code>
<Code>
<A ID="pgfId-1068052"></A>
import module namespace info = 
&#160;&#160;&#160;&quot;http://marklogic.com/appservices/infostudio&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/appservices/infostudio/info.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1068054"></A>
return
&#160;&#160;info:load(&quot;C:\test&quot;, (), (), &quot;Sample-Database&quot;)</Code>
<Body>
<A ID="pgfId-1068043"></A>
To change the URI to <code>
http://docs/mydocs</code>
, you can define a delta that changes the <code>
literal</code>
 value in the URI. This delta change will only apply to this load operation and leaves the URI in the ‘default' Ingestion Policy unchanged.</Body>
<Code>
<A ID="pgfId-1067475"></A>
xquery version &quot;1.0-ml&quot;; </Code>
<Code>
<A ID="pgfId-1067476"></A>
import module namespace info = 
&#160;&#160;&#160;&quot;http://marklogic.com/appservices/infostudio&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/appservices/infostudio/info.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1073568"></A>
let $delta :=
&#160;&#160;&lt;options name=&quot;default&quot; 
&#160;&#160;&#160;&#160;xmlns=&quot;http://marklogic.com/appservices/infostudio&quot;&gt;
&#160;&#160;&#160;&#160;&lt;uri&gt; 
&#160;&#160;&#160;&#160;&#160;&#160;&lt;literal&gt;http://docs/mydocs/&lt;/literal&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;filename/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;literal&gt;.&lt;/literal&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;ext/&gt;
&#160;&#160;&#160;&#160;&lt;/uri&gt;
&#160;&#160;&lt;/options&gt;</Code>
<Code>
<A ID="pgfId-1067478"></A>
return
&#160;&#160;info:load(&quot;C:\test&quot;, (), $delta, &quot;Sample-Database&quot;)</Code>
<Note>
<A ID="pgfId-1068193"></A>
When defining deltas, only the children elements of the root element are preserved in the Ingestion Policy. So, in the above example, the children of the <code>
uri</code>
 element must be defined in their entirety in order for the filenames and extensions to be included in the URI.</Note>
<Heading-2>
<A ID="pgfId-1067811"></A>
<A ID="46084"></A>
Ingestion Policies and Multiple Load Operations</Heading-2>
<Body>
<A ID="pgfId-1067818"></A>
If you are initiating multiple load operations that require changes to the Ingestion Policy, it is important to understand that load operations are asynchronous. A load operation returns the ticket immediately before loading the files into the database. Any changes applied to an Ingestion Policy after launching a load operation may impact the policy set for the previous load.</Body>
<Body>
<A ID="pgfId-1068158"></A>
For example, the following pseudo query changes the policy between loads, which may produce unexpected results:</Body>
<Code>
<A ID="pgfId-1072109"></A>
let $mypolicy := info:policy-set(&quot;mypolicy&quot;, <Emphasis>
set options</Emphasis>
)
return info:load($dirpath, &quot;mypolicy&quot;, (), $database),</Code>
<Code>
<A ID="pgfId-1072194"></A>
let $mypolicy := info:policy-set(&quot;mypolicy&quot;, <Emphasis>
change options</Emphasis>
)
return info:load($dirpath, &quot;mypolicy&quot;, (), $database),</Code>
<Code>
<A ID="pgfId-1072206"></A>
let $mypolicy := info:policy-set(&quot;mypolicy&quot;, <Emphasis>
change options</Emphasis>
)
return info:load($dirpath, &quot;mypolicy&quot;, (), $database)</Code>
<Body>
<A ID="pgfId-1072439"></A>
The solution to this is to define unique deltas that define the changes to the policy and pass them to the <code>
info:load</code>
 function, as shown in the pseudo query below:</Body>
<Code>
<A ID="pgfId-1072232"></A>
let $mypolicy := info:policy-set(&quot;mypolicy&quot;, <Emphasis>
set options</Emphasis>
...)
return info:load($dirpath, &quot;mypolicy&quot;, (), $database),</Code>
<Code>
<A ID="pgfId-1072233"></A>
let $delta1 := <Emphasis>
change options
</Emphasis>
return info:load($dirpath, &quot;mypolicy&quot;, $delta1, $database),</Code>
<Code>
<A ID="pgfId-1072234"></A>
let $delta2 := <Emphasis>
change options
</Emphasis>
return info:load($dirpath, &quot;mypolicy&quot;, $delta2, $database)</Code>
<Body>
<A ID="pgfId-1072151"></A>
For example, you want to load some modules into one URI and some 4.1 and 4.2 scripts into their own unique URIs. This could be done by defining a policy with the correct URI for the modules and then defining a delta to change the URI for each set of scripts:</Body>
<Code>
<A ID="pgfId-1070149"></A>
xquery version &quot;1.0-ml&quot;; </Code>
<Code>
<A ID="pgfId-1070678"></A>
import module namespace info = 
&#160;&#160;&#160;&quot;http://marklogic.com/appservices/infostudio&quot;
&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/appservices/infostudio/info.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1070701"></A>
(: Create a policy with a URI for the modules:)
&#160;&#160;let $mypolicy := info:policy-set(
&#160;&#160;&#160;&#160;&#160;&#160;&quot;mypolicy&quot;,
&#160;&#160;&#160;&#160;&#160;&#160;&lt;options xmlns=&quot;http://marklogic.com/appservices/infostudio&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;collection&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;http://marklogic.com/appservices/infostudio
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/collection&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;error-handling&gt;continue-with-warning&lt;/error-handling&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;fab-retention-duration&gt;P30D&lt;/fab-retention-duration&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;file-filter&gt;^[^\.]&lt;/file-filter&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;max-docs-per-transaction&gt;100&lt;/max-docs-per-transaction&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;overwrite&gt;overwrite&lt;/overwrite&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;ticket-retention-duration&gt;P30D&lt;/ticket-retention-duration&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;uri&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;literal&gt;http://pubs/modules/actions/&lt;/literal&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;filename/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;literal&gt;.&lt;/literal&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;ext/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/uri&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;/options&gt;)</Code>
<Code>
<A ID="pgfId-1070747"></A>
(: Define a delta to change the URI for the 4.2 scripts :)
&#160;&#160;let $delta1 := 
&#160;&#160;&#160;&#160;&#160;&#160;&lt;options xmlns=&quot;http://marklogic.com/appservices/infostudio&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;uri&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;literal&gt;http://pubs/42scripts/&lt;/literal&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;filename/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;literal&gt;.&lt;/literal&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;ext/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/uri&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;/options&gt;</Code>
<Code>
<A ID="pgfId-1070806"></A>
(: Define a delta to change the URI for the 4.1 scripts :)
&#160;&#160;let $delta2 := 
&#160;&#160;&#160;&#160;&#160;&#160;&lt;options xmlns=&quot;http://marklogic.com/appservices/infostudio&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;uri&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;literal&gt;http://pubs/41scripts/&lt;/literal&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;filename/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;literal&gt;.&lt;/literal&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;ext/&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/uri&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;/options&gt;</Code>
<Code>
<A ID="pgfId-1072546"></A>
(: Load actions into the database :)
&#160;&#160;let $ticket1 := info:load(
&#160;&#160;&#160;&#160;&quot;C:\cvs\latest\myapp\scripts\actions&quot;,
&#160;&#160;&#160;&#160;&quot;mypolicy&quot;,
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;&quot;Sample-Database&quot;)</Code>
<Code>
<A ID="pgfId-1070904"></A>
(: Load 4.2 scripts into the database :)
&#160;&#160;let $ticket2 := info:load(
&#160;&#160;&#160;&#160;&quot;C:\cvs\latest\myapp\scripts\4.2scripts&quot;,
&#160;&#160;&#160;&#160;&quot;mypolicy&quot;,
&#160;&#160;&#160;&#160;$delta1,
&#160;&#160;&#160;&#160;&quot;Sample-Database&quot;)</Code>
<Code>
<A ID="pgfId-1070913"></A>
(: Load 4.1 scripts into the database :)
&#160;&#160;let $ticket3 := info:load(
&#160;&#160;&#160;&#160;&quot;C:\cvs\latest\myapp\scripts\4.1scripts&quot;,
&#160;&#160;&#160;&#160;&quot;mypolicy&quot;,
&#160;&#160;&#160;&#160;$delta2,
&#160;&#160;&#160;&#160;&quot;Sample-Database&quot;)</Code>
<Code>
<A ID="pgfId-1071726"></A>
return (
&#160;&#160;&#160;&#160;&quot;Loaded files from&quot;,
&#160;&#160;&#160;&#160;fn:data(info:ticket($ticket1)//directory,
&#160;&#160;&#160;&#160;fn:data(info:ticket($ticket2)//directory,
&#160;&#160;&#160;&#160;fn:data(info:ticket($ticket3)//directory ) </Code>
<Body>
<A ID="pgfId-1067440"></A>
</Body>
<Body>
<A ID="pgfId-1067447"></A>
</Body>
<Body>
<A ID="pgfId-1066785"></A>
</Body>
</XML>
