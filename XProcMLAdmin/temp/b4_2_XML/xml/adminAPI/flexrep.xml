<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="flexrep.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1078886"></A>
<A ID="87628"></A>
Scripting Flexible Replication Configuration</Heading-1>
<pagenum>
<A ID="pgfId-1084840"></A>
115</pagenum>
<Body>
<A ID="pgfId-1076929"></A>
This chapter describes how to use the Flexible Replication API to configure flexible replication. For details on flexible replication, see the <Emphasis>
Flexible Replication Guide</Emphasis>
. The main topics in this chapter are:</Body>
<Body-bullet>
<A ID="pgfId-1090074"></A>
<A href="flexrep.xml#id(46051)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Preliminary Configuration Procedures</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1089691"></A>
<A href="flexrep.xml#id(32863)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Configuring the Master Database</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1093619"></A>
<A href="flexrep.xml#id(74562)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a Replication Configuration Element</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1090637"></A>
<A href="flexrep.xml#id(48696)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a Replication Target</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1092850"></A>
<A href="flexrep.xml#id(48195)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a Push Replication Scheduled Task</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1094778"></A>
<A href="flexrep.xml#id(11229)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Configuring Pull Replication</Hyperlink>
</A></Body-bullet>
<Heading-2>
<A ID="pgfId-1090026"></A>
<A ID="46051"></A>
Preliminary Configuration Procedures</Heading-2>
<Body>
<A ID="pgfId-1091082"></A>
The procedures described in this chapter assume you have done the following configuration on MarkLogic Server:</Body>
<Number1>
<A ID="pgfId-1091323"></A>
Create three new forests:</Number1>
<Body-bullet-2>
<A ID="pgfId-1091339"></A>
<code>
MasterForest</code>
</Body-bullet-2>
<Body-bullet-2>
<A ID="pgfId-1094833"></A>
<code>
MyTriggersForest</code>
</Body-bullet-2>
<Body-bullet-2>
<A ID="pgfId-1091347"></A>
<code>
ReplicaForest</code>
</Body-bullet-2>
<Body-indent>
<A ID="pgfId-1091361"></A>
The MasterForest and MyTriggersForest must be on the same server. For details on how to create forests, see <A href="configure.xml#id(89143)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating Forests and Databases' on page&#160;22</A>.</Body-indent>
<NumberList>
<Number>
<A ID="pgfId-1091256"></A>
Create three new databases:</Number>
</NumberList>
<Body-bullet-2>
<A ID="pgfId-1091380"></A>
<code>
Master</code>
</Body-bullet-2>
<Body-bullet-2>
<A ID="pgfId-1094858"></A>
<code>
MyTriggers</code>
</Body-bullet-2>
<Body-bullet-2>
<A ID="pgfId-1091387"></A>
<code>
Replica</code>
</Body-bullet-2>
<Body-indent>
<A ID="pgfId-1091401"></A>
The Master and MyTriggers databases must be on the same server. For details on how to create databases, see <A href="configure.xml#id(89143)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating Forests and Databases' on page&#160;22</A>.</Body-indent>
<NumberList>
<Number>
<A ID="pgfId-1091093"></A>
Attach the forests to the databases:</Number>
</NumberList>
<Body-bullet-2>
<A ID="pgfId-1091415"></A>
<code>
MasterForest</code>
 to <code>
Master</code>
 </Body-bullet-2>
<Body-bullet-2>
<A ID="pgfId-1094881"></A>
<code>
MyTriggersForest</code>
 to <code>
MyTriggers</code>
 </Body-bullet-2>
<Body-bullet-2>
<A ID="pgfId-1091425"></A>
<code>
ReplicaForest</code>
 to <code>
Replica</code>
 </Body-bullet-2>
<Body-indent>
<A ID="pgfId-1091460"></A>
For details on how to attach forests to databases, see <A href="configure.xml#id(76568)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Attaching Forests to Databases' on page&#160;23</A>.</Body-indent>
<NumberList>
<Number>
<A ID="pgfId-1091491"></A>
Configure the Master database to use the MyTriggers database as its Triggers Database:</Number>
</NumberList>
<Code>
<A ID="pgfId-1093052"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1093152"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1093161"></A>
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1093205"></A>
let $config := admin:database-set-triggers-database(
&#160;&#160;$config, xdmp:database(&quot;Master&quot;),
&#160;&#160;xdmp:database(&quot;MyTriggers&quot;))</Code>
<Code>
<A ID="pgfId-1093206"></A>
return admin:save-configuration($config)</Code>
<NumberList>
<Number>
<A ID="pgfId-1093215"></A>
For the MyTriggers database:</Number>
</NumberList>
<Body-bullet-2>
<A ID="pgfId-1093207"></A>
Insert a Flexible Replication pipeline and a Status Change Handling pipeline, as described in <A href="cpf.xml#id(66445)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Inserting Existing CPF Pipelines' on page&#160;104</A>.</Body-bullet-2>
<Body-bullet-2>
<A ID="pgfId-1091174"></A>
Create a CPF domain, named Replicated Content, that uses the Flexible Replication and Status Change Handling pipelines, as described in <A href="cpf.xml#id(67870)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating a CPF Domain' on page&#160;105</A>.</Body-bullet-2>
<NumberList>
<Number>
<A ID="pgfId-1091062"></A>
Create two HTTP App Servers with the following settings</Number>
<TABLE>
<ROW>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1091620"></A>
Server Name</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1091622"></A>
Root</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1091624"></A>
Port</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1091626"></A>
Database</CellHeading>
</TH>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1091628"></A>
Master-flexrep </CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1091630"></A>
FlexRep</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1091632"></A>
8010</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1091634"></A>
Master</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1091642"></A>
Replica-flexrep</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1091644"></A>
FlexRep</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1091646"></A>
8011</CellBody>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1091648"></A>
Replica</CellBody>
</CELL>
</ROW>
</TABLE>
</NumberList>
<Body-indent>
<A ID="pgfId-1091678"></A>
For details on how to use the Admin API to create App Servers, see <A href="configure.xml#id(11533)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating an App Server' on page&#160;34</A>.</Body-indent>
<Heading-2>
<A ID="pgfId-1091053"></A>
<A ID="32863"></A>
Configuring the Master Database</Heading-2>
<Body>
<A ID="pgfId-1094669"></A>
The <code>
flexrep:configure-database </code>
function creates the indexes needed by the Master database for CPF based replication. </Body>
<Code>
<A ID="pgfId-1094670"></A>
xquery version &quot;1.0-ml&quot;; </Code>
<Code>
<A ID="pgfId-1093269"></A>
import module namespace flexrep =
&#160;&#160;&quot;http://marklogic.com/xdmp/flexible-replication&quot; 
&#160;&#160;at &quot;/MarkLogic/flexrep.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1092414"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot;
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1092423"></A>
let $config := admin:get-configuration() </Code>
<Code>
<A ID="pgfId-1092435"></A>
let $config := flexrep:configure-database(
&#160;&#160;$config,
&#160;&#160;xdmp:database(&quot;Master&quot;)) </Code>
<Code>
<A ID="pgfId-1092442"></A>
return admin:save-configuration($config)</Code>
<Heading-2>
<A ID="pgfId-1093301"></A>
<A ID="74562"></A>
Creating a Replication Configuration Element</Heading-2>
<Body>
<A ID="pgfId-1093315"></A>
Most of the Flexible Replication API functions require a replication configuration element for each replicated domain. You create a replication configuration element by calling the <code>
flexrep:configuration-create </code>
function and insert it into the database by calling the <code>
flexrep:configuration-insert </code>
function. </Body>
<Body>
<A ID="pgfId-1094651"></A>
The following query creates a new replication configuration element for the Replication Content domain and inserts it into the database. This query is executed against the Master database, so an <code>
xdmp:eval </code>
function is used to obtain the domain ID from the MyTriggers database.</Body>
<Code>
<A ID="pgfId-1093361"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1093563"></A>
import module namespace flexrep =
&#160;&#160;&quot;http://marklogic.com/xdmp/flexible-replication&quot; 
&#160;&#160;&#160;&#160;at &quot;/MarkLogic/flexrep.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1093588"></A>
(: Obtain the id of the replicated CPF domain from the 
&#160;&#160;&#160;Triggers database. :)</Code>
<Code>
<A ID="pgfId-1093589"></A>
let $domain:= xdmp:eval(
&#160;&#160;&#160;&#160;'xquery version &quot;1.0-ml&quot;;
&#160;&#160;&#160;&#160;import module namespace dom = &quot;http://marklogic.com/cpf/domains&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/cpf/domains.xqy&quot;;
&#160;&#160;&#160;&#160;fn:data(dom:get( &quot;Replicated Content&quot; )//dom:domain-id)',
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;&lt;options xmlns=&quot;xdmp:eval&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;database&gt;{xdmp:database(&quot;MyTriggers&quot;)}&lt;/database&gt;
&#160;&#160;&#160;&#160;&lt;/options&gt;)</Code>
<Code>
<A ID="pgfId-1093574"></A>
(: Create a replication configuration for the Replicated 
&#160;&#160;&#160;Content domain. :)</Code>
<Code>
<A ID="pgfId-1093726"></A>
let $cfg := flexrep:configuration-create($domain)</Code>
<Code>
<A ID="pgfId-1093606"></A>
(: Insert the replication configuration element into the database. :)</Code>
<Code>
<A ID="pgfId-1093741"></A>
return flexrep:configuration-insert($cfg) </Code>
<Heading-2>
<A ID="pgfId-1091703"></A>
<A ID="48696"></A>
Creating a Replication Target</Heading-2>
<Body>
<A ID="pgfId-1093814"></A>
This section describes how to use the <code>
flexrep:target-create </code>
function to create a replication target. The following query is executed against the Master database, so an <code>
xdmp:eval </code>
function is used to obtain the domain id from the MyTriggers database.</Body>
<Code>
<A ID="pgfId-1093808"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1092146"></A>
import module namespace flexrep =
&#160;&#160;&quot;http://marklogic.com/xdmp/flexible-replication&quot; 
&#160;&#160;&#160;&#160;at &quot;/MarkLogic/flexrep.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1092166"></A>
(: Obtain the id of the replicated CPF domain from the 
&#160;&#160;&#160;Triggers database. :)</Code>
<Code>
<A ID="pgfId-1092915"></A>
let $domain:= xdmp:eval(
&#160;&#160;&#160;&#160;'xquery version &quot;1.0-ml&quot;;
&#160;&#160;&#160;&#160;import module namespace dom = &quot;http://marklogic.com/cpf/domains&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/cpf/domains.xqy&quot;;
&#160;&#160;&#160;&#160;fn:data(dom:get( &quot;Replicated Content&quot; )//dom:domain-id)',
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;&lt;options xmlns=&quot;xdmp:eval&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;database&gt;{xdmp:database(&quot;MyTriggers&quot;)}&lt;/database&gt;
&#160;&#160;&#160;&#160;&lt;/options&gt;)</Code>
<Code>
<A ID="pgfId-1092266"></A>
(: Obtain the replication configuration. :)</Code>
<Code>
<A ID="pgfId-1092926"></A>
let $cfg := flexrep:configuration-get($domain, fn:true()) </Code>
<Code>
<A ID="pgfId-1092275"></A>
(: Specify the HTTP options for the replication target. :)</Code>
<Code>
<A ID="pgfId-1092933"></A>
let $http-options := 
&#160;&#160;&lt;flexrep:http-options &#160;&#160;&#160;&#160;xmlns:flexrep=&quot;http://marklogic.com/xdmp/flexible-replication&quot;&gt;
&#160;&#160;&#160;&#160;&lt;http:authentication xmlns:http=&quot;xdmp:http&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;http:username&gt;admin&lt;/http:username&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;http:password&gt;admin&lt;/http:password&gt;
&#160;&#160;&#160;&#160;&lt;/http:authentication&gt;
&#160;&#160;&#160;&#160;&lt;http:client-cert xmlns:http=&quot;xdmp:http&quot;/&gt;
&#160;&#160;&#160;&#160;&lt;http:client-key xmlns:http=&quot;xdmp:http&quot;/&gt;
&#160;&#160;&#160;&#160;&lt;http:pass-phrase xmlns:http=&quot;xdmp:http&quot;/&gt;
&#160;&#160;&lt;/flexrep:http-options&gt;</Code>
<Code>
<A ID="pgfId-1092284"></A>
(: Create the replication target. :)</Code>
<Code>
<A ID="pgfId-1092940"></A>
let $cfg := flexrep:target-create(
&#160;&#160;$cfg,
&#160;&#160;&quot;Replica&quot;,
&#160;&#160;&quot;http://localhost:8011/&quot;,
&#160;&#160;60,
&#160;&#160;300,
&#160;&#160;10,
&#160;&#160;fn:true(),
&#160;&#160;$http-options,
&#160;&#160;fn:false(),
&#160;&#160;(),
&#160;&#160;() ) </Code>
<Code>
<A ID="pgfId-1092392"></A>
(: Insert the changes to the replication configuration. :)</Code>
<Code>
<A ID="pgfId-1092950"></A>
return flexrep:configuration-insert($cfg) </Code>
<Heading-2>
<A ID="pgfId-1092513"></A>
<A ID="48195"></A>
Creating a Push Replication Scheduled Task</Heading-2>
<Body>
<A ID="pgfId-1093017"></A>
This section describes how to use the scheduler functions to create a scheduled replication push task. The following query is executed against the Master database.</Body>
<Code>
<A ID="pgfId-1092539"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1092670"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1092679"></A>
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1092688"></A>
(: Define a 'minutely' scheduled task to push replication 
&#160;&#160;&#160;each minute. :)</Code>
<Code>
<A ID="pgfId-1093242"></A>
let $task := admin:group-minutely-scheduled-task(
&#160;&#160;&quot;/MarkLogic/flexrep/tasks/push.xqy&quot;,
&#160;&#160;&quot;Modules&quot;,
&#160;&#160;1,
&#160;&#160;xdmp:database(&quot;Master&quot;),
&#160;&#160;0,
&#160;&#160;xdmp:user(&quot;admin&quot;), 
&#160;&#160;admin:host-get-id($config, xdmp:host-name())
)</Code>
<Code>
<A ID="pgfId-1093253"></A>
(: Add the scheduled task to the Default group. :)</Code>
<Code>
<A ID="pgfId-1092811"></A>
let $config:= admin:group-add-scheduled-task(
&#160;&#160;$config, 
&#160;&#160;admin:group-get-id($config, &quot;Default&quot;), 
&#160;&#160;$task)</Code>
<Code>
<A ID="pgfId-1092559"></A>
return admin:save-configuration($config)</Code>
<Heading-2>
<A ID="pgfId-1093836"></A>
<A ID="11229"></A>
Configuring Pull Replication</Heading-2>
<Body>
<A ID="pgfId-1093857"></A>
This section describes how to configure a Replica database to retrieve replication updates from the Master database. The procedures are:</Body>
<Body-bullet>
<A ID="pgfId-1094718"></A>
<A href="flexrep.xml#id(63655)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Disabling Push Replication on the Master Database</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1095236"></A>
<A href="flexrep.xml#id(84046)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a Pull Replication Configuration</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1094938"></A>
<A href="flexrep.xml#id(76319)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a Pull Replication Scheduled Task</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1094963"></A>
<A ID="63655"></A>
Disabling Push Replication on the Master Database</Heading-3>
<Body>
<A ID="pgfId-1094977"></A>
Before configuring Pull Replication on the Replica database, you must disable Push Replication on the Master database. The following query is executed against the Master database.</Body>
<Code>
<A ID="pgfId-1095271"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1095272"></A>
import module namespace flexrep =
&#160;&#160;&quot;http://marklogic.com/xdmp/flexible-replication&quot; 
&#160;&#160;&#160;&#160;at &quot;/MarkLogic/flexrep.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1095273"></A>
(: Obtain the id of the replicated CPF domain from the 
&#160;&#160;&#160;Triggers database. :)</Code>
<Code>
<A ID="pgfId-1095274"></A>
let $domain:= xdmp:eval(
&#160;&#160;&#160;&#160;'xquery version &quot;1.0-ml&quot;;
&#160;&#160;&#160;&#160;import module namespace dom = &quot;http://marklogic.com/cpf/domains&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;at &quot;/MarkLogic/cpf/domains.xqy&quot;;
&#160;&#160;&#160;&#160;fn:data(dom:get( &quot;Replicated Content&quot; )//dom:domain-id)',
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;&lt;options xmlns=&quot;xdmp:eval&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;database&gt;{xdmp:database(&quot;MyTriggers&quot;)}&lt;/database&gt;
&#160;&#160;&#160;&#160;&lt;/options&gt;)</Code>
<Code>
<A ID="pgfId-1095275"></A>
(: Obtain the replication configuration. :)</Code>
<Code>
<A ID="pgfId-1095276"></A>
let $cfg := flexrep:configuration-get($domain, fn:true()) </Code>
<Code>
<A ID="pgfId-1095341"></A>
(: Obtain the replication target id. :)</Code>
<Code>
<A ID="pgfId-1095261"></A>
let $target-id := flexrep:configuration-target-get-id(
&#160;&#160;$cfg,
&#160;&#160;&quot;Replica&quot;)</Code>
<Code>
<A ID="pgfId-1095355"></A>
(: Disable Push Replication on the replication target. :)</Code>
<Code>
<A ID="pgfId-1095310"></A>
let $cfg := flexrep:configuration-target-set-enabled(
&#160;&#160;$cfg,
&#160;&#160;$target-id,
&#160;&#160;fn:false())</Code>
<Code>
<A ID="pgfId-1095329"></A>
(: Insert the replication configuration element into the database. :)</Code>
<Code>
<A ID="pgfId-1095319"></A>
return flexrep:configuration-insert($cfg) </Code>
<Heading-3>
<A ID="pgfId-1094940"></A>
<A ID="84046"></A>
Creating a Pull Replication Configuration</Heading-3>
<Body>
<A ID="pgfId-1094941"></A>
Pull Replication requires a pull replication configuration element for each replicated domain. You create a pull replication configuration element by calling the <code>
flexrep:pull-create </code>
function and insert it into the database by calling the <code>
flexrep:pull-insert </code>
function. </Body>
<Body>
<A ID="pgfId-1094642"></A>
The following query is executed against the Replica database, which is most likely running on a different server than the Master database. As a consequence, you will need to first obtain the domain ID from the master database and the target ID from the master's triggers database.</Body>
<Code>
<A ID="pgfId-1094017"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1094366"></A>
import module namespace flexrep =
&#160;&#160;&quot;http://marklogic.com/xdmp/flexible-replication&quot; 
&#160;&#160;&#160;&#160;at &quot;/MarkLogic/flexrep.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1094389"></A>
(: Specify the id of the replicated CPF domain obtained from the 
&#160;&#160;&#160;Master's Triggers database. :)</Code>
<Code>
<A ID="pgfId-1094390"></A>
let $domain:= 9535475951259984368</Code>
<Code>
<A ID="pgfId-1094414"></A>
(: Specify the id of the replication target obtained from the 
&#160;&#160;&#160;Master database. :)</Code>
<Code>
<A ID="pgfId-1094439"></A>
let $target-id := 18130470845627037840</Code>
<Code>
<A ID="pgfId-1094393"></A>
(: Specify the HTTP options for the replication target. :)</Code>
<Code>
<A ID="pgfId-1094394"></A>
let $http-options := 
&#160;&#160;&lt;flexrep:http-options &#160;&#160;&#160;&#160;xmlns:flexrep=&quot;http://marklogic.com/xdmp/flexible-replication&quot;&gt;
&#160;&#160;&#160;&#160;&lt;http:authentication xmlns:http=&quot;xdmp:http&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;http:username&gt;admin&lt;/http:username&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;http:password&gt;admin&lt;/http:password&gt;
&#160;&#160;&#160;&#160;&lt;/http:authentication&gt;
&#160;&#160;&#160;&#160;&lt;http:client-cert xmlns:http=&quot;xdmp:http&quot;/&gt;
&#160;&#160;&#160;&#160;&lt;http:client-key xmlns:http=&quot;xdmp:http&quot;/&gt;
&#160;&#160;&#160;&#160;&lt;http:pass-phrase xmlns:http=&quot;xdmp:http&quot;/&gt;
&#160;&#160;&lt;/flexrep:http-options&gt;</Code>
<Code>
<A ID="pgfId-1094405"></A>
let $pullconfig := flexrep:pull-create(
&#160;&#160;&quot;Master&quot;,
&#160;&#160;$domain,
&#160;&#160;$target-id,
&#160;&#160;&quot;http://localhost:8010/&quot;,
&#160;&#160;$http-options)</Code>
<Code>
<A ID="pgfId-1094452"></A>
(: Insert the pull configuration into the Replica database. :)</Code>
<Code>
<A ID="pgfId-1094463"></A>
return flexrep:pull-insert($pullconfig) </Code>
<Heading-3>
<A ID="pgfId-1093904"></A>
<A ID="76319"></A>
Creating a Pull Replication Scheduled Task</Heading-3>
<Body>
<A ID="pgfId-1094584"></A>
This section describes how to use the scheduler functions to create a scheduled replication pull task. The following query is executed against the Replica database.</Body>
<Code>
<A ID="pgfId-1094585"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1094586"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1094587"></A>
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1094588"></A>
(: Define a 'minutely' scheduled task to pull updates from the
&#160;&#160;&#160;Master database each minute. :)</Code>
<Code>
<A ID="pgfId-1094589"></A>
let $task := admin:group-minutely-scheduled-task(
&#160;&#160;&quot;/MarkLogic/flexrep/tasks/pull.xqy&quot;,
&#160;&#160;&quot;Modules&quot;,
&#160;&#160;1,
&#160;&#160;xdmp:database(&quot;Replica&quot;),
&#160;&#160;0,
&#160;&#160;xdmp:user(&quot;admin&quot;), 
&#160;&#160;admin:host-get-id($config, xdmp:host-name())
)</Code>
<Code>
<A ID="pgfId-1094590"></A>
(: Add the scheduled task to the Default group. :)</Code>
<Code>
<A ID="pgfId-1094591"></A>
let $config:= admin:group-add-scheduled-task(
&#160;&#160;$config, 
&#160;&#160;admin:group-get-id($config, &quot;Default&quot;), 
&#160;&#160;$task)</Code>
<Code>
<A ID="pgfId-1094592"></A>
return admin:save-configuration($config)</Code>
<Code>
<A ID="pgfId-1093948"></A>
</Code>
<Body>
<A ID="pgfId-1093955"></A>
</Body>
</XML>
