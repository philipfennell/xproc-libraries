<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="cpf.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1093223"></A>
Scripting Content Processing Framework (CPF) Configuration</Heading-1>
<pagenum>
<A ID="pgfId-1093227"></A>
106</pagenum>
<Body>
<A ID="pgfId-1093232"></A>
The MarkLogic Server Content Processing Framework (CPF) is described in detail in the <Emphasis>
Content Processing Framework Guide</Emphasis>
 Guide. This chapter describes how to use the CPF API to programmatically configure CPF. The main topics in this chapter are:</Body>
<Body-bullet>
<A ID="pgfId-1090074"></A>
<A href="cpf.xml#id(81216)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
General Procedure for Configuring CPF</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1092766"></A>
<A href="cpf.xml#id(63299)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating CPF Pipelines</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1092332"></A>
<A href="cpf.xml#id(66445)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Inserting Existing CPF Pipelines</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1089691"></A>
<A href="cpf.xml#id(67870)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a CPF Domain</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1092215"></A>
<A href="cpf.xml#id(20565)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Configuring a CPF Restart Trigger</Hyperlink>
</A></Body-bullet>
<Note>
<A ID="pgfId-1090859"></A>
All queries must be executed on the database that stores your triggers. Though MarkLogic Server provides a preconfigured Triggers database that contains the out-of-the box triggers, the examples in this chapter assume you are configuring your own triggers database. If you decide to use the triggers from the preconfigured Triggers database, you only need to create your domain, as described in <A href="cpf.xml#id(67870)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating a CPF Domain' on page&#160;105</A>.</Note>
<Heading-2>
<A ID="pgfId-1092633"></A>
<A ID="81216"></A>
General Procedure for Configuring CPF</Heading-2>
<Body>
<A ID="pgfId-1092827"></A>
When using the Admin Interface, you can select the Install tab in the Content Processing Summary page to 'install' CPF:</Body>
<Body-indent>
<A ID="pgfId-1092860"></A>
<IMAGE xml:link="simple" href="images/cpf-install1.gif" show="embed" actuate="auto"/>
</Body-indent>
<Body>
<A ID="pgfId-1092841"></A>
The term 'install' is a bit of a misnomer. What really happens is that MarkLogic Server installs the out-of-the-box pipelines, creates a restart trigger, creates a default domain, and assigns some default pipelines to the default domain. When doing this, the Admin Interface makes certain assumptions about how to configure CPF. One of the reasons for using the CPF API to configure CPF is that you can control which pipelines are installed and configured for a domain, as well as the restart trigger user, permissions, and evaluation context.</Body>
<Body>
<A ID="pgfId-1092647"></A>
This section describes the general procedure for configuring CPF on a triggers database. The general steps are:</Body>
<Body-bullet>
<A ID="pgfId-1092677"></A>
Create CPF pipelines, as described in <A href="cpf.xml#id(63299)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating CPF Pipelines</Hyperlink>
</A>. If you are configuring CPF with existing pipelines, insert them into the triggers database, as described in <A href="cpf.xml#id(66445)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Inserting Existing CPF Pipelines</Hyperlink>
</A>.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1092717"></A>
Create CPF domains, as described in <A href="cpf.xml#id(67870)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a CPF Domain</Hyperlink>
</A>.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1092750"></A>
Configure a CPF restart trigger, as described in <A href="cpf.xml#id(20565)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Configuring a CPF Restart Trigger</Hyperlink>
</A>.</Body-bullet>
<Heading-2>
<A ID="pgfId-1090864"></A>
<A ID="63299"></A>
Creating CPF Pipelines</Heading-2>
<Body>
<A ID="pgfId-1090711"></A>
CPF Pipelines are described in detail in <A href="../cpf/pipelines.xml#id(80553)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Understanding and Using Pipelines</Hyperlink>
</A> in the <Emphasis>
Content Processing Framework Guide</Emphasis>
 Guide. This section describes how to use the CPF API to create a Status Change Handling pipeline, which is required for most CPF operations. </Body>
<Body>
<A ID="pgfId-1092254"></A>
The following query is executed against the triggers database used by the content database.</Body>
<Code>
<A ID="pgfId-1090028"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1090029"></A>
import module namespace dom = &quot;http://marklogic.com/cpf/domains&quot; 
&#160;&#160;at &quot;/MarkLogic/cpf/domains.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1090030"></A>
import module namespace p = &quot;http://marklogic.com/cpf/pipelines&quot; 
&#160;&#160;at &quot;/MarkLogic/cpf/pipelines.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1090031"></A>
let $success := xs:anyURI(&quot;http://marklogic.com/states/replicated&quot;)
let $failure := xs:anyURI(&quot;http://marklogic.com/states/error&quot;)</Code>
<Code>
<A ID="pgfId-1090033"></A>
return (</Code>
<Code>
<A ID="pgfId-1090043"></A>
(: Create the Status Change Handling Pipeline :)</Code>
<Code>
<A ID="pgfId-1090044"></A>
p:create( 
&#160;&#160;&quot;Status Change Handling&quot;, 
&#160;&#160;&quot;Status Change Handling Pipeline&quot;, 
&#160;&#160;p:action(&quot;/MarkLogic/cpf/actions/success-action.xqy&quot;, (), ()),
&#160;&#160;p:action(&quot;/MarkLogic/cpf/actions/failure-action.xqy&quot;, (), ()), </Code>
<Code>
<A ID="pgfId-1090045"></A>
&#160;&#160;(p:status-transition(
&#160;&#160;&#160;&#160;&quot;created&quot;, 
&#160;&#160;&#160;&#160;&quot;New document entering the system: kick it into the appropriate initial state. If is has an initial state, go to that state. If it doesn't, go to the standard initial state and set the initial timestamp. &quot;, 
&#160;&#160;&#160;&#160;xs:anyURI(&quot;http://marklogic.com/states/initial&quot;),
&#160;&#160;&#160;&#160;(), 
&#160;&#160;&#160;&#160;100, 
&#160;&#160;&#160;&#160;p:action(&quot;/MarkLogic/cpf/actions/set-updated-action.xqy&quot;, (), ()),      
&#160;&#160;&#160;&#160;&#160;&#160;(p:execute(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;p:condition(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;/MarkLogic/cpf/actions/renamed-links-condition.xqy&quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;() ), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;p:action(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;/MarkLogic/cpf/actions/link-rename-action.xqy&quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;() ), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;() ),</Code>
<Code>
<A ID="pgfId-1090695"></A>
&#160;&#160;&#160;&#160;&#160;&#160;p:execute(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;p:condition(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;/MarkLogic/cpf/actions/existing-state-condition.xqy&quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;() ), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;p:action(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;/MarkLogic/cpf/actions/touch-state-action.xqy&quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;() ), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;() )
&#160;&#160;&#160;&#160;) 
&#160;&#160;),</Code>
<Code>
<A ID="pgfId-1090046"></A>
&#160;&#160;p:status-transition(
&#160;&#160;&#160;&#160;&quot;deleted&quot;, 
&#160;&#160;&#160;&#160;&quot;Clean up dangling links and dependent documents from deleted documents. &quot;, 
&#160;&#160;&#160;&#160;(),
&#160;&#160;&#160;&#160;(), 
&#160;&#160;&#160;&#160;100, 
&#160;&#160;&#160;&#160;p:action(
&#160;&#160;&#160;&#160;&#160;&#160;&quot;/MarkLogic/cpf/actions/link-coherency-action.xqy&quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;(), 
&#160;&#160;&#160;&#160;&#160;&#160;() ), 
&#160;&#160;&#160;&#160;()
&#160;&#160;),</Code>
<Code>
<A ID="pgfId-1090047"></A>
&#160;&#160;p:status-transition(
&#160;&#160;&#160;&#160;&quot;updated&quot;, 
&#160;&#160;&#160;&#160;&quot;Update the document time stamp and shift to the updated state. &quot;, 
&#160;&#160;&#160;&#160;xs:anyURI(&quot;http://marklogic.com/states/updated&quot;),
&#160;&#160;&#160;&#160;(), 
&#160;&#160;&#160;&#160;100, 
&#160;&#160;&#160;&#160;p:action(&quot;/MarkLogic/cpf/actions/set-updated-action.xqy&quot;, (), ()), 
&#160;&#160;&#160;&#160;()
&#160;&#160;) ),
&#160;&#160;() 
) )
</Code>
<Heading-2>
<A ID="pgfId-1090018"></A>
<A ID="66445"></A>
Inserting Existing CPF Pipelines</Heading-2>
<Body>
<A ID="pgfId-1092302"></A>
If you have pipeline configuration in the form of an XML file, then you can use the <code>
p:insert</code>
 function to insert the pipeline into a triggers database. For example, the pipelines shipped with MarkLogic Server are located in the <code>
/MarkLogic/Installer</code>
 directory. This section describes how to use the <code>
p:insert</code>
 function to insert the Flexible Replication and the Status Change Handling pipelines into a triggers database. </Body>
<Note>
<A ID="pgfId-1093312"></A>
The Flexible Replication and the Status Change Handling pipelines are the two pipelines required to configure flexible replication. They must be inserted into a triggers database and assigned to a domain before using the <code>
flexrep</code>
 API functions to configure flexible replication, as described in <A href="flexrep.xml#id(87628)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Scripting Flexible Replication Configuration' on page&#160;107</A>.</Note>
<Body>
<A ID="pgfId-1092304"></A>
The following query is executed against the triggers database used by the content database.</Body>
<Code>
<A ID="pgfId-1092362"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1092544"></A>
import module namespace dom = &quot;http://marklogic.com/cpf/domains&quot; 
&#160;&#160;at &quot;/MarkLogic/cpf/domains.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1092551"></A>
import module namespace p = &quot;http://marklogic.com/cpf/pipelines&quot; 
&#160;&#160;at &quot;/MarkLogic/cpf/pipelines.xqy&quot;; </Code>
<Code>
<A ID="pgfId-1092560"></A>
let $flexrep-pipeline :=
&#160;&#160;xdmp:document-get(&quot;Installer/flexrep/flexrep-pipeline.xml&quot;)</Code>
<Code>
<A ID="pgfId-1092579"></A>
let $status-pipeline := 
&#160;&#160;xdmp:document-get(&quot;Installer/cpf/status-pipeline.xml&quot;)</Code>
<Code>
<A ID="pgfId-1092592"></A>
return (
&#160;&#160;p:insert($flexrep-pipeline),
&#160;&#160;p:insert($status-pipeline) )</Code>
<Heading-2>
<A ID="pgfId-1089655"></A>
<A ID="67870"></A>
Creating a CPF Domain</Heading-2>
<Body>
<A ID="pgfId-1092230"></A>
CPF Domains are described in detail in <A href="../cpf/domains.xml#id(11600)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Understanding and Using Domains</Hyperlink>
</A> in the <Emphasis>
Content Processing Framework Guide</Emphasis>
 Guide. This section describes how to create a new CPF domain. If you have already created the pipelines to be used by the domain, then you can specify them in your <code>
dom:create</code>
 function. Otherwise you can add the pipelines to the domain by means of the <code>
dom:add-pipeline</code>
 or <code>
dom:set-pipelines</code>
 function. </Body>
<Body>
<A ID="pgfId-1092247"></A>
The following query creates a domain named Replication Content. The scope of the domain is the root directory of the content database that uses the domian. The evaluation context is the root directory of the Modules database. The pipelines assigned to the domain are Flexible Replication and the Status Change Handling. The domain can be read and executed by the user, <code>
app-user</code>
. This query is executed against the triggers database used by the content database.</Body>
<Code>
<A ID="pgfId-1085343"></A>
xquery version &quot;1.0-ml&quot;; </Code>
<Code>
<A ID="pgfId-1085493"></A>
import module namespace dom = &quot;http://marklogic.com/cpf/domains&quot; 
&#160;&#160;at &quot;/MarkLogic/cpf/domains.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1085500"></A>
import module namespace p = &quot;http://marklogic.com/cpf/pipelines&quot; 
&#160;&#160;at &quot;/MarkLogic/cpf/pipelines.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1089974"></A>
dom:create(
&#160;&#160;&#160;&#160;&quot;Replicated Content&quot;,
&#160;&#160;&#160;&#160;&quot;Handle replicated documents&quot;, 
&#160;&#160;&#160;&#160;dom:domain-scope( 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;directory&quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;/&quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;infinity&quot;),
&#160;&#160;&#160;&#160;dom:evaluation-context(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;xdmp:database(&quot;Modules&quot;), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;/&quot; ),
&#160;&#160;&#160;&#160;(p:get(&quot;Status Change Handling&quot;)/p:pipeline-id,
&#160;&#160;&#160;&#160;&#160;p:get(&quot;Flexible Replication&quot;)/p:pipeline-id),
&#160;&#160;&#160;&#160;(xdmp:permission('app-user', 'read'), 
&#160;&#160;&#160;&#160;&#160;xdmp:permission('app-user', 'execute') )
)</Code>
<Heading-2>
<A ID="pgfId-1091764"></A>
<A ID="20565"></A>
Configuring a CPF Restart Trigger</Heading-2>
<Body>
<A ID="pgfId-1092128"></A>
CPF is designed so that, if the server or database goes offline, it will pick up where it left off.  In order to resume from where it left off, CPF needs to have a restart trigger configured on the triggers database used by the content database. There is only one restart trigger for each triggers database.</Body>
<Body>
<A ID="pgfId-1093026"></A>
After you have created your piplelines and domains, call the <code>
dom:configuration-create</code>
 function to configure your database with a restart trigger. The restart trigger needs to associated with a particular user, an evaluation context, and a default domain. Unlike other CPF triggers that obtain their evaluation context from a domain, the restart trigger obtains its execution context from the CPF configuration. All the restarted actions are executed as the restart-user.  The restart user should have the <code>
cpf-restart</code>
 role, as well as all of the permissions and privileges that normal users have on the documents.</Body>
<Body>
<A ID="pgfId-1093028"></A>
The following query configures a restart trigger. The restart user is <code>
CPFuser</code>
, the default domain is Replicated Content, and the evaluation context is the root directory of the Modules database. This query is executed against the triggers database used by the content database.</Body>
<Code>
<A ID="pgfId-1091967"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1091881"></A>
import module namespace dom = &quot;http://marklogic.com/cpf/domains&quot; 
&#160;&#160;at &quot;/MarkLogic/cpf/domains.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1091888"></A>
dom:configuration-create( 
&#160;&#160;&quot;CPFuser&quot;, 
&#160;&#160;dom:evaluation-context( xdmp:database(&quot;Modules&quot;), &quot;/&quot; ),
&#160;&#160;fn:data(dom:get(&quot;Replicated Content&quot;)/dom:domain-id), 
&#160;&#160;(xdmp:permission('app-user', 'read'), 
&#160;&#160;&#160;xdmp:permission('app-user', 'execute') ) )</Code>
<Body>
<A ID="pgfId-1085020"></A>
</Body>
</XML>
