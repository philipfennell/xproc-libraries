<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="configure.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1093134"></A>
<A ID="54214"></A>
Server Configuration Scripts</Heading-1>
<pagenum>
<A ID="pgfId-1093138"></A>
38</pagenum>
<Body>
<A ID="pgfId-1085133"></A>
There are two basic approaches to creating and configuring server objects. One approach is to write a separate XQuery script for each new object, as shown in this chapter. The other approach is to write a more comprehensive XQuery program that creates all of the new server objects, as shown in the chapter, <A href="SampleProgram.xml#id(81161)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Sample Configuration Program' on page&#160;39</A>. The approach you select will depend on your individual needs. The script-per-object approach is useful when making minor changes to an existing configuration. If your objective is to create a complete server configuration, you will probably want to write a complete configuration program like the sample configuration program.</Body>
<Body>
<A ID="pgfId-1077638"></A>
The main topics in this chapter are: </Body>
<Body-bullet>
<A ID="pgfId-1077711"></A>
<A href="configure.xml#id(77067)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating and Configuring Forests and Databases</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077733"></A>
<A href="configure.xml#id(52519)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating and Configuring Groups</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077755"></A>
<A href="configure.xml#id(18698)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating and Configuring App Servers</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077777"></A>
<A href="configure.xml#id(80160)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating and Configuring Roles and Users</Hyperlink>
</A></Body-bullet>
<Heading-2>
<A ID="pgfId-1080174"></A>
<A ID="26239"></A>
<A ID="77067"></A>
Creating and Configuring Forests and Databases</Heading-2>
<Body>
<A ID="pgfId-1088505"></A>
The general information on forests and databases is provided in the <A href="../admin/forests.xml#id(80927)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Forests</Hyperlink>
</A> and <A href="../admin/databases.xml#id(69630)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Databases</Hyperlink>
</A> chapters in the <Emphasis>
Administrator's Guide</Emphasis>
.</Body>
<Body>
<A ID="pgfId-1088872"></A>
The sample configuration modules that create and configure forests and databases are: <A href="SampleProgram.xml#id(88049)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
configure-server.xqy</Hyperlink>
</A> and <A href="SampleProgram.xml#id(52570)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
databases.xqy</Hyperlink>
</A>. The <A href="SampleProgram.xml#id(88049)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
configure-server.xqy</Hyperlink>
</A> module specifies the configuration-specific functions, which call the generic functions in the <A href="SampleProgram.xml#id(52570)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
databases.xqy</Hyperlink>
</A> module. This section shows individual XQuery scripts that perform similar tasks. For more examples on how to use the Admin functions to modify your databases and monitor their operation, see <A href="maintenance.xml#id(23137)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Database Maintenance Operations' on page&#160;87</A>.</Body>
<Body>
<A ID="pgfId-1088879"></A>
The topics in this section are:</Body>
<Body-bullet>
<A ID="pgfId-1088883"></A>
<A href="configure.xml#id(89143)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating Forests and Databases</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1079638"></A>
<A href="configure.xml#id(76568)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Attaching Forests to Databases</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1079660"></A>
<A href="configure.xml#id(70285)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Adding a Database Field and Included Element</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1079682"></A>
<A href="configure.xml#id(80248)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Adding Indexes to a Database</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1079726"></A>
<A href="configure.xml#id(67481)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a Scheduled Backup of a Database</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1084516"></A>
<A href="configure.xml#id(66927)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating and Configuring Databases in a Single Transaction</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1093148"></A>
<A href="configure.xml#id(89913)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Deleting a Forest and Database</Hyperlink>
</A></Body-bullet>
<Note>
<A ID="pgfId-1092589"></A>
Running the examples in this section will modify your MarkLogic Server configuration.</Note>
<Heading-3>
<A ID="pgfId-1076109"></A>
<A ID="89143"></A>
Creating Forests and Databases</Heading-3>
<Body>
<A ID="pgfId-1076110"></A>
The following script creates two new forests, named SampleDB-Forest and SampleModules-Forest and two new databases, named Sample-Database and Sample-Modules. Note that the <code>
$config </code>
variable holds the progressive configurations, each of which is then passed as input to the next admin function, so that the return value held by the final <code>
$config </code>
variable passed to admin:save-configuration contains the configuration data for all of the new forests and databases.</Body>
<Code>
<A ID="pgfId-1079219"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1079392"></A>
(: Get the configuration :)
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1079399"></A>
(: Add new forests to the configuration :)
let $config := admin:forest-create(
&#160;&#160;$config, 
&#160;&#160;&quot;SampleDB-Forest&quot;,
&#160;&#160;xdmp:host(), (
&#160;&#160;))</Code>
<Code>
<A ID="pgfId-1088984"></A>
let $config := admin:forest-create(
&#160;&#160;$config, 
&#160;&#160;&quot;SampleModules-Forest&quot;,
&#160;&#160;xdmp:host(), 
&#160;&#160;())   </Code>
<Code>
<A ID="pgfId-1079406"></A>
(: Add new databases to the configuration :)
let $config := admin:database-create(
&#160;&#160;$config,
&#160;&#160;&quot;Sample-Database&quot;,
&#160;&#160;xdmp:database(&quot;Security&quot;),
&#160;&#160;xdmp:database(&quot;Schemas&quot;))</Code>
<Code>
<A ID="pgfId-1089039"></A>
let $config := admin:database-create(
&#160;&#160;$config, 
&#160;&#160;&quot;Sample-Modules&quot;,
&#160;&#160;xdmp:database(&quot;Security&quot;),
&#160;&#160;xdmp:database(&quot;Schemas&quot;))</Code>
<Code>
<A ID="pgfId-1079413"></A>
(: Save the configuration :)
return admin:save-configuration($config)</Code>
<Heading-3>
<A ID="pgfId-1077012"></A>
<A ID="76568"></A>
Attaching Forests to Databases</Heading-3>
<Body>
<A ID="pgfId-1092608"></A>
The following script attaches the <code>
SampleDB-Forest</code>
 forest to the <code>
Sample-Database</code>
 and the <code>
SampleModules-Forest</code>
 to the <code>
Sample-Modules</code>
 database:</Body>
<Code>
<A ID="pgfId-1077021"></A>
(: Now that the database and forest have been created, we can attach the forest to the database. :)</Code>
<Code>
<A ID="pgfId-1082128"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1077023"></A>
(: Get the configuration with the new forest and database :)
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1077024"></A>
(: Attach the forest to the database :)
let $config := admin:database-attach-forest(
&#160;&#160;$config,
&#160;&#160;xdmp:database(&quot;Sample-Database&quot;), 
&#160;&#160;xdmp:forest(&quot;SampleDB-Forest&quot;))</Code>
<Code>
<A ID="pgfId-1079511"></A>
let $config := admin:database-attach-forest(
&#160;&#160;$config,
&#160;&#160;xdmp:database(&quot;Sample-Modules&quot;), 
&#160;&#160;xdmp:forest(&quot;SampleModules-Forest&quot;))</Code>
<Code>
<A ID="pgfId-1077025"></A>
(: Save the configuration :)
return admin:save-configuration($config)</Code>
<Heading-3>
<A ID="pgfId-1075574"></A>
<A ID="70285"></A>
Adding a Database Field and Included Element</Heading-3>
<Body>
<A ID="pgfId-1077043"></A>
As described in <A href="../admin/fields.xml#id(40202)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Overview of Fields</Hyperlink>
</A> in the <Emphasis>
Administrator's Guide</Emphasis>
, fields enable users to query portions of a database based on elements. If a field is configured with an included element, that element is indexed by the field so that the included element is also searched when searching for the field.</Body>
<Body>
<A ID="pgfId-1082157"></A>
The following script adds the 'wiki-suggest' field to the Sample-Database.</Body>
<Code>
<A ID="pgfId-1092658"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078236"></A>
(: Get the configuration with the new database :)
let $config := admin:get-configuration()
let $dbid := xdmp:database(&quot;Sample-Database&quot;)
let $fieldspec := admin:database-field(&quot;wiki-suggest&quot;, fn:false())</Code>
<Code>
<A ID="pgfId-1078383"></A>
return admin:save-configuration(
&#160;&#160;admin:database-add-field($config, $dbid, $fieldspec))</Code>
<Body>
<A ID="pgfId-1078655"></A>
This script adds <code>
name</code>
 as an included element to the <code>
wiki-suggest</code>
 field :</Body>
<Code>
<A ID="pgfId-1092674"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078393"></A>
(: Get the configuration with the new field :)
let $config := admin:get-configuration()
let $dbid := xdmp:database(&quot;Sample-Database&quot;)
let $fieldspec := admin:database-included-element(
&#160;&#160;&quot;http://marklogic.com/wikipedia&quot;, 
&#160;&#160;&quot;name&quot;, 
&#160;&#160;1.0, 
&#160;&#160;&quot;&quot;, 
&#160;&#160;&quot;&quot;, 
&#160;&#160;&quot;&quot;)</Code>
<Code>
<A ID="pgfId-1078514"></A>
return admin:save-configuration(
&#160;&#160;&#160;&#160;admin:database-add-field-included-element(
&#160;&#160;$config, 
&#160;&#160;$dbid, 
&#160;&#160;&quot;wiki-suggest&quot;, 
&#160;&#160;$fieldspec) )</Code>
<Heading-3>
<A ID="pgfId-1077427"></A>
<A ID="80248"></A>
Adding Indexes to a Database</Heading-3>
<Body>
<A ID="pgfId-1082320"></A>
As described in <A href="../admin/range_index.xml#id(93351)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Understanding Element and Attribute Range Indexes</Hyperlink>
</A> in the <Emphasis>
Administrator's Guide</Emphasis>
, you can create range indexes on elements or attributes of type xs:string to accelerate the performance of queries that sort by the string values. </Body>
<Body>
<A ID="pgfId-1077053"></A>
<A ID="57406"></A>
The following script sets a range element index for the <code>
name</code>
 element in the <code>
Sample-Database</code>
 database:</Body>
<Code>
<A ID="pgfId-1077054"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078336"></A>
let $config := admin:get-configuration()
let $dbid := xdmp:database(&quot;Sample-Database&quot;)
let $rangespec := admin:database-range-element-index(
&#160;&#160;&quot;string&quot;, 
&#160;&#160;&quot;http://marklogic.com/wikipedia&quot;,
&#160;&#160;&quot;name&quot;, 
&#160;&#160;&quot;http://marklogic.com/collation/&quot;,
&#160;&#160;fn:false() )</Code>
<Code>
<A ID="pgfId-1077056"></A>
return admin:save-configuration(
&#160;&#160;admin:database-add-range-element-index( 
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;$dbid, 
&#160;&#160;&#160;&#160;$rangespec))</Code>
<Body>
<A ID="pgfId-1077070"></A>
The following script sets a range element attribute index for the <code>
year</code>
 attribute of the <code>
nominee</code>
 element in the <code>
Sample-Database</code>
 database:</Body>
<Code>
<A ID="pgfId-1077071"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078993"></A>
let $config := admin:get-configuration()
let $dbid := xdmp:database(&quot;Sample-Database&quot;)
let $rangespec := admin:database-range-element-attribute-index(
&#160;&#160;&quot;gYear&quot;, 
&#160;&#160;&quot;http://marklogic.com/wikipedia&quot;,
&#160;&#160;&quot;nominee&quot;, 
&#160;&#160;&quot;&quot;, 
&#160;&#160;&quot;year&quot;, 
&#160;&#160;&quot;&quot;,
&#160;&#160;fn:false())</Code>
<Code>
<A ID="pgfId-1077073"></A>
return admin:save-configuration(
&#160;&#160;admin:database-add-range-element-attribute-index(
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;$dbid, 
&#160;&#160;&#160;&#160;$rangespec))</Code>
<Heading-3>
<A ID="pgfId-1082568"></A>
<A ID="67481"></A>
Creating a Scheduled Backup of a Database</Heading-3>
<Body>
<A ID="pgfId-1082569"></A>
The following script creates a weekly backup of the <code>
Sample-Database</code>
 database and adds it to the configuration:</Body>
<Code>
<A ID="pgfId-1082570"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1082572"></A>
let $config := admin:get-configuration()
let $database := xdmp:database(&quot;Sample-Database&quot;)
let $backup := admin:database-weekly-backup(
&#160;&#160;&quot;c:/backup-dir&quot;, 
&#160;&#160;&quot;monday&quot;, 
&#160;&#160;xs:time(&quot;09:45:00&quot;),
&#160;&#160;10,
&#160;&#160;true(),
&#160;&#160;true(),
&#160;&#160;true())</Code>
<Code>
<A ID="pgfId-1082573"></A>
return
&#160;&#160;admin:save-configuration(
&#160;&#160;&#160;&#160;admin:database-add-backup($config, $database, $backup))</Code>
<Heading-3>
<A ID="pgfId-1082574"></A>
<A ID="66927"></A>
Creating and Configuring Databases in a Single Transaction</Heading-3>
<Body>
<A ID="pgfId-1083032"></A>
In this example, we create and configure the same databases as in the previous sections. Only the databases are created and configured in a single transaction. As described in <A href="usingAPI.xml#id(62829)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating and Configuring Objects in a Single Transaction' on page&#160;13</A>, we use the <code>
admin:database-get-id </code>
function to obtain the database IDs after creating the databases to configure the newly created databases in the same transaction. This example is abbreviated for the sake of simplicity and does not check for existing objects, as described in <A href="usingAPI.xml#id(92935)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Making Transactions Idempotent' on page&#160;15</A>.</Body>
<Note>
<A ID="pgfId-1084377"></A>
This example assumes the forests, <code>
SampleDB-Forest</code>
 and <code>
SampleModules-Forest</code>
, have been already been created in a separate transaction.</Note>
<Code>
<A ID="pgfId-1082896"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
         at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1082898"></A>
(: Get the configuration :)
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1082900"></A>
(: Add new databases to the configuration :)</Code>
<Code>
<A ID="pgfId-1083389"></A>
let $config := admin:database-create(
&#160;&#160;$config, 
&#160;&#160;&quot;Sample-Database&quot;,
&#160;&#160;xdmp:database(&quot;Security&quot;),
&#160;&#160;xdmp:database(&quot;Schemas&quot;))</Code>
<Code>
<A ID="pgfId-1083041"></A>
let $config := admin:database-create(
&#160;&#160;$config, 
&#160;&#160;&quot;Sample-Modules&quot;,
&#160;&#160;xdmp:database(&quot;Security&quot;),
&#160;&#160;xdmp:database(&quot;Schemas&quot;))</Code>
<Code>
<A ID="pgfId-1084387"></A>
(: Obtain the database IDs to configure the databases :)</Code>
<Code>
<A ID="pgfId-1084402"></A>
let $Sample-Database := admin:database-get-id(
&#160;&#160;$config, 
&#160;&#160;&quot;Sample-Database&quot;)</Code>
<Code>
<A ID="pgfId-1083440"></A>
let $Sample-Modules := admin:database-get-id(
&#160;&#160;$config, 
&#160;&#160;&quot;Sample-Modules&quot;)</Code>
<Code>
<A ID="pgfId-1082920"></A>
(: Attach the forest to the database. :)</Code>
<Code>
<A ID="pgfId-1082924"></A>
let $config := admin:database-attach-forest(
&#160;&#160;$config,
&#160;&#160;$Sample-Database,
&#160;&#160;xdmp:forest(&quot;SampleDB-Forest&quot;))</Code>
<Code>
<A ID="pgfId-1082925"></A>
let $config := admin:database-attach-forest(
&#160;&#160;$config,
&#160;&#160;$Sample-Modules, 
&#160;&#160;xdmp:forest(&quot;SampleModules-Forest&quot;))</Code>
<Code>
<A ID="pgfId-1082949"></A>
(: Add a 'wiki-suggest' field to the Sample-Database :)</Code>
<Code>
<A ID="pgfId-1084409"></A>
let $fieldspec := admin:database-field(
&#160;&#160;&quot;wiki-suggest&quot;, 
&#160;&#160;fn:false())</Code>
<Code>
<A ID="pgfId-1084308"></A>
let $config := admin:database-add-field(
&#160;&#160;$config, 
&#160;&#160;$Sample-Database, 
&#160;&#160;$fieldspec)</Code>
<Code>
<A ID="pgfId-1082963"></A>
(: Add included elements to 'wiki-suggest' field :)</Code>
<Code>
<A ID="pgfId-1084423"></A>
let $incfieldspec := admin:database-included-element(
&#160;&#160;&quot;http://marklogic.com/wikipedia&quot;, 
&#160;&#160;&quot;name&quot;, 
&#160;&#160;1.0, 
&#160;&#160;&quot;&quot;, 
&#160;&#160;&quot;&quot;, 
&#160;&#160;&quot;&quot;)</Code>
<Code>
<A ID="pgfId-1082964"></A>
let $config := admin:database-add-field-included-element(
&#160;&#160;$config, 
&#160;&#160;$Sample-Database, 
&#160;&#160;&quot;wiki-suggest&quot;, 
&#160;&#160;$incfieldspec) </Code>
<Code>
<A ID="pgfId-1082977"></A>
(: Add indexes to the Sample-Database :)</Code>
<Code>
<A ID="pgfId-1084430"></A>
let $rangespec := admin:database-range-element-index(
&#160;&#160;&quot;string&quot;, 
&#160;&#160;&quot;http://marklogic.com/wikipedia&quot;,
&#160;&#160;&quot;name&quot;, 
&#160;&#160;&quot;http://marklogic.com/collation/&quot;,
&#160;&#160;fn:false() )</Code>
<Code>
<A ID="pgfId-1082978"></A>
let $config := admin:database-add-range-element-index(
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;$Sample-Database, 
&#160;&#160;&#160;&#160;$rangespec)</Code>
<Code>
<A ID="pgfId-1082998"></A>
let $rangespec := admin:database-range-element-attribute-index(
&#160;&#160;&quot;gYear&quot;, 
&#160;&#160;&quot;http://marklogic.com/wikipedia&quot;,
&#160;&#160;&quot;nominee&quot;, 
&#160;&#160;&quot;&quot;, 
&#160;&#160;&quot;year&quot;, 
&#160;&#160;&quot;&quot;,
&#160;&#160;fn:false())</Code>
<Code>
<A ID="pgfId-1082999"></A>
let $config := admin:database-add-range-element-attribute-index(
&#160;&#160;$config, 
&#160;&#160;$Sample-Database,
&#160;&#160;$rangespec)</Code>
<Code>
<A ID="pgfId-1083020"></A>
(: Configure a scheduled backup of the Sample-Database :)</Code>
<Code>
<A ID="pgfId-1084367"></A>
let $backup := admin:database-weekly-backup(
&#160;&#160;&quot;c:/backup-dir&quot;, 
&#160;&#160;&quot;monday&quot;, 
&#160;&#160;xs:time(&quot;09:45:00&quot;),
&#160;&#160;10,
&#160;&#160;true(),
&#160;&#160;true(),
&#160;&#160;true())</Code>
<Code>
<A ID="pgfId-1083630"></A>
let $config := admin:database-add-backup(
&#160;&#160;$config, 
&#160;&#160;$Sample-Database, 
&#160;&#160;$backup)</Code>
<Code>
<A ID="pgfId-1083021"></A>
return
&#160;&#160;admin:save-configuration($config)</Code>
<Code>
<A ID="pgfId-1085088"></A>
</Code>
<Heading-3>
<A ID="pgfId-1085090"></A>
<A ID="89913"></A>
Deleting a Forest and Database</Heading-3>
<Body>
<A ID="pgfId-1085093"></A>
The following script deletes the forest and database created in <A href="configure.xml#id(66927)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating and Configuring Databases in a Single Transaction' on page&#160;26</A>:</Body>
<Code>
<A ID="pgfId-1085095"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1085096"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot;
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1085097"></A>
(: Get the configuration :)
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1085098"></A>
(: Delete the database from the configuration :)
let $config := admin:database-delete(
&#160;&#160;$config, 
&#160;&#160;admin:database-get-id($config, &quot;Sample-Database&quot;)) </Code>
<Code>
<A ID="pgfId-1085224"></A>
let $config := admin:database-delete(
&#160;&#160;$config, 
&#160;&#160;admin:database-get-id($config, &quot;Sample-Modules&quot;)) </Code>
<Code>
<A ID="pgfId-1085099"></A>
(: Save the configuration :)
return admin:save-configuration($config);</Code>
<Code>
<A ID="pgfId-1085100"></A>
(: Now that the database has been deleted, we can delete the forest :)</Code>
<Code>
<A ID="pgfId-1085101"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot;
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1085102"></A>
(: Get the configuration with the deleted database :)
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1085103"></A>
(: Delete the forest from the configuration :)
let $config := admin:forest-delete(
&#160;&#160;$config,
&#160;&#160;admin:forest-get-id($config, &quot;SampleDB-Forest&quot;),
&#160;&#160;fn:true())</Code>
<Code>
<A ID="pgfId-1085328"></A>
let $config := admin:forest-delete(
&#160;&#160;$config,
&#160;&#160;admin:forest-get-id($config, &quot;SampleModules-Forest&quot;),
&#160;&#160;fn:true())</Code>
<Code>
<A ID="pgfId-1085104"></A>
(: Save the configuration :)
return admin:save-configuration($config)</Code>
<Code>
<A ID="pgfId-1083010"></A>
</Code>
<Heading-2>
<A ID="pgfId-1075491"></A>
<A ID="52519"></A>
Creating and Configuring Groups</Heading-2>
<Body>
<A ID="pgfId-1088558"></A>
The general information on groups is provided in the <A href="../admin/groups.xml#id(34776)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Groups</Hyperlink>
</A> chapter in the <Emphasis>
Administrator's Guide</Emphasis>
.</Body>
<Body>
<A ID="pgfId-1086973"></A>
The sample configuration module that creates and configures groups is <A href="SampleProgram.xml#id(25949)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
groups.xqy</Hyperlink>
</A>. Though the code exists from creating a new group, it is not called by the <A href="SampleProgram.xml#id(88049)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
configure-server.xqy</Hyperlink>
</A> module because the <code>
Sample-Server</code>
 is created in the existing Default group. This section shows individual XQuery scripts that create and configure groups. See <A href="maintenance.xml#id(47962)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Group Maintenance Operations' on page&#160;76</A> for more examples on how to use the Admin functions to modify your groups and monitor their operation.</Body>
<Body>
<A ID="pgfId-1086614"></A>
The topics in this section are:</Body>
<Body-bullet>
<A ID="pgfId-1086618"></A>
<A href="configure.xml#id(90764)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a Group</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1086738"></A>
<A href="configure.xml#id(55344)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Enabling Auditing on a Group</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1086760"></A>
<A href="configure.xml#id(92539)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a New Namespace for a Group</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1086622"></A>
<A href="configure.xml#id(34547)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating and Configuring a Group in a Single Transaction</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1086626"></A>
<A href="configure.xml#id(47503)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Deleting a Group</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1086602"></A>
<A ID="90764"></A>
Creating a Group</Heading-3>
<Body>
<A ID="pgfId-1077439"></A>
The following script creates a new group, named <code>
Sample</code>
:</Body>
<Code>
<A ID="pgfId-1077440"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1077441"></A>
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1077442"></A>
return
&#160;&#160;admin:save-configuration(
&#160;&#160;&#160;&#160;admin:group-create($config, &quot;Sample&quot;))</Code>
<Heading-3>
<A ID="pgfId-1086716"></A>
<A ID="55344"></A>
Enabling Auditing on a Group</Heading-3>
<Body>
<A ID="pgfId-1077507"></A>
The following script enables auditing of <code>
user-configuration-change</code>
 and <code>
user-role-addition</code>
 events on the <code>
Sample</code>
 group:</Body>
<Code>
<A ID="pgfId-1077508"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1077509"></A>
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, &quot;Sample&quot;)</Code>
<Code>
<A ID="pgfId-1077510"></A>
(: Set user-configuration-change and user-role-addition events to be audited in the 'Sample' group. :)</Code>
<Code>
<A ID="pgfId-1077511"></A>
let $config := 
&#160;&#160;admin:group-enable-audit-event-type(
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;$groupid, 
&#160;&#160;&#160;&#160;(&quot;user-configuration-change&quot;, &quot;user-role-addition&quot;))</Code>
<Code>
<A ID="pgfId-1077512"></A>
(: Enable auditing for the 'Sample' group. :)</Code>
<Code>
<A ID="pgfId-1077513"></A>
return 
&#160;&#160;admin:save-configuration(
&#160;&#160;&#160;&#160;admin:group-set-audit-enabled($config, $groupid, fn:true()))</Code>
<Heading-3>
<A ID="pgfId-1077602"></A>
<A ID="92539"></A>
Creating a New Namespace for a Group</Heading-3>
<Body>
<A ID="pgfId-1086728"></A>
The following script creates a new namespace, named <code>
myprefix</code>
, and adds it to the <code>
Sample</code>
 group:</Body>
<Code>
<A ID="pgfId-1077603"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot;
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1077604"></A>
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, &quot;Sample&quot;)</Code>
<Code>
<A ID="pgfId-1079598"></A>
return
&#160;&#160;admin:save-configuration(
&#160;&#160;&#160;&#160;admin:group-add-namespace(
&#160;&#160;&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;&#160;&#160;$groupid,
&#160;&#160;&#160;&#160;&#160;&#160;admin:group-namespace(&quot;myprefix&quot;, &quot;http://myuri/namespace&quot;)))</Code>
<Heading-3>
<A ID="pgfId-1084959"></A>
<A ID="34547"></A>
Creating and Configuring a Group in a Single Transaction</Heading-3>
<Body>
<A ID="pgfId-1084990"></A>
In this example, we create and configure the same group as in the previous sections. Only the group is created and configured in a single transaction. As described in <A href="usingAPI.xml#id(62829)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating and Configuring Objects in a Single Transaction' on page&#160;13</A>, we use the <code>
admin:group-get-id</code>
 function to obtain the group ID after creating the group to configure the newly created group in the same transaction. This example is abbreviated for the sake of simplicity and does not check for existing objects, as described in <A href="usingAPI.xml#id(92935)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Making Transactions Idempotent' on page&#160;15</A>.</Body>
<Code>
<A ID="pgfId-1085716"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1085717"></A>
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1086004"></A>
(: Create the 'Sample' group :)
let $config := admin:group-create($config, &quot;Sample&quot;)</Code>
<Code>
<A ID="pgfId-1085815"></A>
(: Obtain the group ID to configure the group :)
let $SampleGroup := admin:group-get-id($config, &quot;Sample&quot;) </Code>
<Code>
<A ID="pgfId-1085877"></A>
(: Set user-configuration-change and user-role-addition events to be &#160;&#160;&#160;audited in the 'Sample' group. :)
let $config := admin:group-enable-audit-event-type(
&#160;&#160;$config, 
&#160;&#160;$SampleGroup, 
&#160;&#160;(&quot;user-configuration-change&quot;, &quot;user-role-addition&quot;))</Code>
<Code>
<A ID="pgfId-1085769"></A>
(: Enable auditing for the 'Sample' group. :)
let $config := admin:group-set-audit-enabled(
&#160;&#160;$config, 
&#160;&#160;$SampleGroup, 
&#160;&#160;fn:true())</Code>
<Code>
<A ID="pgfId-1085791"></A>
(: Add a namespace to the 'Sample' group. :)
let $config := admin:group-add-namespace(
&#160;&#160;$config, 
&#160;&#160;$SampleGroup,
&#160;&#160;admin:group-namespace(&quot;myprefix&quot;, &quot;http://myuri/namespace&quot;))</Code>
<Code>
<A ID="pgfId-1085757"></A>
return admin:save-configuration($config)</Code>
<Heading-3>
<A ID="pgfId-1085019"></A>
<A ID="47503"></A>
Deleting a Group</Heading-3>
<Body>
<A ID="pgfId-1085023"></A>
The following script deletes the group created in <A href="configure.xml#id(34547)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating and Configuring a Group in a Single Transaction' on page&#160;32</A>:</Body>
<Code>
<A ID="pgfId-1085024"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1085025"></A>
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1085026"></A>
return admin:save-configuration(
&#160;&#160;admin:group-delete(
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;admin:group-get-id($config, &quot;Sample&quot;)))</Code>
<Heading-2>
<A ID="pgfId-1075533"></A>
<A ID="18698"></A>
Creating and Configuring App Servers</Heading-2>
<Body>
<A ID="pgfId-1088602"></A>
The general information on App Servers is provided in the <A href="../admin/http.xml#id(28058)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
HTTP Servers</Hyperlink>
</A>, <A href="../admin/xdbc.xml#id(11456)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
XDBC Servers</Hyperlink>
</A>, and <A href="../admin/webdav.xml#id(65018)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
WebDAV Servers</Hyperlink>
</A> chapters in the <Emphasis>
Administrator's Guide</Emphasis>
.</Body>
<Body>
<A ID="pgfId-1087040"></A>
The sample configuration modules that create and configure App Servers are: <A href="SampleProgram.xml#id(88049)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
configure-server.xqy</Hyperlink>
</A> and <A href="SampleProgram.xml#id(25949)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
groups.xqy</Hyperlink>
</A>. The <A href="SampleProgram.xml#id(88049)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
configure-server.xqy</Hyperlink>
</A> module specifies the configuration-specific functions, which call the generic functions in the <A href="SampleProgram.xml#id(25949)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
groups.xqy</Hyperlink>
</A> module. This section shows individual XQuery scripts that perform similar tasks. See <A href="maintenance.xml#id(48123)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'App Server Maintenance Operations' on page&#160;82</A> for more examples on how to use the Admin functions to modify your App Servers and monitor their operation.</Body>
<Body>
<A ID="pgfId-1086847"></A>
This section describes:</Body>
<Body-bullet>
<A ID="pgfId-1086851"></A>
<A href="configure.xml#id(11533)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating an App Server</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1086855"></A>
<A href="configure.xml#id(81122)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Setting a URL Rewriter on an App Server</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1086859"></A>
<A href="configure.xml#id(67847)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Setting the Concurrent Request Limit on an App Server</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1086863"></A>
<A href="configure.xml#id(50071)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Enabling Display Last-Login on an App Server</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1086867"></A>
<A href="configure.xml#id(79025)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating and Configuring an App Server in a Single Transaction</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1086948"></A>
<A href="configure.xml#id(83142)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Deleting an App Server</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1086826"></A>
<A ID="11533"></A>
Creating an App Server</Heading-3>
<Body>
<A ID="pgfId-1077472"></A>
The following script creates a new HTTP server in the <code>
Sample</code>
 group, named <code>
Sample-Server</code>
, at port <code>
8016</code>
. The <code>
application/ </code>
directory is the root, the <code>
Sample-Database</code>
 is the content database and <code>
Sample-Modules</code>
 is the modules database:</Body>
<Code>
<A ID="pgfId-1077473"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1077474"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot;
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1077475"></A>
(: Get the configuration :)
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1077476"></A>
(: Get the group under which to create the App Server :)
let $groupid := admin:group-get-id($config, &quot;Sample&quot;)</Code>
<Code>
<A ID="pgfId-1077477"></A>
(: Add the new App Server to the configuration :)
let $server := admin:http-server-create(
&#160;&#160;$config, 
&#160;&#160;$groupid,
&#160;&#160;&quot;Sample-Server&quot;, 
&#160;&#160;&quot;application/&quot;,
&#160;&#160;8016,
&#160;&#160;admin:database-get-id($config, &quot;Sample-Modules&quot;),
&#160;&#160;admin:database-get-id($config, &quot;Sample-Database&quot;))</Code>
<Code>
<A ID="pgfId-1077478"></A>
(: Save the configuration :)
return admin:save-configuration($server);</Code>
<Heading-3>
<A ID="pgfId-1086836"></A>
<A ID="81122"></A>
Setting a URL Rewriter on an App Server</Heading-3>
<Body>
<A ID="pgfId-1077479"></A>
The following script sets the <code>
rewriter.xqy</code>
 module to rewrite the URL from clients to an internal URL:</Body>
<Code>
<A ID="pgfId-1082720"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1077480"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1077481"></A>
(: Get the configuration containing the new App Server :)
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1077482"></A>
(: Get the group for the App Server :)
let $groupid := admin:group-get-id($config, &quot;Sample&quot;)</Code>
<Code>
<A ID="pgfId-1077483"></A>
(: Set the URL rewriter :)
let $urlrewriter := admin:appserver-set-url-rewriter(
&#160;&#160;$config,
&#160;&#160;admin:appserver-get-id($config, $groupid, &quot;Sample-Server&quot;),
&#160;&#160;&quot;rewriter.xqy&quot;)</Code>
<Code>
<A ID="pgfId-1077484"></A>
(: Save the configuration :)
return admin:save-configuration($urlrewriter)</Code>
<Heading-3>
<A ID="pgfId-1077530"></A>
<A ID="67847"></A>
Setting the Concurrent Request Limit on an App Server</Heading-3>
<Body>
<A ID="pgfId-1077531"></A>
The following script sets the Concurrent Request Limit for the 'Sample-Server' App Server to 15:</Body>
<Code>
<A ID="pgfId-1077532"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1077533"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1077534"></A>
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, &quot;Sample&quot;)</Code>
<Code>
<A ID="pgfId-1077535"></A>
return
&#160;&#160;admin:save-configuration(
&#160;&#160;&#160;&#160;admin:appserver-set-concurrent-request-limit(
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;admin:appserver-get-id($config, $groupid, &quot;Sample-Server&quot;),
&#160;&#160;&#160;&#160;5))</Code>
<Heading-3>
<A ID="pgfId-1077537"></A>
<A ID="50071"></A>
Enabling Display Last-Login on an App Server</Heading-3>
<Body>
<A ID="pgfId-1077538"></A>
The following script enables Display Last Login on the 'Sample-Server' App Server, using the 'Last-Login' database:</Body>
<Code>
<A ID="pgfId-1077539"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1077540"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1077541"></A>
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, &quot;Sample&quot;)
let $config2 := admin:appserver-set-last-login(
&#160;&#160;$config, 
&#160;&#160;admin:appserver-get-id($config, $groupid, &quot;Sample-Server&quot;),
&#160;&#160;xdmp:database(&quot;Last-Login&quot;))</Code>
<Code>
<A ID="pgfId-1077542"></A>
return admin:save-configuration(
&#160;&#160;admin:appserver-set-display-last-login(
&#160;&#160;&#160;&#160;$config2,
&#160;&#160;&#160;&#160;admin:appserver-get-id($config, $groupid, &quot;Sample-Server&quot;),
&#160;&#160;&#160;&#160;fn:true()))</Code>
<Heading-3>
<A ID="pgfId-1085072"></A>
<A ID="79025"></A>
Creating and Configuring an App Server in a Single Transaction</Heading-3>
<Body>
<A ID="pgfId-1085590"></A>
In this example, we create and configure the same App Server as in the previous sections. Only the App Server is created and configured in a single transaction. As described in <A href="usingAPI.xml#id(62829)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating and Configuring Objects in a Single Transaction' on page&#160;13</A>, we use the <code>
admin:appserver-get-id</code>
 function to obtain the App Server ID after creating the App Server to configure the newly created App Server in the same transaction. This example is abbreviated for the sake of simplicity and does not check for existing objects, as described in <A href="usingAPI.xml#id(92935)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Making Transactions Idempotent' on page&#160;15</A>.</Body>
<Code>
<A ID="pgfId-1086070"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1086071"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot;
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1086072"></A>
(: Get the configuration :)
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1086073"></A>
(: Get the group under which to create the App Server :)
let $groupid := admin:group-get-id($config, &quot;Sample&quot;)</Code>
<Code>
<A ID="pgfId-1086074"></A>
(: Add the new App Server to the configuration :)
let $config := admin:http-server-create(
&#160;&#160;$config, 
&#160;&#160;$groupid,
&#160;&#160;&quot;Sample-Server&quot;, 
&#160;&#160;&quot;application/&quot;,
&#160;&#160;8016,
&#160;&#160;admin:database-get-id($config, &quot;Sample-Modules&quot;),
&#160;&#160;admin:database-get-id($config, &quot;Sample-Database&quot;))</Code>
<Code>
<A ID="pgfId-1086186"></A>
let $Sample-Server := admin:appserver-get-id(
&#160;&#160;$config, 
&#160;&#160;$groupid, 
&#160;&#160;&quot;Sample-Server&quot;)</Code>
<Code>
<A ID="pgfId-1086123"></A>
(: Set the URL rewriter :)
let $config := admin:appserver-set-url-rewriter(
&#160;&#160;$config,
&#160;&#160;$Sample-Server,
&#160;&#160;&quot;rewriter.xqy&quot;)</Code>
<Code>
<A ID="pgfId-1086160"></A>
let $config := admin:appserver-set-concurrent-request-limit(
&#160;&#160;$config, 
&#160;&#160;$Sample-Server,
&#160;&#160;15)</Code>
<Code>
<A ID="pgfId-1086174"></A>
let $config := admin:appserver-set-last-login(
&#160;&#160;$config, 
&#160;&#160;$Sample-Server,
&#160;&#160;xdmp:database(&quot;Last-Login&quot;))</Code>
<Code>
<A ID="pgfId-1086175"></A>
let $config := admin:appserver-set-display-last-login(
&#160;&#160;$config,
&#160;&#160;$Sample-Server,
&#160;&#160;fn:true())</Code>
<Code>
<A ID="pgfId-1086149"></A>
return admin:save-configuration($config)</Code>
<Heading-3>
<A ID="pgfId-1085049"></A>
<A ID="83142"></A>
Deleting an App Server</Heading-3>
<Body>
<A ID="pgfId-1085052"></A>
The following script deletes the HTTP server created in <A href="configure.xml#id(79025)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating and Configuring an App Server in a Single Transaction' on page&#160;36</A>:</Body>
<Code>
<A ID="pgfId-1085054"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1085055"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot;
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1085056"></A>
(: Get the configuration :)
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1085057"></A>
(: Get the group from which to delete the App Server :)
let $groupid := admin:group-get-id($config, &quot;Default&quot;)</Code>
<Code>
<A ID="pgfId-1085058"></A>
(: Delete the App Server from the configuration :)
let $config := admin:appserver-delete(
&#160;&#160;$config, 
&#160;&#160;admin:appserver-get-id($config, $groupid, &quot;Sample-Server&quot;))</Code>
<Code>
<A ID="pgfId-1085059"></A>
(: Save the configuration :)
return admin:save-configuration($config)</Code>
<Heading-2>
<A ID="pgfId-1075558"></A>
<A ID="80160"></A>
Creating and Configuring Roles and Users</Heading-2>
<Body>
<A ID="pgfId-1088670"></A>
The general information on users and roles is provided in the <A href="../admin/security.xml#id(73923)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Security Administration</Hyperlink>
</A> chapter in the <Emphasis>
Administrator's Guide</Emphasis>
.</Body>
<Body>
<A ID="pgfId-1092929"></A>
The sample configuration module that creates and configures roles and users is: <A href="SampleProgram.xml#id(51964)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
configure-security.xqy</Hyperlink>
</A>. This section shows an individual XQuery script that creates a new role, named <code>
Temporary</code>
, and two new users, named <code>
Tom </code>
and <code>
Sue</code>
. The new role is given the default collection, <code>
testDocument</code>
, and is assigned the privilege, <code>
unprotected-collections</code>
. Jim is given the default permission, <code>
security(read)</code>
. See <A href="maintenance.xml#id(11687)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'User Maintenance Operations' on page&#160;99</A> for more examples on how to use the Security library functions to modify security objects and monitor their operation.</Body>
<Note>
<A ID="pgfId-1087386"></A>
Security objects must be created in the Security database. See <A href="usingAPI.xml#id(82435)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Executing Queries in Select Databases' on page&#160;20</A> for techniques on how to execute queries in a database other than the one set for your App Server.</Note>
<Code>
<A ID="pgfId-1077562"></A>
(: run this against the Security database :)</Code>
<Code>
<A ID="pgfId-1087715"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace sec=&quot;http://marklogic.com/xdmp/security&quot; 
&#160;&#160;at &quot;/MarkLogic/security.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1087737"></A>
(: Create new role :)</Code>
<Code>
<A ID="pgfId-1077565"></A>
sec:create-role(
&#160;&#160;&quot;Temporary&quot;,
&#160;&#160;&quot;Temporary worker access&quot;,
&#160;&#160;(&quot;filesystem-access&quot;),
&#160;&#160;(),
&#160;&#160;(&quot;testDocument&quot;));</Code>
<Code>
<A ID="pgfId-1077566"></A>
(: Now that the role is created, we can assign it a new privilege and assign the role to new users :)</Code>
<Code>
<A ID="pgfId-1087745"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace sec=&quot;http://marklogic.com/xdmp/security&quot; 
&#160;&#160;at &quot;/MarkLogic/security.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1077567"></A>
(: Add the ‘Temporary' role to the list of roles with ‘unprotected-collections' privilege :)</Code>
<Code>
<A ID="pgfId-1077569"></A>
sec:privilege-add-roles(
&#160;&#160;&quot;http://marklogic.com/xdmp/privileges/unprotected-collections&quot;,
&#160;&#160;&quot;execute&quot;,
&#160;&#160;(&quot;Temporary&quot;)),</Code>
<Code>
<A ID="pgfId-1077570"></A>
(: Create two new users with the role, ‘Temporary'. :)</Code>
<Code>
<A ID="pgfId-1077571"></A>
sec:create-user(
&#160;&#160;&quot;Jim&quot;,
&#160;&#160;&quot;Jim the temp&quot;,
&#160;&#160;&quot;newtemp&quot;,
&#160;&#160;&quot;Temporary&quot;,
&#160;&#160;(xdmp:permission(&quot;security&quot;, &quot;read&quot;)),
&#160;&#160;()),</Code>
<Code>
<A ID="pgfId-1077572"></A>
sec:create-user(
&#160;&#160;&quot;Sue&quot;,
&#160;&#160;&quot;Sue the temp&quot;,
&#160;&#160;&quot;newtemp&quot;,
&#160;&#160;&quot;Temporary&quot;,
&#160;&#160;(),
&#160;&#160;()) </Code>
<Body>
<A ID="pgfId-1087549"></A>
</Body>
</XML>
