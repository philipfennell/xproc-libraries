<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="maintenance.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1048410"></A>
<A ID="54748"></A>
Server Maintenance Operations</Heading-1>
<pagenum>
<A ID="pgfId-1078886"></A>
100</pagenum>
<Body>
<A ID="pgfId-1076929"></A>
This chapter describes how to use the Admin API to automate some of the operations you might want to perform on an existing MarkLogic Server configuration.</Body>
<Body>
<A ID="pgfId-1076936"></A>
The main topics in this chapter are:</Body>
<Body-bullet>
<A ID="pgfId-1076837"></A>
<A href="maintenance.xml#id(47962)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Group Maintenance Operations</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1078149"></A>
<A href="maintenance.xml#id(48123)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
App Server Maintenance Operations</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1076859"></A>
<A href="maintenance.xml#id(23137)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Database Maintenance Operations</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1076881"></A>
<A href="maintenance.xml#id(97760)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Host Maintenance Operations</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1076903"></A>
<A href="maintenance.xml#id(11687)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
User Maintenance Operations</Hyperlink>
</A></Body-bullet>
<Heading-2>
<A ID="pgfId-1078008"></A>
<A ID="47962"></A>
Group Maintenance Operations</Heading-2>
<Body>
<A ID="pgfId-1078184"></A>
The operations for creating and deleting groups are described in <A href="configure.xml#id(52519)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating and Configuring Groups' on page&#160;30</A>. This section describes how to use the Admin API to automate some of the operations you might want to perform on an existing group.</Body>
<Body>
<A ID="pgfId-1078009"></A>
The topics in this section are:</Body>
<Body-bullet>
<A ID="pgfId-1078013"></A>
<A href="maintenance.xml#id(97608)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Enabling Auditing on a Group</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1078017"></A>
<A href="maintenance.xml#id(51623)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Disabling Auditing on a Group</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1078021"></A>
<A href="maintenance.xml#id(10012)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Removing Events to be Audited on a Group</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1078025"></A>
<A href="maintenance.xml#id(67532)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Adding a Namespace to a Group</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1078029"></A>
<A href="maintenance.xml#id(10689)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Returning the Namespace Settings on a Group</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1078033"></A>
<A href="maintenance.xml#id(91313)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Deleting a Namespace from a Group</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1078037"></A>
<A href="maintenance.xml#id(88286)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Returning the System Log Settings</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1078041"></A>
<A href="maintenance.xml#id(85420)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Resetting the System Log Settings</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1078045"></A>
<A href="maintenance.xml#id(90672)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a New Hourly Task</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1078049"></A>
<A href="maintenance.xml#id(11088)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Deleting all Scheduled Tasks from a Group</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1078051"></A>
<A ID="97608"></A>
Enabling Auditing on a Group</Heading-3>
<Body>
<A ID="pgfId-1078052"></A>
The following script enables auditing of <code>
user-configuration-change</code>
 and <code>
user-role-addition</code>
 events on the 'Default' group:</Body>
<Code>
<A ID="pgfId-1078053"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078054"></A>
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, &quot;Default&quot;)</Code>
<Code>
<A ID="pgfId-1078055"></A>
(: Set user-configuration-change and user-role-addition events to be audited in the 'Default' group. :)</Code>
<Code>
<A ID="pgfId-1078056"></A>
let $config := admin:group-enable-audit-event-type(
&#160;&#160;$config, 
&#160;&#160;$groupid, 
&#160;&#160;(&quot;user-configuration-change&quot;,&quot;user-role-addition&quot;))</Code>
<Code>
<A ID="pgfId-1078057"></A>
(: Enable auditing for the 'Default' group. :)</Code>
<Code>
<A ID="pgfId-1078058"></A>
return admin:save-configuration(
&#160;&#160;admin:group-set-audit-enabled($config, $groupid, fn:true()))</Code>
<Heading-3>
<A ID="pgfId-1078060"></A>
<A ID="51623"></A>
Disabling Auditing on a Group</Heading-3>
<Body>
<A ID="pgfId-1078061"></A>
The following script disables auditing of all events on the 'Default' group:</Body>
<Code>
<A ID="pgfId-1078062"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078063"></A>
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, &quot;Default&quot;)</Code>
<Code>
<A ID="pgfId-1078064"></A>
return admin:save-configuration(
&#160;&#160;admin:group-set-audit-enabled($config, $groupid, fn:false()))</Code>
<Heading-3>
<A ID="pgfId-1078066"></A>
<A ID="10012"></A>
Removing Events to be Audited on a Group</Heading-3>
<Body>
<A ID="pgfId-1078067"></A>
The following script disables auditing of <code>
user-configuration-change</code>
 and <code>
user-role-addition</code>
 events on the 'Default' group:</Body>
<Code>
<A ID="pgfId-1078068"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078069"></A>
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, &quot;Default&quot;)</Code>
<Code>
<A ID="pgfId-1084846"></A>
return admin:save-configuration(
&#160;&#160;admin:group-disable-audit-event-type(
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;$groupid, 
&#160;&#160;&#160;&#160;(&quot;user-configuration-change&quot;,&quot;user-role-addition&quot;)))</Code>
<Heading-3>
<A ID="pgfId-1084849"></A>
<A ID="67532"></A>
Adding a Namespace to a Group</Heading-3>
<Body>
<A ID="pgfId-1084850"></A>
The following script creates a new namespace, named 'myprefix,' and adds it to the 'Default' group:</Body>
<Code>
<A ID="pgfId-1084851"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot;
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1084852"></A>
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, &quot;Default&quot;)</Code>
<Code>
<A ID="pgfId-1084853"></A>
return admin:save-configuration( 
&#160;&#160;admin:group-add-namespace(
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;$groupid,
&#160;&#160;&#160;&#160;admin:group-namespace(&quot;myprefix&quot;, &quot;http://myuri/namespace&quot;)))</Code>
<Heading-3>
<A ID="pgfId-1084855"></A>
<A ID="10689"></A>
Returning the Namespace Settings on a Group</Heading-3>
<Body>
<A ID="pgfId-1078081"></A>
The following script returns the namespaces set for the 'Default' group:</Body>
<Code>
<A ID="pgfId-1078082"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot;
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078083"></A>
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, &quot;Default&quot;)</Code>
<Code>
<A ID="pgfId-1078084"></A>
return admin:group-get-namespaces($config, $groupid)</Code>
<Heading-3>
<A ID="pgfId-1078086"></A>
<A ID="91313"></A>
Deleting a Namespace from a Group</Heading-3>
<Body>
<A ID="pgfId-1078087"></A>
The following script deletes the 'myprefix' namespace from the 'Default' group:</Body>
<Code>
<A ID="pgfId-1078088"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot;
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078089"></A>
declare namespace group = &quot;http://marklogic.com/xdmp/group&quot;;</Code>
<Code>
<A ID="pgfId-1078090"></A>
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, &quot;Default&quot;)</Code>
<Code>
<A ID="pgfId-1078091"></A>
return admin:save-configuration( 
&#160;&#160;admin:group-delete-namespace(
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;$groupid,
&#160;&#160;&#160;&#160;admin:group-get-namespaces($config, $groupid)
&#160;&#160;&#160;&#160;&#160;&#160;[group:prefix eq &quot;myprefix&quot;]))</Code>
<Heading-3>
<A ID="pgfId-1078096"></A>
<A ID="88286"></A>
<A ID="49795"></A>
Returning the System Log Settings</Heading-3>
<Body>
<A ID="pgfId-1078097"></A>
The following script returns the current system log settings for the 'Default' group:</Body>
<Code>
<A ID="pgfId-1078098"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078099"></A>
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, &quot;Default&quot;)</Code>
<Code>
<A ID="pgfId-1078100"></A>
return 
&#160;&#160;admin:group-get-system-log-level($config, $groupid)</Code>
<Code>
<A ID="pgfId-1078101"></A>
return (
&#160;&#160;fn:concat(&quot;Log Level Setting: &quot;,
&#160;&#160;&#160;&#160;admin:group-get-system-log-level($config, $groupid)),
&#160;&#160;fn:concat(&quot;Number of Log Files Kept: &quot;,
&#160;&#160;&#160;&#160;admin:group-get-keep-log-files($config, $groupid)),
&#160;&#160;fn:concat(&quot;Log File Rotation Frequency: &quot;,
&#160;&#160;&#160;&#160;admin:group-get-rotate-log-files($config, $groupid)))</Code>
<Heading-3>
<A ID="pgfId-1078103"></A>
<A ID="85420"></A>
Resetting the System Log Settings</Heading-3>
<Body>
<A ID="pgfId-1078104"></A>
The following script resets the system log settings for the 'Default' group:</Body>
<Code>
<A ID="pgfId-1078105"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078106"></A>
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1079292"></A>
let $groupid := admin:group-get-id(
&#160;&#160;$config, 
&#160;&#160;&quot;Default&quot;)</Code>
<Code>
<A ID="pgfId-1079317"></A>
let $config := admin:group-set-system-log-level(
&#160;&#160;$config, 
&#160;&#160;$groupid, 
&#160;&#160;&quot;debug&quot;)</Code>
<Code>
<A ID="pgfId-1079360"></A>
let $config := admin:group-set-keep-log-files(
&#160;&#160;$config, 
&#160;&#160;$groupid, 
&#160;&#160;3)</Code>
<Code>
<A ID="pgfId-1078107"></A>
return admin:save-configuration(
&#160;&#160;admin:group-set-rotate-log-files(
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;$groupid, 
&#160;&#160;&#160;&#160;&quot;friday&quot;))</Code>
<Heading-3>
<A ID="pgfId-1078110"></A>
<A ID="90672"></A>
<A ID="17935"></A>
Creating a New Hourly Task</Heading-3>
<Body>
<A ID="pgfId-1078111"></A>
The following script creates an hourly scheduled task to invoke the <code>
Scheduler_test.xqy</code>
 module every two hours and adds it to the &quot;Default&quot; group:</Body>
<Code>
<A ID="pgfId-1078112"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078113"></A>
let $config := admin:get-configuration() </Code>
<Code>
<A ID="pgfId-1078114"></A>
let $task := admin:group-hourly-scheduled-task(
&#160;&#160;&quot;Scheduler_test.xqy&quot;,
&#160;&#160;&quot;/Docs&quot;,
&#160;&#160;2,
&#160;&#160;30,
&#160;&#160;xdmp:database(&quot;Sample-Database&quot;),
&#160;&#160;0,
&#160;&#160;xdmp:user(&quot;Jim&quot;),
&#160;&#160;0)</Code>
<Code>
<A ID="pgfId-1078115"></A>
let $config := admin:group-add-scheduled-task(
&#160;&#160;$config, 
&#160;&#160;admin:group-get-id($config, &quot;Default&quot;), 
&#160;&#160;$task)</Code>
<Code>
<A ID="pgfId-1078116"></A>
return admin:save-configuration($config)</Code>
<Heading-3>
<A ID="pgfId-1078118"></A>
<A ID="11088"></A>
Deleting all Scheduled Tasks from a Group</Heading-3>
<Body>
<A ID="pgfId-1078119"></A>
The following script deletes all of the scheduled tasks in the &quot;Default&quot; group:</Body>
<Code>
<A ID="pgfId-1078120"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078121"></A>
let $config := admin:get-configuration()
let $group := admin:group-get-id($config, &quot;Default&quot;)
let $tasks := admin:group-get-scheduled-tasks($config, $group)</Code>
<Code>
<A ID="pgfId-1078122"></A>
return admin:group-delete-scheduled-task($config, $group, $tasks)</Code>
<Heading-2>
<A ID="pgfId-1072629"></A>
<A ID="48123"></A>
App Server Maintenance Operations</Heading-2>
<Body>
<A ID="pgfId-1077993"></A>
The operations for creating and deleting App Servers are described in <A href="configure.xml#id(18698)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating and Configuring App Servers' on page&#160;33</A>. This section describes how to use the Admin API to automate some of the operations you might want to perform on an existing App Server.</Body>
<Body>
<A ID="pgfId-1076802"></A>
The topics are:</Body>
<Body-bullet>
<A ID="pgfId-1076948"></A>
<A href="maintenance.xml#id(85375)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Modifying the App Server Root for an HTTP App Server</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1076967"></A>
<A href="maintenance.xml#id(22012)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Changing the App Server Root and Cloning the Changed App Server</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1076989"></A>
<A href="maintenance.xml#id(55408)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Enabling SSL on an App Server</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077011"></A>
<A href="maintenance.xml#id(78164)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Generating a Certificate Request</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077033"></A>
<A href="maintenance.xml#id(66473)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Importing a Signed Certificate into the Database</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1076804"></A>
<A ID="85375"></A>
Modifying the App Server Root for an HTTP App Server</Heading-3>
<Body>
<A ID="pgfId-1076805"></A>
The following example modifies an App Server configuration by changing its root from the relative path <code>
myRoot</code>
 to the absolute path <code>
/space/myRoot</code>
.</Body>
<Code>
<A ID="pgfId-1076806"></A>
xquery version &quot;1.0-ml&quot;;

import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1080861"></A>
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, &quot;Default&quot;)</Code>
<Code>
<A ID="pgfId-1080854"></A>
let $appserverid := admin:appserver-get-id(
&#160;&#160;$config, 
&#160;&#160;$groupid,
&#160;&#160;&quot;Sample-Server&quot;)</Code>
<Code>
<A ID="pgfId-1080847"></A>
let $config := admin:appserver-set-root(
&#160;&#160;$config, 
&#160;&#160;$appserverid,
&#160;&#160;&quot;/space/myRoot&quot;)</Code>
<Code>
<A ID="pgfId-1080840"></A>
return admin:save-configuration($config)</Code>
<Heading-3>
<A ID="pgfId-1076808"></A>
<A ID="22012"></A>
Changing the App Server Root and Cloning the Changed App Server</Heading-3>
<Body>
<A ID="pgfId-1076809"></A>
The following example does the same thing as the previous example (modifies the HTTP App Server root), and then it also takes that modified configuration and creates another App Server with the same settings but a different name.</Body>
<Code>
<A ID="pgfId-1076810"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1080870"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
    at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1080879"></A>
let $config := admin:get-configuration()
let $groupid := admin:group-get-id($config, &quot;Default&quot;)</Code>
<Code>
<A ID="pgfId-1080973"></A>
let $appserverid := admin:appserver-get-id(
&#160;&#160;$config, 
&#160;&#160;$groupid,
&#160;&#160;&quot;Sample-Server&quot;)</Code>
<Code>
<A ID="pgfId-1080966"></A>
let $config := admin:appserver-set-root(
&#160;&#160;$config, 
&#160;&#160;$appserverid,
&#160;&#160;&quot;/space/myRoot&quot;)</Code>
<Code>
<A ID="pgfId-1080980"></A>
let $config := admin:appserver-copy(
&#160;&#160;$config, 
&#160;&#160;$appserverid, 
&#160;&#160;(), 
&#160;&#160;&quot;newHTTPServer&quot;, 
&#160;&#160;9021)</Code>
<Code>
<A ID="pgfId-1081047"></A>
return admin:save-configuration($config)</Code>
<Body>
<A ID="pgfId-1076811"></A>
This will result in both changes to the configuration, the change in root to <code>
Sample-Server</code>
 and the <code>
newHTTPServer</code>
 being created. </Body>
<Heading-3>
<A ID="pgfId-1078356"></A>
<A ID="55408"></A>
Enabling SSL on an App Server</Heading-3>
<Body>
<A ID="pgfId-1078822"></A>
The <A href="../admin/SSL.xml#id(85783)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Configuring SSL on App Servers</Hyperlink>
</A> chapter in the <Emphasis>
Administrator's Guide</Emphasis>
 describes how to use the Admin UI to enable SSL on an App Server. The following sections describe how to enable SSL on an App Server using the Admin and PKI APIs:</Body>
<Body-bullet>
<A ID="pgfId-1078738"></A>
<A href="maintenance.xml#id(99824)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a Certificate Template</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1078752"></A>
<A href="maintenance.xml#id(78164)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Generating a Certificate Request</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1078774"></A>
<A href="maintenance.xml#id(66473)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Importing a Signed Certificate into the Database</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1078799"></A>
<A href="maintenance.xml#id(73173)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Setting a Certificate Template on an App Server</Hyperlink>
</A></Body-bullet>
<Heading-4>
<A ID="pgfId-1072889"></A>
<A ID="99824"></A>
Creating a Certificate Template</Heading-4>
<Body>
<A ID="pgfId-1072890"></A>
The following script creates a new certificate template, named <code>
newTemplate</code>
, and inserts it into the Security database:</Body>
<Code>
<A ID="pgfId-1072891"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace pki = &quot;http://marklogic.com/xdmp/pki&quot; 
&#160;&#160;at &quot;/MarkLogic/pki.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1072892"></A>
declare namespace x509 = &quot;http://marklogic.com/xdmp/x509&quot;;
declare namespace ssl = &quot;http://marklogic.com/xdmp/ssl&quot;;</Code>
<Code>
<A ID="pgfId-1072893"></A>
let $x509 := 
&#160;&#160;&lt;x509:req&gt;
&#160;&#160;&#160;&#160;&lt;x509:version&gt;2&lt;/x509:version&gt;
&#160;&#160;&#160;&#160;&lt;x509:subject&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;x509:countryName&gt;US&lt;/x509:countryName&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;x509:stateOrProvinceName&gt;CA&lt;/x509:stateOrProvinceName&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;x509:localityName&gt;San Carlos&lt;/x509:localityName&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;x509:organizationName&gt;MarkLogic&lt;/x509:organizationName&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;x509:organizationalUnitName&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Engineering
&#160;&#160;&#160;&#160;&#160;&#160;&lt;/x509:organizationalUnitName&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;x509:commonName&gt;my.host.com&lt;/x509:commonName&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;x509:emailAddress&gt;user@marklogic.com&lt;/x509:emailAddress&gt;
&#160;&#160;&#160;&#160;&lt;/x509:subject&gt;
&#160;&#160;&#160;&#160;&lt;x509:v3ext&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;x509:nsCertType critical=&quot;false&quot;&gt;SSL Server&lt;/x509:nsCertType&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;x509:subjectAltName&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DNS:marklogic.com, IP:127.0.0.1 
&#160;&#160;&#160;&#160;&#160;&#160;&lt;/x509:subjectAltName&gt;
&#160;&#160;&#160;&#160;&lt;/x509:v3ext&gt;
&#160;&#160;&lt;/x509:req&gt;</Code>
<Code>
<A ID="pgfId-1072894"></A>
let $options := 
&#160;&#160;&lt;pki:key-options xmlns=&quot;ssl:options&quot;&gt;
&#160;&#160;&#160;&#160;&lt;key-length&gt;2048&lt;/key-length&gt;
&#160;&#160;&lt;/pki:key-options&gt;</Code>
<Code>
<A ID="pgfId-1072895"></A>
return pki:insert-template(
&#160;&#160;pki:create-template(
&#160;&#160;&#160;&#160;&quot;newTemplate&quot;,
&#160;&#160;&#160;&#160;&quot;Creating a new template&quot;,
&#160;&#160;&#160;&#160;&quot;rsa&quot;,
&#160;&#160;&#160;&#160;$options,
&#160;&#160;&#160;&#160;$x509))</Code>
<Heading-4>
<A ID="pgfId-1072912"></A>
<A ID="78164"></A>
<A ID="19756"></A>
Generating a Certificate Request</Heading-4>
<Body>
<A ID="pgfId-1072915"></A>
The following script generates a certificate request from the certificate template created in <A href="maintenance.xml#id(55408)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Enabling SSL on an App Server' on page&#160;83</A>:</Body>
<Code>
<A ID="pgfId-1072917"></A>
xquery version &quot;1.0-ml&quot;; 
import module namespace pki = &quot;http://marklogic.com/xdmp/pki&quot;
&#160;&#160;at &quot;/MarkLogic/pki.xqy&quot;; </Code>
<Code>
<A ID="pgfId-1072918"></A>
let $tid := pki:template-get-id(
&#160;&#160;pki:get-template-by-name(&quot;newTemplate&quot;))</Code>
<Code>
<A ID="pgfId-1072919"></A>
return pki:generate-certificate-request(
&#160;&#160;$tid, 
&#160;&#160;(), 
&#160;&#160;&quot;marklogic.com&quot;, 
&#160;&#160;&quot;127.0.0.1&quot;)</Code>
<Heading-4>
<A ID="pgfId-1072921"></A>
<A ID="66473"></A>
Importing a Signed Certificate into the Database</Heading-4>
<Body>
<A ID="pgfId-1072922"></A>
The following script imports the PEM-encoded signed certificate from the Sample_cert.cer file into the Security database:</Body>
<Code>
<A ID="pgfId-1072923"></A>
xquery version &quot;1.0-ml&quot;; 
import module namespace pki = &quot;http://marklogic.com/xdmp/pki&quot; 
&#160;&#160;at &quot;/MarkLogic/pki.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1072924"></A>
pki:insert-signed-certificates(
&#160;&#160;xdmp:document-get(
&#160;&#160;&#160;&#160;&quot;c:\SignedCertificates\Sample_cert.cer&quot;, 
&#160;&#160;&#160;&#160;&lt;options xmlns=&quot;xdmp:document-get&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;format&gt;text&lt;/format&gt;
&#160;&#160;&#160;&#160;&lt;/options&gt;))</Code>
<Heading-4>
<A ID="pgfId-1078343"></A>
<A ID="73173"></A>
Setting a Certificate Template on an App Server</Heading-4>
<Body>
<A ID="pgfId-1078380"></A>
The following script sets the PEM-encoded signed certificate in the Security database on the Sample-Server App Server:</Body>
<Code>
<A ID="pgfId-1078381"></A>
xquery version &quot;1.0-ml&quot;; 
import module namespace pki = &quot;http://marklogic.com/xdmp/pki&quot; 
&#160;&#160;at &quot;/MarkLogic/pki.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078424"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1078427"></A>
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1078428"></A>
let $appServer := admin:appserver-get-id(
&#160;&#160;$config, 
&#160;&#160;admin:group-get-id($config, &quot;Default&quot;), 
&#160;&#160;&quot;Sample-Server&quot;)</Code>
<Code>
<A ID="pgfId-1078431"></A>
let $tid := pki:template-get-id(pki:get-template-by-name(&quot;mycert&quot;))</Code>
<Code>
<A ID="pgfId-1078571"></A>
return admin:save-configuration(
&#160;&#160;admin:appserver-set-ssl-certificate-template(
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;$appServer, 
&#160;&#160;&#160;&#160;$tid))</Code>
<Heading-2>
<A ID="pgfId-1073107"></A>
<A ID="23137"></A>
Database Maintenance Operations</Heading-2>
<Body>
<A ID="pgfId-1078217"></A>
The operations for creating and deleting forests and databases are described in <A href="configure.xml#id(77067)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Creating and Configuring Forests and Databases' on page&#160;21</A>. This section describes how to use the Admin API to automate some of the operations you might want to perform on an existing database and/or forest.</Body>
<Body>
<A ID="pgfId-1077345"></A>
The topics in this section are:</Body>
<Body-bullet>
<A ID="pgfId-1077385"></A>
<A href="maintenance.xml#id(55729)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating a Database by Cloning an Existing Database Configuration</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077405"></A>
<A href="maintenance.xml#id(38269)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Returning the Size of the Forests in a Database</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077427"></A>
<A href="maintenance.xml#id(62433)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Disabling Database Merges</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077449"></A>
<A href="maintenance.xml#id(52832)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Deleting Element and Attribute Range Indexes</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077471"></A>
<A href="maintenance.xml#id(92727)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Adding a Fragment Root to a Database</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077493"></A>
<A href="maintenance.xml#id(83443)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Returning the Fragment Roots Set in a Database</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077518"></A>
<A href="maintenance.xml#id(46718)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Deleting a Fragment Root from a Database</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077540"></A>
<A href="maintenance.xml#id(82745)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Merging the Forests in a Database</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077562"></A>
<A href="maintenance.xml#id(55002)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Backing Up a Database</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077584"></A>
<A href="maintenance.xml#id(74348)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Restoring from a Previous Backup</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077606"></A>
<A href="maintenance.xml#id(34972)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Scheduling Forest Backups</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077628"></A>
<A href="maintenance.xml#id(29436)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Alerting the Administrator if the Forest Grows Beyond its Maximum Allowable Size</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077650"></A>
<A href="maintenance.xml#id(28245)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Rotating Forest Update Types</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1076772"></A>
<A ID="55729"></A>
Creating a Database by Cloning an Existing Database Configuration</Heading-3>
<Body>
<A ID="pgfId-1076773"></A>
The following example creates a new database with the exact same setup (including index settings, fragmentation, range indexes, and so on) as an existing database. It uses the <code>
admin:database-copy</code>
 function to clone the database.</Body>
<Code>
<A ID="pgfId-1076774"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
    at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1082415"></A>
let $config := admin:get-configuration()
let $config := admin:database-copy(
&#160;&#160;$config,
&#160;&#160;xdmp:database(&quot;myOldDatabase&quot;), 
&#160;&#160;&quot;myNewDatabase&quot;)</Code>
<Code>
<A ID="pgfId-1082380"></A>
return admin:save-configuration($config)</Code>
<Body>
<A ID="pgfId-1076775"></A>
After running this XQuery program, a new database configuration named <code>
myNewDatabase</code>
 is created with the same settings as the database named <code>
myOldDatabase</code>
. Note that this database will not have any forests attached to it, as forests can only be attached to a single database.</Body>
<Heading-3>
<A ID="pgfId-1073171"></A>
<A ID="38269"></A>
Returning the Size of the Forests in a Database</Heading-3>
<Body>
<A ID="pgfId-1073172"></A>
The following script returns the size of all of the forests in the 'Sample-Database' database:</Body>
<Code>
<A ID="pgfId-1082434"></A>
xquery version &quot;1.0-ml&quot;; 
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1082435"></A>
declare namespace forest = &quot;http://marklogic.com/xdmp/status/forest&quot;;</Code>
<Code>
<A ID="pgfId-1073175"></A>
(: Get all of the forests in the 'Sample-Database database. :)
for $forests in xdmp:forest-status(
&#160;&#160;xdmp:database-forests(xdmp:database(&quot;Sample-Database&quot;)))</Code>
<Code>
<A ID="pgfId-1073176"></A>
(: Get the remaining disk space for each forest device. :)
&#160;&#160;let $space := $forests//forest:device-space</Code>
<Code>
<A ID="pgfId-1073177"></A>
(: Get the name of each forest. :)
&#160;&#160;let $f_name := $forests//forest:forest-name</Code>
<Code>
<A ID="pgfId-1073178"></A>
(: The size of a forest is the sum of its stand sizes. :)
&#160;&#160;for $stand in $forests//forest:stands
&#160;&#160;&#160;&#160;let $f_size := fn:sum($stand/forest:stand/forest:disk-size)</Code>
<Code>
<A ID="pgfId-1073179"></A>
(: Return the name and size for each forest and remaining 
&#160;&#160;&#160;disk space. :)
return fn:concat(
&#160;&#160;&quot;Forest Name: &quot;, 
&#160;&#160;fn:string($f_name), 
&#160;&#160;&quot;  Forest Size: &quot;, 
&#160;&#160;fn:string($f_size),
&#160;&#160;&quot;  Disk Space Left: &quot;, 
&#160;&#160;$space)</Code>
<Heading-3>
<A ID="pgfId-1073242"></A>
<A ID="62433"></A>
Disabling Database Merges</Heading-3>
<Body>
<A ID="pgfId-1073243"></A>
The following script disables merges on the 'Sample-Database' database:</Body>
<Code>
<A ID="pgfId-1073244"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1073245"></A>
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1073246"></A>
return admin:save-configuration( 
&#160;&#160;admin:database-set-merge-enable( 
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;xdmp:database(&quot;Sample-Database&quot;), 
&#160;&#160;&#160;&#160;fn:false())) </Code>
<Heading-3>
<A ID="pgfId-1076598"></A>
<A ID="52832"></A>
Deleting Element and Attribute Range Indexes</Heading-3>
<Body>
<A ID="pgfId-1076599"></A>
The following script deletes the range element index and the range element attribute index created in the previous two examples from the 'Sample-Database' database:</Body>
<Code>
<A ID="pgfId-1076600"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1076601"></A>
let $config := admin:get-configuration()
let $dbid := xdmp:database(&quot;Sample-Database&quot;)</Code>
<Code>
<A ID="pgfId-1082720"></A>
let $elem-rangespec := admin:database-range-element-index(
&#160;&#160;&quot;date&quot;, 
&#160;&#160;&quot;/myco/employees&quot;,
&#160;&#160;&quot;birthday&quot;, 
&#160;&#160;&quot;&quot;,
&#160;&#160;fn:false() )</Code>
<Code>
<A ID="pgfId-1076602"></A>
let $elem-attr-rangespec :=
&#160;&#160;admin:database-range-element-attribute-index(
&#160;&#160;&#160;&#160;&quot;date&quot;, 
&#160;&#160;&#160;&#160;&quot;/myco/employees&quot;,
&#160;&#160;&#160;&#160;&quot;Personal&quot;, 
&#160;&#160;&#160;&#160;&quot;&quot;, 
&#160;&#160;&#160;&#160;&quot;birthday hire-date&quot;, 
&#160;&#160;&#160;&#160;&quot;&quot;,
&#160;&#160;&#160;&#160;fn:false())</Code>
<Code>
<A ID="pgfId-1076603"></A>
let $config2 := admin:database-delete-range-element-index(
&#160;&#160;$config, 
&#160;&#160;$dbid, 
&#160;&#160;$elem-rangespec)</Code>
<Code>
<A ID="pgfId-1076604"></A>
return admin:save-configuration(
&#160;&#160;admin:database-delete-range-element-attribute-index( 
&#160;&#160;&#160;&#160;$config2, 
&#160;&#160;&#160;&#160;$dbid, 
&#160;&#160;&#160;&#160;$elem-attr-rangespec))</Code>
<Heading-3>
<A ID="pgfId-1076607"></A>
<A ID="92727"></A>
Adding a Fragment Root to a Database</Heading-3>
<Body>
<A ID="pgfId-1076608"></A>
The following script adds a fragment root specification for the 'TITLE' element to the 'Sample-Database' database:</Body>
<Code>
<A ID="pgfId-1076609"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1076610"></A>
let $config := admin:get-configuration()
let $dbid := xdmp:database(&quot;Sample-Database&quot;)
let $fragspec := admin:database-fragment-root(
&#160;&#160;&quot;/shakespeare/plays&quot;, 
&#160;&#160;&quot;TITLE&quot;)</Code>
<Code>
<A ID="pgfId-1076611"></A>
return &#160;&#160;admin:save-configuration( 
&#160;&#160;admin:database-add-fragment-root(
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;$dbid, 
&#160;&#160;&#160;&#160;$fragspec))</Code>
<Heading-3>
<A ID="pgfId-1076613"></A>
<A ID="83443"></A>
Returning the Fragment Roots Set in a Database</Heading-3>
<Body>
<A ID="pgfId-1076614"></A>
The following script returns the fragment root specifications set in the 'Sample-Database' database:</Body>
<Code>
<A ID="pgfId-1076615"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1076616"></A>
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1076617"></A>
return admin:database-get-fragment-roots(
&#160;&#160;$config, 
&#160;&#160;xdmp:database(&quot;Sample-Database&quot;))</Code>
<Heading-3>
<A ID="pgfId-1076619"></A>
<A ID="46718"></A>
Deleting a Fragment Root from a Database</Heading-3>
<Body>
<A ID="pgfId-1076620"></A>
The following script deletes the fragment root specification for the 'TITLE' element from the 'Sample-Database' database:</Body>
<Code>
<A ID="pgfId-1076621"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1076622"></A>
let $config := admin:get-configuration()
let $dbid := xdmp:database(&quot;Sample-Database&quot;)
let $fragspec := admin:database-fragment-root(
&#160;&#160;&quot;/shakespeare/plays&quot;, 
&#160;&#160;&quot;TITLE&quot;)</Code>
<Code>
<A ID="pgfId-1076623"></A>
return admin:save-configuration( 
&#160;&#160;admin:database-delete-fragment-root($config, $dbid, $fragspec))</Code>
<Heading-3>
<A ID="pgfId-1073248"></A>
<A ID="82745"></A>
Merging the Forests in a Database</Heading-3>
<Body>
<A ID="pgfId-1073249"></A>
The following script merges four forests in the database with the specification to not leave any single stand larger than 50MB. For example, if the forest size is 180 MB, this script would merge the content into four stands:</Body>
<Code>
<A ID="pgfId-1073250"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1073251"></A>
xdmp:merge(
&#160;&#160;&lt;options xmlns=&quot;xdmp:merge&quot;&gt;
&#160;&#160;&#160;&#160;&lt;merge-max-size&gt;50&lt;/merge-max-size&gt;
&#160;&#160;&#160;&#160;&lt;forests&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;forest&gt;{xdmp:forest(&quot;myforest1&quot;)}&lt;/forest&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;forest&gt;{xdmp:forest(&quot;myforest2&quot;)}&lt;/forest&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;forest&gt;{xdmp:forest(&quot;myforest3&quot;)}&lt;/forest&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&lt;forest&gt;{xdmp:forest(&quot;myforest4&quot;)}&lt;/forest&gt;
&#160;&#160;&#160;&#160;&lt;/forests&gt;
&#160;&#160;&lt;/options&gt;) </Code>
<Heading-3>
<A ID="pgfId-1073308"></A>
<A ID="55002"></A>
<A ID="16342"></A>
Backing Up a Database</Heading-3>
<Body>
<A ID="pgfId-1073309"></A>
The following script immediately backs up all of the forests in the 'Sample-Database' database to the /backup-dir directory:</Body>
<Code>
<A ID="pgfId-1073310"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1073311"></A>
xdmp:database-backup(
&#160;&#160;xdmp:database-forests(xdmp:database(&quot;Sample-Database&quot;)), 
&#160;&#160;&quot;c:/backup-dir&quot;)</Code>
<Heading-3>
<A ID="pgfId-1073320"></A>
<A ID="74348"></A>
Restoring from a Previous Backup</Heading-3>
<Body>
<A ID="pgfId-1073321"></A>
The following script restores the 'Sample-Database' database from the backup taken on 3/19/2009:</Body>
<Code>
<A ID="pgfId-1073322"></A>
xquery version &quot;1.0-ml&quot;;</Code>
<Code>
<A ID="pgfId-1076278"></A>
xdmp:database-restore( 
&#160;&#160;xdmp:database-forests(xdmp:database(&quot;Sample-Database&quot;)), 
&#160;&#160;&quot;c:/backup-dir/20090319-1&quot;)</Code>
<Heading-3>
<A ID="pgfId-1076379"></A>
<A ID="34972"></A>
Scheduling Forest Backups</Heading-3>
<Body>
<A ID="pgfId-1076380"></A>
The following script establishes a backup schedule for all of the forests in the 'Sample-Database' database:</Body>
<Code>
<A ID="pgfId-1076381"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1076382"></A>
(: Get the configuration :)
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1076383"></A>
(: Set up the backup elements. :)
let $backup := admin:forest-weekly-backup(
&#160;&#160;&quot;/backup-dir&quot;, 
&#160;&#160;&quot;friday&quot;, 
&#160;&#160;xs:time(&quot;23:00:00&quot;))</Code>
<Code>
<A ID="pgfId-1076384"></A>
(: Get all of the forests in the 'Sample-Database' database. :)
for $forest in admin:database-get-attached-forests(
&#160;&#160;$config, 
&#160;&#160;xdmp:database(&quot;Sample-Database&quot;))</Code>
<Code>
<A ID="pgfId-1076385"></A>
(: Add the backup elements to each forest configuration. :)
return admin:forest-add-backup(
&#160;&#160;$config,
&#160;&#160;$forest, 
&#160;&#160;$backup)</Code>
<Heading-3>
<A ID="pgfId-1076387"></A>
<A ID="29436"></A>
Alerting the Administrator if the Forest Grows Beyond its Maximum Allowable Size</Heading-3>
<Body>
<A ID="pgfId-1076388"></A>
The following script checks the amount of disk space used by the forests in the 'Sample-Database' database against the available disk space on the forest devices. If the size of a forest surpasses its maximum allowable size, an event is logged and an email is sent to <code>
urgent@mycompany.com</code>
. Such a script could be executed periodically using the scheduling features described in <A href="../admin/scheduling_tasks.xml#id(44210)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Scheduling Tasks</Hyperlink>
</A> in the <Emphasis>
Administrator's Guide</Emphasis>
.</Body>
<Code>
<A ID="pgfId-1076392"></A>
xquery version &quot;1.0-ml&quot;; 
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1076393"></A>
declare namespace forest = &quot;http://marklogic.com/xdmp/status/forest&quot;;</Code>
<Code>
<A ID="pgfId-1076394"></A>
(: Get all of the forests in the 'Sample-Database' database. :)
&#160;&#160;&#160;for $forests in xdmp:forest-status(
&#160;&#160;xdmp:database-forests(xdmp:database(&quot;Sample-Database&quot;)))</Code>
<Code>
<A ID="pgfId-1076395"></A>
(: Get the remaining disk space for each forest device. :)
&#160;&#160;let $space := $forests//forest:device-space</Code>
<Code>
<A ID="pgfId-1076396"></A>
(: Get the name of each forest. :)
&#160;&#160;let $f_name := $forests//forest:forest-name</Code>
<Code>
<A ID="pgfId-1076397"></A>
(: The size of a forest is the sum of its stand sizes. :)
&#160;&#160;for $stand in $forests//forest:stands
&#160;&#160;&#160;&#160;&#160;let $f_size := fn:sum($stand/forest:stand/forest:disk-size)</Code>
<Code>
<A ID="pgfId-1076398"></A>
(: The maximum size of the forest is calculated by multiplying the 
&#160;&#160;&#160;size of the forest by 3 and comparing that value against the
&#160;&#160;&#160;available disk space - 1000 MB. If the forest grows beyond its
&#160;&#160;&#160;maximum size, log the event and send an email alert to the
&#160;&#160;&#160;administrator. :)</Code>
<Code>
<A ID="pgfId-1083810"></A>
&#160;&#160;return </Code>
<Code>
<A ID="pgfId-1084022"></A>
&#160;&#160;&#160;&#160;if (($f_size * 3) &gt; ($space - 1000))</Code>
<Code>
<A ID="pgfId-1084015"></A>
&#160;&#160;&#160;&#160;then (xdmp:log(
&#160;&#160;&#160;&#160;&#160;&#160;fn:concat($f_name, &quot; forest space check status: Failed&quot;),
&#160;&#160;&#160;&#160;&#160;&#160;&quot;emergency&quot;),
&#160;&#160;&#160;&#160;&#160;&#160;xdmp:email(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;em:Message
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xmlns:em=&quot;URN:ietf:params:email-xml:&quot; 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xmlns:rf=&quot;URN:ietf:params:rfc822:&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;rf:subject&gt;Forest Space Check Failure&lt;/rf:subject&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;rf:from&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;em:Address&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;em:name&gt;MarkLogic Server&lt;/em:name&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;em:adrs&gt;no_return@mycompany.com&lt;/em:adrs&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/em:Address&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/rf:from&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;rf:to&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;em:Address&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;em:name&gt;System Administrator&lt;/em:name&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;em:adrs&gt;urgent@mycompany.com&lt;/em:adrs&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/em:Address&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/rf:to&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;em:content xml:space=&quot;preserve&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{fn:concat($f_name, &quot; forest space check status: Failed&quot;)}
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/em:content&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/em:Message&gt;))</Code>
<Code>
<A ID="pgfId-1084035"></A>
&#160;&#160;&#160;&#160;else (xdmp:log(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn:concat($f_name, &quot; forest space check status: Passed&quot;)))</Code>
<Heading-3>
<A ID="pgfId-1076401"></A>
<A ID="28245"></A>
Rotating Forest Update Types</Heading-3>
<Body>
<A ID="pgfId-1076405"></A>
As described in <A href="../admin/forests.xml#id(85362)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Making a Forest Delete-Only</Hyperlink>
</A>, in the <Emphasis>
Administrator's Guide</Emphasis>
, there may be circumstances in which you have multiple forests in a database and you want to manage which forests change. The following script checks the status of each forest's update type in the database, 'Sample-Database,' and changes any forest with an update type of <code>
all</code>
 to <code>
delete-only</code>
 and any forest with an update type of <code>
delete-only </code>
to <code>
all</code>
. Such a script could be executed periodically as a scheduled task.</Body>
<WarningList>
<Warning>
<A ID="pgfId-1076409"></A>
Applications that use a database containing <code>
delete-only</code>
 forests must specify an updateable forest in the <code>
xdmp:document-insert</code>
 function. Otherwise an insert to a document on a <code>
delete-only</code>
 forest returns an error.</Warning>
</WarningList>
<Code>
<A ID="pgfId-1076413"></A>
xquery version &quot;1.0-ml&quot;; 
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1076414"></A>
declare namespace forest = &quot;http://marklogic.com/xdmp/status/forest&quot;;</Code>
<Code>
<A ID="pgfId-1076415"></A>
(: Get the configuration :)
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1076416"></A>
(: Update the configuration :)
let $new-config :=</Code>
<Code>
<A ID="pgfId-1076417"></A>
(: Get all of the forests in the 'Sample-Database' database. :)
for $forests in xdmp:forest-status(
&#160;&#160;xdmp:database-forests(xdmp:database(&quot;Sample-Database&quot;)))</Code>
<Code>
<A ID="pgfId-1076418"></A>
(: Get the id of each forest. :)
&#160;&#160;let $f_id := $forests//forest:forest-id</Code>
<Code>
<A ID="pgfId-1076419"></A>
(: Get the name of each forest. :)
&#160;&#160;let $f_name := $forests//forest:forest-name</Code>
<Code>
<A ID="pgfId-1076420"></A>
(: Get the updates allowed status of each forest. :)
&#160;&#160;let $f_updates := $forests//forest:updates-allowed</Code>
<Code>
<A ID="pgfId-1076421"></A>
(: Reset the update type for the 'delete-only' forests to 'all' and the 'all' forests to 'delete-only'. Add a log message for each update. :)</Code>
<Code>
<A ID="pgfId-1076422"></A>
return
&#160;&#160;if ($f_updates eq &quot;all&quot;)
&#160;&#160;&#160;&#160;then (
&#160;&#160;&#160;&#160;&#160;&#160;xdmp:log(fn:concat(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;Setting &quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$f_name, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot; forest with updates set to &quot;,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$f_updates, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot; to delete-only&quot;)),
&#160;&#160;&#160;&#160;&#160;&#160;xdmp:set(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;admin:forest-set-updates-allowed(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$f_id, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;delete-only&quot;)) )</Code>
<Code>
<A ID="pgfId-1084242"></A>
&#160;&#160;&#160;&#160;else ( 
&#160;&#160;&#160;&#160;&#160;&#160;xdmp:log(fn:concat(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;Setting &quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$f_name, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot; forest with updates set to &quot;,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$f_updates, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot; forest to 'all'&quot;)),</Code>
<Code>
<A ID="pgfId-1084228"></A>
&#160;&#160;&#160;&#160;&#160;&#160;xdmp:set($config, admin:forest-set-updates-allowed(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$config,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$f_id,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;all&quot;))
&#160;&#160;&#160;&#160;)</Code>
<Code>
<A ID="pgfId-1076423"></A>
return admin:save-configuration($config)</Code>
<Body>
<A ID="pgfId-1076424"></A>
The example script below does the same thing as the above script using a different approach. The script above creates and sets the configuration once for each forest. The script below uses a function that returns a single configuration for all of the forests in the database. Though the script below contains more complex logic, it represents the type of script you would want to use in a production environment:</Body>
<Code>
<A ID="pgfId-1076425"></A>
xquery version &quot;1.0-ml&quot;; </Code>
<Code>
<A ID="pgfId-1076426"></A>
declare namespace forest = &quot;http://marklogic.com/xdmp/status/forest&quot;;</Code>
<Code>
<A ID="pgfId-1076427"></A>
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;; </Code>
<Code>
<A ID="pgfId-1076428"></A>
(: Function accepts the empty configuration sequence and list of forests and returns the final configuration. :)</Code>
<Code>
<A ID="pgfId-1076429"></A>
declare function local:change-update-types(
&#160;&#160;$config as element(configuration)*,
&#160;&#160;$forests as xs:unsignedLong*) as element(configuration)
{</Code>
<Code>
<A ID="pgfId-1076430"></A>
(: The first time through the loop, get the configuration. After that, continue to build on the modified configuration. :)
if (fn:empty($config)) 
&#160;&#160;&#160;then xdmp:set($config, admin:get-configuration()) 
&#160;&#160;&#160;else (),</Code>
<Code>
<A ID="pgfId-1076431"></A>
(: Reset the update type for the 'delete-only' forests to 'all' and 
&#160;&#160;&#160;the 'all' forests to 'delete-only'. When complete, return the
&#160;&#160;&#160;configuration. :)</Code>
<Code>
<A ID="pgfId-1076432"></A>
(: Determine whether there are remaining forests. If not, return 
&#160;&#160;&#160;the final configuration. :)
if (fn:count($forests) lt 1) 
&#160;&#160;&#160;then ($config) </Code>
<Code>
<A ID="pgfId-1076433"></A>
(: Convert the update type for the next forest in the sequence. Add a log message for each conversion. :)
&#160;&#160;&#160;else ( 
&#160;&#160;&#160;&#160;let $f_updates := 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xdmp:forest-status($forests[1])//forest:updates-allowed
&#160;&#160;&#160;&#160;let $name := xdmp:forest-name($forests[1])
&#160;&#160;&#160;&#160;return (
&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ($f_updates eq &quot;all&quot;)</Code>
<Code>
<A ID="pgfId-1084412"></A>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;then (
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xdmp:log(fn:concat(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;Setting &quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$name, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot; forest with updates set to &quot;,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$f_updates, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot; to delete-only&quot;)),</Code>
<Code>
<A ID="pgfId-1084360"></A>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xdmp:set($config, admin:forest-set-updates-allowed(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$forests[1],
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;delete-only&quot;)))</Code>
<Code>
<A ID="pgfId-1084405"></A>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else ( 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xdmp:log(fn:concat(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;Setting &quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$name, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot; forest with updates set to &quot;,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$f_updates, &quot; forest to 'all'&quot;)),</Code>
<Code>
<A ID="pgfId-1084398"></A>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;xdmp:set($config, admin:forest-set-updates-allowed(
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$config,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;$forests[1],
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;all&quot;))),</Code>
<Code>
<A ID="pgfId-1076434"></A>
(: Function calls itself for each remaining forest in the sequence. :)</Code>
<Code>
<A ID="pgfId-1084419"></A>
&#160;&#160;&#160;&#160;local:change-update-types($config, $forests[2 to last()])
&#160;&#160;&#160;&#160;)
&#160;&#160;)
};</Code>
<Code>
<A ID="pgfId-1076435"></A>
(: Main :)</Code>
<Code>
<A ID="pgfId-1076436"></A>
(: Define $config as an empty sequence. The function uses this as a flag to determine whether or not to get the initial configuration. :)
let $config := ()</Code>
<Code>
<A ID="pgfId-1076437"></A>
(: Obtain the id of each forest in the database. :)
let $forests := &#160;&#160;xdmp:database-forests(xdmp:database(&quot;Sample-Database&quot;))</Code>
<Code>
<A ID="pgfId-1076438"></A>
(: Call the change-update-types function and set the returned configuration. :)
return admin:save-configuration(
&#160;&#160;local:change-update-types($config, $forests))</Code>
<Heading-2>
<A ID="pgfId-1076280"></A>
<A ID="97760"></A>
Host Maintenance Operations</Heading-2>
<Body>
<A ID="pgfId-1078252"></A>
This section describes how to use the Admin API to automate some of the operations you might want to perform on an existing host.</Body>
<Body>
<A ID="pgfId-1077702"></A>
The topics in this section are:</Body>
<Body-bullet>
<A ID="pgfId-1077758"></A>
<A href="maintenance.xml#id(77841)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Returning the Status of the Host</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077775"></A>
<A href="maintenance.xml#id(42628)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Returning the Time Host was Last Started</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077797"></A>
<A href="maintenance.xml#id(46615)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Restarting MarkLogic Server on all Hosts in the Cluster</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1073374"></A>
<A ID="77841"></A>
Returning the Status of the Host</Heading-3>
<Body>
<A ID="pgfId-1073375"></A>
The following script returns the current status of the local host:</Body>
<Code>
<A ID="pgfId-1073376"></A>
xquery version &quot;1.0-ml&quot;; 
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1073377"></A>
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1073378"></A>
return xdmp:host-status(
&#160;&#160;admin:host-get-id($config, xdmp:host-name()))</Code>
<Heading-3>
<A ID="pgfId-1073380"></A>
<A ID="42628"></A>
Returning the Time Host was Last Started</Heading-3>
<Body>
<A ID="pgfId-1073381"></A>
The following script returns the time the local host was last started:</Body>
<Code>
<A ID="pgfId-1073382"></A>
xquery version &quot;1.0-ml&quot;; 
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1073383"></A>
declare namespace host = &quot;http://marklogic.com/xdmp/status/host&quot;;</Code>
<Code>
<A ID="pgfId-1073384"></A>
let $config := admin:get-configuration()</Code>
<Code>
<A ID="pgfId-1073385"></A>
for $i in (xdmp:host-status(
&#160;&#160;admin:host-get-id(
&#160;&#160;$config, 
&#160;&#160;xdmp:host-name())))//host:last-startup 
return 
&#160;&#160;fn:string($i) </Code>
<Heading-3>
<A ID="pgfId-1073390"></A>
<A ID="46615"></A>
Restarting MarkLogic Server on all Hosts in the Cluster</Heading-3>
<Body>
<A ID="pgfId-1073394"></A>
The following script restarts MarkLogic Server on all of the hosts in the cluster that contains the host invoking the script (including the invoking host):</Body>
<Code>
<A ID="pgfId-1073395"></A>
xquery version &quot;1.0-ml&quot;;
import module namespace admin = &quot;http://marklogic.com/xdmp/admin&quot; 
&#160;&#160;at &quot;/MarkLogic/admin.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1073396"></A>
declare namespace host=&quot;http://marklogic.com/xdmp/status/host&quot;;</Code>
<Code>
<A ID="pgfId-1073397"></A>
let $hostids := for $id in xdmp:host-status(xdmp:host())
&#160;&#160;/host:hosts//host:host/host:host-id
&#160;&#160;&#160;&#160;return fn:data($id)</Code>
<Code>
<A ID="pgfId-1073398"></A>
return admin:restart-hosts($hostids)</Code>
<Heading-2>
<A ID="pgfId-1076562"></A>
<A ID="11687"></A>
User Maintenance Operations</Heading-2>
<Body>
<A ID="pgfId-1078906"></A>
This section describes the user and role maintenance operations that make use of the functions in the <code>
security.xqy</code>
 library module. All calls to functions in the <code>
security.xqy</code>
 library module must be executed against the Security database. For information on how to execute queries to databases other than the one set for your App Server, see <A href="usingAPI.xml#id(82435)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Executing Queries in Select Databases' on page&#160;20</A>.</Body>
<Body>
<A ID="pgfId-1077895"></A>
The topics in this section are:</Body>
<Body-bullet>
<A ID="pgfId-1077907"></A>
<A href="maintenance.xml#id(37663)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Removing all Users with a Specific Role</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077920"></A>
<A href="maintenance.xml#id(63138)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Removing a Specific Role, if Present</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1077942"></A>
<A href="maintenance.xml#id(65797)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Retrieving the Last-Login Information</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1076564"></A>
<A ID="37663"></A>
Removing all Users with a Specific Role</Heading-3>
<Body>
<A ID="pgfId-1073627"></A>
The following script removes all users assigned the role, <code>
Temporary</code>
:</Body>
<Code>
<A ID="pgfId-1073628"></A>
(: run this against the Security database :)</Code>
<Code>
<A ID="pgfId-1073629"></A>
xquery version &quot;1.0-ml&quot;;
import module &quot;http://marklogic.com/xdmp/security&quot; 
&#160;&#160;at &quot;/MarkLogic/security.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1073630"></A>
for $user in fn:data(//sec:user-name)
&#160;&#160;return 
&#160;&#160;&#160;&#160;if (fn:matches(sec:user-get-roles($user), &quot;Temporary&quot;))
&#160;&#160;&#160;&#160;&#160;&#160;&#160;then (fn:concat(&quot;Removed:  &quot;, $user), sec:remove-user($user))
&#160;&#160;&#160;&#160;&#160;&#160;&#160;else ()</Code>
<Heading-3>
<A ID="pgfId-1073632"></A>
<A ID="63138"></A>
Removing a Specific Role, if Present</Heading-3>
<Body>
<A ID="pgfId-1073633"></A>
The following script removes the role, <code>
Temporary</code>
, if present:</Body>
<Code>
<A ID="pgfId-1073634"></A>
xquery version &quot;1.0-ml&quot;;
import module &quot;http://marklogic.com/xdmp/security&quot; 
&#160;&#160;at &quot;/MarkLogic/security.xqy&quot;;</Code>
<Code>
<A ID="pgfId-1073635"></A>
for $role in fn:data(//sec:role-name)
&#160;&#160;return 
&#160;&#160;&#160;&#160;if (fn:matches($role, &quot;Temporary&quot;))
&#160;&#160;&#160;&#160;&#160;&#160;then (fn:concat(&quot;Removed:  &quot;, $role), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sec:remove-role(&quot;Temporary&quot;))
&#160;&#160;&#160;&#160;&#160;&#160;else ()</Code>
<Code>
<A ID="pgfId-1073709"></A>
return admin:save-configuration(
&#160;&#160;admin:database-add-range-element-attribute-index(
&#160;&#160;&#160;&#160;$config, 
&#160;&#160;&#160;&#160;$dbid, 
&#160;&#160;&#160;&#160;$rangespec))</Code>
<Heading-3>
<A ID="pgfId-1076731"></A>
<A ID="65797"></A>
Retrieving the Last-Login Information</Heading-3>
<Body>
<A ID="pgfId-1076732"></A>
The <code>
xdmp:user-last-login</code>
 function returns an XML node with information about the last successful login, last unsuccessful login, and the number of unsuccessful login attempts for a user. If there is no last-login database configured, then the function returns the empty sequence.</Body>
<Body>
<A ID="pgfId-1076733"></A>
The following is a very simple program that demonstrates how to use this information to add a message to your application. It uses the display-last-login field to determine whether to display anything.</Body>
<Code>
<A ID="pgfId-1076734"></A>
xquery version &quot;1.0-ml&quot;;
declare namespace ll=&quot;http://marklogic.com/xdmp/last-login&quot;;</Code>
<Code>
<A ID="pgfId-1084732"></A>
let $last := xdmp:user-last-login()
return
( if ($last/ll:display-last-login/text() eq &quot;true&quot;)
&#160;&#160;&#160;&#160;then ( fn:concat(&quot;You are logged in as the user '&quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;xdmp:get-current-user(), 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;' (&quot;, fn:data($last/ll:user-id), &quot;) &quot;, 
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;who last successfully logged in on &quot;,
&#160;&#160;&#160;&#160;&#160;&#160;&#160;$last/ll:last-successful-login, &quot;.&quot;) )
&#160;&#160;&#160;&#160;else ()&#160;&#160;)</Code>
<Body>
<A ID="pgfId-1076735"></A>
This script returns output similar to the following:</Body>
<Code>
<A ID="pgfId-1076736"></A>
You are logged in as the user 'Jim' (893641345095093063) who last successfully logged in on 2008-07-15T16:13:54-07:00.</Code>
<Body>
<A ID="pgfId-1073875"></A>
</Body>
</XML>
