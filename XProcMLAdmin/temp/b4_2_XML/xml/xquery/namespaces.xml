<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="namespaces.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1043258"></A>
<A ID="82094"></A>
Understanding XML Namespaces in XQuery</Heading-1>
<pagenum>
<A ID="pgfId-1051602"></A>
56</pagenum>
<Body>
<A ID="pgfId-1043267"></A>
XQuery is designed to work well with XML content, allowing many convenient ways to search through XML elements and attributes as well as making it easy to output XML from an XQuery program. When working with XML, you must understand a little about the XML data model, and one fundamental aspect of the XML data model is namespaces. This chapter describes XML namespaces and how they are important in XQuery, and includes the following sections:</Body>
<Body-bullet>
<A ID="pgfId-1054995"></A>
<A href="namespaces.xml#id(87639)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
XML QNames, Local Names, and Namespaces</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1055003"></A>
<A href="namespaces.xml#id(67268)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Everything Is In a Namespace</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1055008"></A>
<A href="namespaces.xml#id(26964)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
XML Data Model Versus Serialized XML</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1055013"></A>
<A href="namespaces.xml#id(41175)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Declaring a Default Element Namespace in XQuery</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1055018"></A>
<A href="namespaces.xml#id(55147)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Tips For Constructing QNames</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059254"></A>
<A href="namespaces.xml#id(21104)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Predefined Namespace Prefixes for Each Dialect</Hyperlink>
</A></Body-bullet>
<Heading-2>
<A ID="pgfId-1043268"></A>
<A ID="87639"></A>
XML QNames, Local Names, and Namespaces</Heading-2>
<Body>
<A ID="pgfId-1043269"></A>
XML uses qualified names, also called <Emphasis>
QNames</Emphasis>
, to uniquely identify elements and attributes. A QName for an XML element or attribute has two parts: the <Emphasis>
namespace name</Emphasis>
 and the <Emphasis>
local name</Emphasis>
. Together, the namespace and local name uniquely define how the element or attribute is identified. Additionally, the QName also retains its namespace prefix, if there is one. A namespace prefix binds a namespace URI to a specified string (the string is the prefix).</Body>
<Heading-2>
<A ID="pgfId-1035177"></A>
<A ID="67268"></A>
Everything Is In a Namespace</Heading-2>
<Body>
<A ID="pgfId-1055907"></A>
In XML and XQuery, element and attribute nodes are always in a namespace, even if that namespace is the <Emphasis>
empty namespace</Emphasis>
 (sometimes called <Emphasis>
no namespace</Emphasis>
). Each namespace has a uniform resource identifier (URI) associated. A URI is essentially a unique string that identifies the namespace. That string can be bound to a namespace prefix, which is just a shorthand string which is used to identify a (usually longer) namespace name. When something is in the empty namespace, the namespace name is the empty string (<code>
&quot;&quot;</code>
).</Body>
<Body>
<A ID="pgfId-1060532"></A>
There can also be a default element namespace defined for the module, as described in <A href="namespaces.xml#id(41175)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Declaring a Default Element Namespace in XQuery' on page&#160;51</A>. The fact that every element is in a namespace, along with the fact that XPath expressions of an unknown node return the empty sequence, make it easy to have simple coding errors (or even typographic errors) that cause your query to be a valid XPath expression, but to return the empty string. For example, if you have a simple typographical error in a namespace declaration, then XPath expressions that you might expect to return nodes might return the empty sequence. Consider the following query against a database with XHTML content:</Body>
<Code>
<A ID="pgfId-1060536"></A>
xquery version &quot;1.0-ml&quot;;
declare namespace xh=&quot;http://www.w3.org/1999/html&quot;;
//xh:p</Code>
<Body>
<A ID="pgfId-1060548"></A>
You might expect this to return all of the XHTML <code>
p</code>
 elements in the database, but instead it returns nothing (the empty sequence). If you look closely, though, you will notice that the namespace URI is misspelled (it is missing the <code>
x</code>
 in <code>
xhtml</code>
). If you keep in mind that everything is in a namespace, it can help find many simple XQuery coding errors. The correct version of this query is as follows, and will return all of the XHTML <code>
p</code>
 elements:</Body>
<Code>
<A ID="pgfId-1061136"></A>
xquery version &quot;1.0-ml&quot;;
declare namespace xh=&quot;http://www.w3.org/1999/xhtml&quot;;
//xh:p</Code>
<Heading-2>
<A ID="pgfId-1055908"></A>
<A ID="26964"></A>
XML Data Model Versus Serialized XML</Heading-2>
<Body>
<A ID="pgfId-1055945"></A>
This section highlights the difference between the XML data model, used to programmatically access XML content, and the serialized form of XML, used to display the XML in human-readable form. The following topics are covered:</Body>
<Body-bullet>
<A ID="pgfId-1055954"></A>
<A href="namespaces.xml#id(43092)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
XQuery Accesses the XML Data Model</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1055969"></A>
<A href="namespaces.xml#id(95819)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Serialized XML: Human-Readable With Angle Brackets</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1055974"></A>
<A href="namespaces.xml#id(49014)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Understanding Namespace Inheritance With the xmlns Attribute</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1055946"></A>
<A ID="43092"></A>
XQuery Accesses the XML Data Model</Heading-3>
<Body>
<A ID="pgfId-1055951"></A>
When an XQuery program accesses XML, it accesses it through the XML data model. The XML data model access nodes via their QNames, which are pairs of namespace name and local name. The XML data model does not store namespace prefixes. You can use namespace prefixes to access XML if those prefixes are in-scope in your XQuery (that is, if the prefixes are bound to a namespace). In-scope prefixes are a combination of any prefixes bound to a namespace in your query and the predefined namespace prefixes defined in <A href="namespaces.xml#id(21104)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Predefined Namespace Prefixes for Each Dialect' on page&#160;52</A>.</Body>
<Body>
<A ID="pgfId-1060571"></A>
The XML data model is aware of XML schema, and all XML nodes can optionally have XML types (for example, <code>
xs:string</code>
, <code>
xs:dateTime</code>
, <code>
xs:integer</code>
, and so on). When you are creating library functions that might be called from a number of contexts, knowing that XQuery accesses the XML data model can help you to make your code robust. For example, you might have code that explicitly (or implicitly, using the XQuery rules) casts nodes to a particular XML type, enforcing strong typing in your code.</Body>
<Heading-3>
<A ID="pgfId-1055950"></A>
<A ID="95819"></A>
Serialized XML: Human-Readable With Angle Brackets</Heading-3>
<Body>
<A ID="pgfId-1055953"></A>
When XML nodes are transformed from their internal, XML data model representation to a human-readable form, the process is known as <Emphasis>
XML serialization</Emphasis>
. A serialized XML node contains all of the namespace information, although some namespace prefixes may or may not be included in the serialization. Serialized XML does not generally contain the type information or the schema information; it is up to the XQuery program to specify a schema for a given XML representation.</Body>
<Body>
<A ID="pgfId-1060599"></A>
When serializing XML, there are five XML reserved characters that are serialized with their corresponding XML entities. These characters cannot appear as content in a serialized XML text node. The following table shows these five characters:</Body>
<TableAnchor>
<A ID="pgfId-1060605"></A>
</TableAnchor>
<TABLE>
<ROW>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1060611"></A>
Character</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1060613"></A>
XML Entity</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1060615"></A>
Name of Character</CellHeading>
</TH>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060617"></A>
<code>
&quot;</code>
</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060619"></A>
&amp;quot;</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1060621"></A>
double quotation mark</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060623"></A>
<code>
&amp;</code>
</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060625"></A>
&amp;amp;</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1060627"></A>
ampersand</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060629"></A>
<code>
'</code>
</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060631"></A>
&amp;apos;</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1060633"></A>
apostrophe</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060635"></A>
<code>
&lt;</code>
</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060637"></A>
&amp;lt;</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1060639"></A>
less-than sign</CellBody>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060641"></A>
<code>
&gt;</code>
</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060643"></A>
&amp;gt;</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CellBody>
<A ID="pgfId-1060645"></A>
greater-than sign</CellBody>
</CELL>
</ROW>
</TABLE>
<Body>
<A ID="pgfId-1060646"></A>
There are different ways to serialize the same XML content. The way XML content is serialized depends on how the content is constructed, the various namespace declarations in the query, and how the XML content was loaded into MarkLogic Server (for content loaded into a database). In particular, the ampersand character can be tricky to construct in an XQuery string, as it is an escape character to the XQuery parser. The ways to construct the ampersand character in XQuery are:</Body>
<Body-bullet>
<A ID="pgfId-1061194"></A>
Use the XML entity syntax (for example, <code>
&amp;amp;</code>
).</Body-bullet>
<Body-bullet>
<A ID="pgfId-1061202"></A>
Use a CDATA element (<code>
&lt;![CDATA[element&#160;content&#160;here]]&gt;</code>
), which tells the XQuery parser to read the content as character data.</Body-bullet>
<Body-bullet>
<A ID="pgfId-1061203"></A>
Use the repair option on <code>
xdmp:document-load</code>
, <code>
xdmp:document-get</code>
, or <code>
xdmp:unquote</code>
. </Body-bullet>
<Body>
<A ID="pgfId-1061245"></A>
For example, consider the following query:</Body>
<Code>
<A ID="pgfId-1060663"></A>
xquery version &quot;1.0-ml&quot;;
declare default element namespace &quot;my.namespace.hello&quot;;

&lt;some-element&gt;&lt;![CDATA{element content with &amp; goes
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;here]]&gt;&lt;/some-element&gt;</Code>
<Body>
<A ID="pgfId-1060658"></A>
If you evaluate this query, it returns the following serialization of the specified element:</Body>
<Code>
<A ID="pgfId-1060699"></A>
&lt;some-element xmlns=&quot;my.namespace.hello&quot;&gt;element content 
&#160;&#160;&#160;&#160;&#160;with &amp;amp; goes here&lt;/some-element&gt;</Code>
<Body>
<A ID="pgfId-1060700"></A>
If you consider a similar query with a namespace prefix binding instead of the default element namespace declaration:</Body>
<Code>
<A ID="pgfId-1060683"></A>
xquery version &quot;1.0-ml&quot;;
declare namespace hello=&quot;my.namespace.hello&quot;;

&lt;hello:some-element&gt;&lt;![CDATA[element content with &amp; goes
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;here]]&gt;&lt;/hello:some-element&gt;</Code>
<Body>
<A ID="pgfId-1060708"></A>
If you evaluate this query, it returns the following serialization of the specified element:</Body>
<Code>
<A ID="pgfId-1060709"></A>
&lt;hello:some-element xmlns:hello=&quot;my.namespace.hello&quot;&gt;element 
&#160;&#160;&#160;&#160;content with &amp;amp; goes here&lt;/hello:some-element&gt;</Code>
<Body>
<A ID="pgfId-1060724"></A>
Notice that in both cases, the <code>
&amp;</code>
 character is escaped as an XML entity, and in each case there is an <code>
xmlns</code>
 attribute added to the serialization. In the first example, there is no prefix bound to the namespace, but in the second one there is (because it is declared in the query). Both serializations represent the exact same XML data model.</Body>
<Body>
<A ID="pgfId-1061265"></A>
To construct the double quotation mark and apostrophe characters within a string quoted with one of these characters (<code>
'</code>
 or <code>
&quot;</code>
), you can use the character to escape itself, or you can quote the string with the other quote character, as follows:</Body>
<Code>
<A ID="pgfId-1061266"></A>
&quot;&quot;&quot;&quot; (: returns a single character: &quot; :)</Code>
<Code>
<A ID="pgfId-1061276"></A>
'&quot;' (: returns a single character: &quot; :)</Code>
<Code>
<A ID="pgfId-1061267"></A>
'''' (: returns a single character: ' :)</Code>
<Code>
<A ID="pgfId-1061285"></A>
&quot;'&quot; (: returns a single character: ' :)</Code>
<Heading-3>
<A ID="pgfId-1055952"></A>
<A ID="49014"></A>
Understanding Namespace Inheritance With the xmlns Attribute</Heading-3>
<Body>
<A ID="pgfId-1060753"></A>
As seen in the previous example, XML has a namespace declaration called <code>
xmlns</code>
, which is used to specify namespaces in XML. An <code>
xmlns</code>
 namespace declaration looks like an attribute (although it is not actually an attribute). It can either stand by itself or have a prefix appended to it, separated by a colon (&#160;<code>
:</code>
&#160;) character. Any <code>
xmlns</code>
 namespace declaration is inherited by all of its child elements, and if it has a prefix appended to it, the children also inherit the namespace prefix binding. </Body>
<Body>
<A ID="pgfId-1060758"></A>
For example, the following XML serialization specifies that the XHTML namespace is inherited from the root element:</Body>
<Code>
<A ID="pgfId-1060759"></A>
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&#160;&#160;&lt;body&gt;&lt;p&gt;This is in the XHTML namespace&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</Code>
<Body>
<A ID="pgfId-1060760"></A>
Each of the elements (<code>
html</code>
, <code>
body</code>
, and <code>
p</code>
 in this example) are in the XHTML namespace.</Body>
<Body>
<A ID="pgfId-1060781"></A>
Similarly, an <code>
xmlns</code>
 namespace declaration with a prefix appended specifies that the prefix is inherited by the element children. </Body>
<Code>
<A ID="pgfId-1060787"></A>
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;
&#160;&#160;&#160;&#160;&#160;&#160;xmlns:my=&quot;my.namespace&quot;&gt;
&#160;&#160;&lt;body&gt;
&#160;&#160;&#160;&#160;&lt;p&gt;This is in the XHTML namespace&lt;/p&gt;
&#160;&#160;&#160;&#160;&lt;my:p&gt;This element is in my.namespace&lt;/my:p&gt;
&#160;&#160;&lt;/body&gt;
&lt;/html&gt;</Code>
<Body>
<A ID="pgfId-1060827"></A>
One other sublety about default namespaces using the <code>
xmlns</code>
 attribute in constructed elements is that any XPath statement that is constructed within an element constructor that uses an <code>
xmlns</code>
 default namespace will default to the namespace of the parent element. This can be unexpected if you are trying to write an XPath expression using QNames in no namespace. The following code sample demonstrates how this namespace XPath inheritance works.</Body>
<Code>
<A ID="pgfId-1061562"></A>
xquery version &quot;1.0-ml&quot;;

declare namespace foo=&quot;foo&quot;;

(: notice the element constructed in $x is in no namespace :)
let $x := &lt;a&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/a&gt;
return
(
&lt;blah xmlns=&quot;foo&quot;&gt;{$x/b}&lt;/blah&gt;,
&lt;foo:blah&gt;{$x/b}&lt;/foo:blah&gt;
)

(:
Returns:
&lt;blah xmlns=&quot;foo&quot;/&gt;
&lt;foo:blah xmlns:foo=&quot;foo&quot;&gt;&lt;b&gt;hello&lt;/b&gt;&lt;/foo:blah&gt;

Notice how in the first part of the return, the &quot;b&quot; in $x/b 
inherits the namespace from the parent element, which is 
constructed with a default namespace (xmlns=&quot;foo&quot;), 
so it returns empty.  
In the second $x/b, the &quot;b&quot; is in no namespace. 
:)</Code>
<Body>
<A ID="pgfId-1061540"></A>
There are some other subtleties of namespace inheritance in XML. For more details, see the XML Schema specification (<Hyperlink>
<A href="http://www.w3.org/XML/Schema" xml:link="simple" show="replace" actuate="user" CLASS="URL">http://www.w3.org/XML/Schema</A></Hyperlink>
).</Body>
<Heading-2>
<A ID="pgfId-1060755"></A>
<A ID="41175"></A>
Declaring a Default Element Namespace in XQuery</Heading-2>
<Body>
<A ID="pgfId-1060809"></A>
An XQuery program can declare a namespace as the default element namespace for any elements that do not have a namespace. By default, the default element namespace is no namespace, which is denoted by the empty string URI (<code>
&quot;&quot;</code>
). If you want to define a default element namespace for a query, add a declaration to the prolog similar to the following, which declares the XHTML namespace (<code>
http://www.w3.org/1999/xhtml</code>
) as the default element namespace:</Body>
<Code>
<A ID="pgfId-1060818"></A>
declare default element namespace &quot;http://www.w3.org/1999/xhtml&quot;;</Code>
<Body>
<A ID="pgfId-1060819"></A>
An XQuery program that has this prolog declaration will use the XHTML namespace for all elements where a namespace is not explicitly defined (for example, with a namespace prefix).</Body>
<Body>
<A ID="pgfId-1061150"></A>
Declaring a default element namespace is a convenience and a style which some programmers find useful. While it is sometimes convenient (so you do not have to prefix element names, for example), it can also cause confusion in larger programs that use multiple namespaces, so for more complex programming efforts, explicitly defining namespaces is usually more clear.</Body>
<Heading-2>
<A ID="pgfId-1060811"></A>
<A ID="55147"></A>
Tips For Constructing QNames</Heading-2>
<Body>
<A ID="pgfId-1055917"></A>
In XML, elements and attributes are uniquely identified by a qualified names (QNames, as described in <A href="namespaces.xml#id(87639)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'XML QNames, Local Names, and Namespaces' on page&#160;46</A>). A QName is a pairing of a namespace name and a local name, and it uniquely describes an element or attribute name. XQuery also uses QNames to uniquely identify function names, variable names, and type names.</Body>
<Body>
<A ID="pgfId-1060856"></A>
There are many functions that use QNames in XQuery, and all of the rules for in-scope namespaces apply to constructing those QNames. For example, if the namespace prefix <code>
my</code>
 is bound to the namespace URI <code>
my.namespace</code>
 in the scope of a query, then the following would construct a QName in that namespace with the local name <code>
some-element</code>
:</Body>
<Code>
<A ID="pgfId-1060866"></A>
xs:QName(&quot;my:some-element&quot;)</Code>
<Body>
<A ID="pgfId-1060867"></A>
Similarly, you can construct this QName using the <code>
fn:QName</code>
 function as follows:</Body>
<Code>
<A ID="pgfId-1060871"></A>
fn:QName(&quot;my.namespace&quot;, &quot;some-element&quot;)</Code>
<Body>
<A ID="pgfId-1060876"></A>
Because a prefix is not specified in the second parameter to the above function, the QName is defined to have a prefix of the empty string (<code>
&quot;&quot;</code>
). </Body>
<Body>
<A ID="pgfId-1060890"></A>
Similarly, you can construct this QName with the prefix <code>
my</code>
 by using the <code>
fn:QName</code>
 function as follows:</Body>
<Code>
<A ID="pgfId-1060877"></A>
fn:QName(&quot;my.namespace&quot;, &quot;my:some-element&quot;)</Code>
<Body>
<A ID="pgfId-1060897"></A>
XQuery functions and other language constructs that take a QName can use any in-scope namespace prefixes. For example, the following will construct an <code>
html</code>
 element in the XHTML namespace:</Body>
<Code>
<A ID="pgfId-1060915"></A>
xquery version &quot;1.0-ml&quot;;
declare namespace xh=&quot;http://www.w3.org/1999/xhtml&quot;;

element xh:html { &quot;This is in the xhtml namespace.&quot; }</Code>
<Heading-2>
<A ID="pgfId-1059255"></A>
<A ID="21104"></A>
Predefined Namespace Prefixes for Each Dialect</Heading-2>
<Body>
<A ID="pgfId-1059259"></A>
This section lists the namespaces that are predefined for each of the dialects supported in MarkLogic Server. When a prefix is predefined, you can use it in your XQuery without the need to define it in a <code>
declare namespace</code>
 prolog statement. It contains the following parts:</Body>
<Body-bullet>
<A ID="pgfId-1059263"></A>
<A href="namespaces.xml#id(59810)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
1.0-ml Predefined Namespaces</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059267"></A>
<A href="namespaces.xml#id(86577)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
1.0 Predefined Namespaces</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059268"></A>
<A href="namespaces.xml#id(43600)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
0.9-ml Predefined Namespaces</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1059269"></A>
<A ID="59810"></A>
1.0-ml Predefined Namespaces</Heading-3>
<Body>
<A ID="pgfId-1059273"></A>
The following table lists the namespace prefixes and the corresponding URIs to which they are bound that are predefined in the 1.0-ml XQuery dialect.</Body>
<TableAnchor>
<A ID="pgfId-1059274"></A>
</TableAnchor>
<TABLE>
<ROW>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1059280"></A>
<code>
1.0-ml</code>
 Predefined Prefix</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1060012"></A>
Used For</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1059282"></A>
Namespace URI</CellHeading>
</TH>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059288"></A>
cts</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060014"></A>
MarkLogic Server search functions (Core Text Services)</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059290"></A>
http://marklogic.com/cts</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059749"></A>
dav</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060016"></A>
Used with WebDAV</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059751"></A>
DAV:</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059709"></A>
dbg</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060018"></A>
Debug Built-In functions</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059711"></A>
http://marklogic.com/xdmp/debug</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059745"></A>
dir</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060020"></A>
MarkLogic Server directory XML</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059747"></A>
http://marklogic.com/xdmp/directory</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059342"></A>
err</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060022"></A>
namespace for XQuery and XPath errors</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059344"></A>
http://www.w3.org/2005/xqt-errors</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059353"></A>
error</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060024"></A>
MarkLogic Server error namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059355"></A>
http://marklogic.com/xdmp/error</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059737"></A>
fn</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060026"></A>
XQuery standard function namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059739"></A>
http://www.w3.org/2005/xpath-functions</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059757"></A>
local</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060028"></A>
local namespace for functions defined in main modules</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059759"></A>
http://www.w3.org/2005/xquery-local-functions</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059753"></A>
lock</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060030"></A>
MarkLogic Server locks</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059755"></A>
http://marklogic.com/xdmp/lock</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059765"></A>
map</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060032"></A>
MarkLogic Server maps</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059767"></A>
http://marklogic.com/xdmp/map</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059318"></A>
math</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060034"></A>
math Built-In functions</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059320"></A>
http://marklogic.com/xdmp/math</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059373"></A>
prof</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060036"></A>
profile Built-In functions</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059375"></A>
http://marklogic.com/xdmp/profile</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059425"></A>
prop</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060038"></A>
MarkLogic Server properties</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059427"></A>
http://marklogic.com/xdmp/property</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059729"></A>
sec</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060040"></A>
security Built-In functions</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059731"></A>
http://marklogic.com/xdmp/security</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059433"></A>
spell</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060042"></A>
spelling correction functions</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059435"></A>
http://marklogic.com/xdmp/spell</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059705"></A>
xdmp</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060044"></A>
MarkLogic Server Built-In functions</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059707"></A>
http://marklogic.com/xdmp</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059725"></A>
xml</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060046"></A>
XML namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059727"></A>
http://www.w3.org/XML/1998/namespace</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059721"></A>
xmlns</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060048"></A>
xmlns namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059723"></A>
http://www.w3.org/2000/xmlns/</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059717"></A>
xqe</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060050"></A>
deprecated MarkLogic Server xqe namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059719"></A>
http://marklogic.com/xqe</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059733"></A>
xqterr</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060052"></A>
XQuery test suite errors (same as <code>
err</code>
)</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059735"></A>
http://www.w3.org/2005/xqt-errors</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059713"></A>
xs</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060054"></A>
XML Schema namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1059715"></A>
http://www.w3.org/2001/XMLSchema</CodeLeft>
</CELL>
</ROW>
</TABLE>
<Heading-3>
<A ID="pgfId-1059482"></A>
<A ID="86577"></A>
1.0 Predefined Namespaces</Heading-3>
<Body>
<A ID="pgfId-1059483"></A>
The following table lists the namespace prefixes and the corresponding URIs to which they are bound that are predefined in the 1.0 XQuery dialect (strict XQuery 1.0).</Body>
<TableAnchor>
<A ID="pgfId-1060277"></A>
</TableAnchor>
<TABLE>
<ROW>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1060125"></A>
<code>
1.0</code>
 Predefined Prefix</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1060127"></A>
Used For</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1060129"></A>
Namespace URI</CellHeading>
</TH>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060158"></A>
err</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060160"></A>
namespace for XQuery and XPath errors</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060162"></A>
http://www.w3.org/2005/xqt-errors</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060173"></A>
fn</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060175"></A>
XQuery standard function namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060177"></A>
http://www.w3.org/2005/xpath-functions</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060179"></A>
local</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060181"></A>
local namespace for functions defined in main modules</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060183"></A>
http://www.w3.org/2005/xquery-local-functions</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060245"></A>
xml</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060247"></A>
XML namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060249"></A>
http://www.w3.org/XML/1998/namespace</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060251"></A>
xmlns</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060253"></A>
xmlns namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060255"></A>
http://www.w3.org/2000/xmlns/</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060272"></A>
xs</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060274"></A>
XML Schema namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060276"></A>
http://www.w3.org/2001/XMLSchema</CodeLeft>
</CELL>
</ROW>
</TABLE>
<Heading-3>
<A ID="pgfId-1059588"></A>
<A ID="43600"></A>
0.9-ml Predefined Namespaces</Heading-3>
<Body>
<A ID="pgfId-1059589"></A>
The following table lists the namespace prefixes and the corresponding URIs to which they are bound that are predefined in the 0.9-ml XQuery dialect (MarkLogic Server legacy).</Body>
<TableAnchor>
<A ID="pgfId-1060442"></A>
</TableAnchor>
<TABLE>
<ROW>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1060290"></A>
<code>
0.9-ml</code>
 Predefined Prefix</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1060292"></A>
Used For</CellHeading>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<CellHeading>
<A ID="pgfId-1060294"></A>
Namespace URI</CellHeading>
</TH>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060296"></A>
cts</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060301"></A>
MarkLogic Server search functions (Core Text Services)</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060303"></A>
http://marklogic.com/cts</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060305"></A>
dav</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060307"></A>
Used with WebDAV</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060309"></A>
DAV:</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060311"></A>
dbg</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060313"></A>
Debug Built-In functions</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060315"></A>
http://marklogic.com/xdmp/debug</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060317"></A>
dir</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060319"></A>
MarkLogic Server directory XML</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060321"></A>
http://marklogic.com/xdmp/directory</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060323"></A>
err</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060325"></A>
MarkLogic Server error namespace (note this is different than <code>
1.0</code>
 and <code>
1.0-ml</code>
)</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060327"></A>
http://marklogic.com/xdmp/error</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060329"></A>
error</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060334"></A>
MarkLogic Server error namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060336"></A>
http://marklogic.com/xdmp/error</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060338"></A>
fn</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060340"></A>
XQuery standard function namespace (not this has a different namespace URi than <code>
1.0</code>
 and <code>
1.0-ml</code>
)</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060464"></A>
http://www.w3.org/2003/05/xpath-functions</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060350"></A>
lock</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060355"></A>
MarkLogic Server locks</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060357"></A>
http://marklogic.com/xdmp/lock</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060359"></A>
map</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060364"></A>
MarkLogic Server maps</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060366"></A>
http://marklogic.com/xdmp/map</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060368"></A>
math</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060370"></A>
math Built-In functions</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060372"></A>
http://marklogic.com/xdmp/math</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060374"></A>
prof</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060376"></A>
profile Built-In functions</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060378"></A>
http://marklogic.com/xdmp/profile</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060380"></A>
prop</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060385"></A>
MarkLogic Server properties</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060387"></A>
http://marklogic.com/xdmp/property</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060389"></A>
sec</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060391"></A>
security Built-In functions</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060393"></A>
http://marklogic.com/xdmp/security</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060395"></A>
spell</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060397"></A>
spelling correction functions</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060399"></A>
http://marklogic.com/xdmp/spell</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060490"></A>
xdt</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060495"></A>
May 2003 duration namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060497"></A>
http://www.w3.org/2003/05/xpath-datatypes</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060401"></A>
xdmp</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060406"></A>
MarkLogic Server Built-In functions</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060408"></A>
http://marklogic.com/xdmp</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060410"></A>
xml</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060412"></A>
XML namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060414"></A>
http://www.w3.org/XML/1998/namespace</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060416"></A>
xmlns</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060418"></A>
xmlns namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060420"></A>
http://www.w3.org/2000/xmlns/</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060422"></A>
xqe</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060424"></A>
deprecated MarkLogic Server xqe namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060429"></A>
http://marklogic.com/xqe</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060431"></A>
xqterr</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060433"></A>
XQuery test suite errors (same as <code>
err</code>
)</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060435"></A>
http://www.w3.org/2005/xqt-errors</CodeLeft>
</CELL>
</ROW>
<ROW>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060437"></A>
xs</CodeLeft>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<Body>
<A ID="pgfId-1060439"></A>
XML Schema namespace</Body>
</CELL>
<CELL ROWSPAN="1" COLSPAN="1">
<CodeLeft>
<A ID="pgfId-1060441"></A>
http://www.w3.org/2001/XMLSchema</CodeLeft>
</CELL>
</ROW>
</TABLE>
<Body>
<A ID="pgfId-1059480"></A>
</Body>
</XML>
