<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="programming.css" type="text/css" charset="UTF-8"?>
<XML>
<TITLE> </TITLE><Heading-1>
<A ID="pgfId-1043259"></A>
<A ID="60234"></A>
Application Programming in XQuery and XSLT</Heading-1>
<pagenum>
<A ID="pgfId-1054143"></A>
<A ID="_Exploring_the_Use"></A>
67</pagenum>
<Body>
<A ID="pgfId-1043261"></A>
In MarkLogic Server, XQuery and XSLT are not only used to query XML, but are also used as programming languages to create applications. They are especially powerful as a programming languages to create web applications, as you can easily write XQuery and/or XSLT code that outputs XHTML, which is the XML variant of HTML. This chapter describes some of the language features that make XQuery and XSLT particularly useful as application programming languages, and includes the following sections:</Body>
<Body-bullet>
<A ID="pgfId-1058412"></A>
<A href="programming.xml#id(21526)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Design Patterns</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1058915"></A>
<A href="programming.xml#id(61119)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Using Functions</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1062714"></A>
<A href="programming.xml#id(81328)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Search Functions</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1062840"></A>
<A href="programming.xml#id(36757)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Updates and Transactions</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1058881"></A>
<A href="programming.xml#id(53595)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
HTTP App Server Functions</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1058882"></A>
<A href="programming.xml#id(47349)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Additional Resources</Hyperlink>
</A></Body-bullet>
<Heading-2>
<A ID="pgfId-1059047"></A>
<A ID="21526"></A>
Design Patterns</Heading-2>
<Body>
<A ID="pgfId-1059048"></A>
For any programming language, there are design patterns that develop over time to perform various tasks. In XQuery with MarkLogic Server, one design pattern developers have gravitated toward is using MarkLogic Server to create single-tier applications, where an XQuery program accesses the content in a database, prepares it for display to an application, and sends the results to a client over an HTTP App Server. </Body>
<Body>
<A ID="pgfId-1062642"></A>
Many of the extensions in the <code>
1.0-ml</code>
 enhanced XQuery dialect make building these types of applications easier and more efficient. Extensions to the language such as try/catch are very useful in building robust applications. For details on these extensions, see <A href="enhanced.xml#id(_Toc61258626)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'MarkLogic Server Enhanced XQuery Language' on page&#160;14</A>. </Body>
<Body>
<A ID="pgfId-1062649"></A>
The <Emphasis>
Application Developer's Guide</Emphasis>
 lists many common design patterns in MarkLogic Server, and the <Emphasis>
Search Developer's Guide</Emphasis>
 lists common design patterns for MarkLogic Server specific search application functionality. These guides provide details about searches, lexicons, and many other techniques developers use to build applications in MarkLogic Server. </Body>
<Heading-2>
<A ID="pgfId-1043266"></A>
<A ID="61119"></A>
Using Functions</Heading-2>
<Body>
<A ID="pgfId-1059011"></A>
Functions are a powerful way to encapsulate XQuery code. For an example of an XQuery function, see <A href="langoverview.xml#id(39573)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Declaring Functions' on page&#160;30</A>. This section covers the following aspects of functions:</Body>
<Body-bullet>
<A ID="pgfId-1062666"></A>
<A href="programming.xml#id(77648)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Creating Reusable and Modular Code</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1062677"></A>
<A href="programming.xml#id(93922)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Recursive Functions</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1059034"></A>
<A ID="77648"></A>
Creating Reusable and Modular Code</Heading-3>
<Body>
<A ID="pgfId-1059038"></A>
Functions provide a convenient way to modularize or componentize your XQuery code. When you move some functionality into a function in a library module, it allows you to call that library module and use any of its functions from any other XQuery module, allowing maximum code reuse. You can separate the library modules any way that makes sense for your development environment. For example, you can use a model-view-controller (MVC) approach where you have a set of functions that are used to access the content, a set of functions used to display the content in a user-interface, and a set of functions used to control the business logic of the application (for example, workflow logic based on various events).</Body>
<Heading-3>
<A ID="pgfId-1059039"></A>
<A ID="93922"></A>
Recursive Functions</Heading-3>
<Body>
<A ID="pgfId-1059043"></A>
Using functions recursively (creating functions that call themselves) is a useful design pattern in XQuery. Recursive functions are very convenient for iterating through an XML tree structure to perform XML transformations from one structure to another. For details on performing recursive transformations, see the <A href="../dev_guide/typeswitch.xml#id(37159)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Transforming XML Structures With a Recursive typeswitch Expression</Hyperlink>
</A> chapter of the <Emphasis>
Application Developer's Guide</Emphasis>
.</Body>
<Body>
<A ID="pgfId-1063153"></A>
You can also use XSLT to perform transformations. For more information about XSLT, see <A href="xslt.xml#id(74932)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'XSLT in MarkLogic Server' on page&#160;57</A>.</Body>
<Heading-2>
<A ID="pgfId-1058417"></A>
<A ID="81328"></A>
Search Functions</Heading-2>
<Body>
<A ID="pgfId-1062713"></A>
MarkLogic Server includes functions to perform high-performance full-text search queries. The <code>
cts:query</code>
 constructors allow you to compose complex queries. The <code>
cts:search</code>
 API returns relevance-ranked, search-engine style queries. The <code>
cts:contains</code>
 API can be used in XPath predicates or other XQuery expressions. Both cts:search and <code>
cts:contains</code>
 take the composable <code>
cts:query</code>
 APIs as a parameter, allowing you to perform full-text searches in any XQuery or XSLT context, whether it is on content stored in a database or on content constructed in memory. </Body>
<Body>
<A ID="pgfId-1062785"></A>
There are many index settings on the database configuration. The indexes speed up searches (both XPath and <code>
cts:search</code>
) on documents in the database. The default index settings provide a good mix of performance and economy of disk space, and the default settings work well in many applications. If you want more index options, you can configure them at the database level. </Body>
<Body>
<A ID="pgfId-1062765"></A>
For details on composing <code>
cts:query</code>
 constructors, see <A href="../search-dev-guide/cts_query.xml#id(51991)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Composing cts:query Expressions</Hyperlink>
</A> in the <Emphasis>
Search Developer's Guide</Emphasis>
. For the syntax of the various search built-in functions, see the <Emphasis>
MarkLogic XQuery and XSLT Function Reference</Emphasis>
. For details on index options, see the <A href="../admin/databases.xml#id(69630)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Databases</Hyperlink>
</A> and <A href="../admin/text_index.xml#id(37170)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Text Indexing</Hyperlink>
</A> chapters of the <Emphasis>
Administrator's Guide</Emphasis>
.</Body>
<Heading-2>
<A ID="pgfId-1062733"></A>
<A ID="36757"></A>
Updates and Transactions</Heading-2>
<Body>
<A ID="pgfId-1062842"></A>
MarkLogic Server is a transactional system that ensures data integrity. When you perform updates on documents in a database, the system automatically locks any needed documents to ensure those documents are not updated by any other concurrent transactions. If a query reads a document, the system ensures that it the query reads a consistent view of the document throughout the transaction. </Body>
<Body>
<A ID="pgfId-1062876"></A>
There are XQuery/XSLT functions built into MarkLogic Server to create documents, update documents, and delete documents in a database. These update built-in functions are used in XQuery programs, so you can build complex logic (or whatever is required by your application) into your programs that update content. </Body>
<Body>
<A ID="pgfId-1062877"></A>
For details on transactions, see the <A href="../dev_guide/transactions.xml#id(44680)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Understanding Transactions in MarkLogic Server</Hyperlink>
</A> chapter in the <Emphasis>
Application Developer's Guide</Emphasis>
. For details on the update built-in functions, see the <Emphasis>
MarkLogic XQuery and XSLT Function Reference</Emphasis>
.</Body>
<Heading-2>
<A ID="pgfId-1062841"></A>
<A ID="53595"></A>
HTTP App Server Functions</Heading-2>
<Body>
<A ID="pgfId-1059020"></A>
When you issue XQuery requests against a MarkLogic Server HTTP App Server, the requests are processed over the HTTP protocol. MarkLogic Server provides XQuery built-in functions to perform various HTTP server functions. Use these functions to HTTP-server related actions such as adding an HTTP header, accessing the request object, and so on. </Body>
<Body>
<A ID="pgfId-1059351"></A>
The App Server functions are extremely useful when you are creating complete applications that return XHTML. For details about the signatures of the App Server functions, see the <Emphasis>
MarkLogic XQuery and XSLT Function Reference</Emphasis>
.</Body>
<Heading-2>
<A ID="pgfId-1059093"></A>
<A ID="47349"></A>
Additional Resources</Heading-2>
<Body>
<A ID="pgfId-1059097"></A>
This section lists some sources for additional XQuery resources. They include:</Body>
<Body-bullet>
<A ID="pgfId-1059142"></A>
<A href="programming.xml#id(25457)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
MarkLogic Server Documentation</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059293"></A>
<A href="programming.xml#id(79153)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
XQuery Use Cases</Hyperlink>
</A></Body-bullet>
<Body-bullet>
<A ID="pgfId-1059304"></A>
<A href="programming.xml#id(54309)" xml:link="simple" show="replace" actuate="user" CLASS="XRef"><Hyperlink>
Other Publications</Hyperlink>
</A></Body-bullet>
<Heading-3>
<A ID="pgfId-1059112"></A>
<A ID="25457"></A>
MarkLogic Server Documentation</Heading-3>
<Body>
<A ID="pgfId-1059201"></A>
In addition to this document, which describes the XQuery language implemented in MarkLogic Server, the MarkLogic Server documentation also includes XQuery API documentation for all of the XQuery-standard functions as well as the MarkLogic-defined XQuery functions. Included in the API documentation are many useful XQuery code samples. </Body>
<Body>
<A ID="pgfId-1059260"></A>
The other documents in the MarkLogic Server library describe various other aspects of the product. In particular, the <Emphasis>
Application Developer's Guide</Emphasis>
 includes many useful XQuery design patterns that work well with MarkLogic Server. For a description of MarkLogic Server documentation, see the product documentation section of the MarkLogic Developer site (<Hyperlink>
<A href="http://developer.marklogic.com/pubs/" xml:link="simple" show="replace" actuate="user" CLASS="URL">http://developer.marklogic.com/</A></Hyperlink>
).</Body>
<Heading-3>
<A ID="pgfId-1059197"></A>
<A ID="79153"></A>
XQuery Use Cases</Heading-3>
<Body>
<A ID="pgfId-1059116"></A>
MarkLogic Server includes an application that shows the XQuery Use Cases. The Use Cases have been developed by the W3C XQuery Working Group and demonstrates how a significant number of core tasks can be implemented using the XQuery language. The W3C describes the use cases in the following document:</Body>
<Code>
<A ID="pgfId-1059158"></A>
<Hyperlink>
<A href="http://www.w3.org/TR/xquery-use-cases/" xml:link="simple" show="replace" actuate="user" CLASS="URL">http://www.w3.org/TR/xquery-use-cases/</A></Hyperlink>
</Code>
<Body>
<A ID="pgfId-1059123"></A>
When you install MarkLogic Server, an online version of these use cases is installed on an App Server running at port 8000. If you have MarkLogic Server installed on your local machine, enter the following URL in a browser to access the use cases:</Body>
<Code>
<A ID="pgfId-1059187"></A>
<Hyperlink>
<A href="http://localhost:8000/" xml:link="simple" show="replace" actuate="user" CLASS="URL">http://localhost:8000/</A></Hyperlink>
</Code>
<Body>
<A ID="pgfId-1059188"></A>
This application provides an initial opportunity to get your hands on the XQuery code--looking at sample XQuery, executing it against sample datasets, and even modifying it in place to see what happens when you start to change the XQuery code snippets yourself and then execute them. The Use Cases application has a default XQuery dialect of 1.0, so if you want to run code in 1.0-ml, use an XQuery version declaration in the prolog, as described in <A href="dialects.xml#id(_Toc61258624)" xml:link="simple" show="replace" actuate="user" CLASS="XRef">'Specifying the XQuery Dialect in the Prolog' on page&#160;11</A>. The <Emphasis>
Getting Started with MarkLogic Server</Emphasis>
 walks you through this process of using the Use Cases application some detail.</Body>
<Heading-3>
<A ID="pgfId-1059196"></A>
<A ID="54309"></A>
Other Publications</Heading-3>
<Body>
<A ID="pgfId-1059233"></A>
In addition to the MarkLogic Server documentation, there are many excellent third-party books on XQuery. See the MarkLogic developer site for some recommendations (<Hyperlink>
<A href="http://developer.marklogic.com" xml:link="simple" show="replace" actuate="user" CLASS="URL">http://developer.marklogic.com</A></Hyperlink>
).</Body>
<Body>
<A ID="pgfId-1059237"></A>
You can also look directly at the XQuery specification, although much of the specification is geared more toward people who are implementing an XQuery processor rather than for people who are writing applications in XQuery. Nevertheless, it is very useful to at least get some familiarity with the following specifications:</Body>
<Body-bullet>
<A ID="pgfId-1059098"></A>
The current XQuery language recommendation (<Hyperlink>
<A href="http://www.w3.org/TR/xquery/" xml:link="simple" show="replace" actuate="user" CLASS="URL">http://www.w3.org/TR/xquery/</A></Hyperlink>
).</Body-bullet>
<Body-bullet>
<A ID="pgfId-1059099"></A>
The current recommendation for XQuery Functions and Operators (<Hyperlink>
<A href="http://www.w3.org/TR/xquery-operators/" xml:link="simple" show="replace" actuate="user" CLASS="URL">http://www.w3.org/TR/xquery-operators/</A></Hyperlink>
).</Body-bullet>
<Body-bullet>
<A ID="pgfId-1059100"></A>
The XML Schema standard--useful for both type definitions and to understand the schema definitions that can be used in MarkLogic Server.</Body-bullet>
</XML>
