<apidoc:module name="FlexRepModule" category="Flexible Replication" lib="flexrep"  bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">

<apidoc:summary category="Flexible Replication"  bucket="XQuery Library Modules">
<p>The Flexible Replication API module contains functions that allow you to write scripts to 
  configure flexible replication. </p>	
<p>The  Flexible Replication API is installed as the following file:</p>
<code><em>install_dir</em>/Modules/MarkLogic/flexrep.xqy</code> 
 
<p>where <code><em>install_dir</em></code> is the directory in which 
   MarkLogic Server is installed.</p>
<p> To use the <code>flexrep.xqy</code> module in your own XQuery modules, 
    include the following line in your XQuery prolog:</p>
<pre xml:space="preserve"><![CDATA[
   import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
           at "/MarkLogic/flexrep.xqy"; ]]></pre>
<p>The library uses the <code>flexrep:</code> namespace, which is 
   <em>not</em> predefined in the server.</p>
<p>MarkLogic recommends enabling the URI Lexicon when using 
    Flexible Replication; the URI lexicon will improve performance, 
   especially when the database grows to a large number of documents.</p>
</apidoc:summary>

<apidoc:function name="configuration-domain-ids" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the ids of the domains configured for
  the Master database.</apidoc:summary>
  <apidoc:params/>
  <apidoc:return>xs:unsignedLong*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  flexrep:configuration-domain-ids  ( )

  (: Returns the ids of the domains used by the database on which the query 
     is executed. )
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="configuration-create" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function creates a new replication configuration element. The 
  returned element must be subsequently inserted to the database with 
  <code>flexrep:configuration-insert</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
    The id of the replicated domain.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: This query must be executed on the Master database. :)

  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the id of the replicated CPF domain from the Triggers database. :)
  let $domain:= xdmp:eval(
    'xquery version "1.0-ml";
     import module namespace dom = "http://marklogic.com/cpf/domains" 
       at "/MarkLogic/cpf/domains.xqy";
     fn:data(dom:get( "Replicated Content" )//dom:domain-id)',
     (),
     <options xmlns="xdmp:eval">
       <database>{xdmp:database("MyTriggers")}</database>
     </options>)

   (: Create a replication configuration for the Replicated Content domain. :)
   let $cfg := flexrep:configuration-create($domain)

   (: Insert the replication configuration element into the database. :)
   return flexrep:configuration-insert($cfg) 

   (: Create a new replication configuration element for the Replication 
      Content domain and insert it into the Master database. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="configuration-insert" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function inserts a replication configuration to the database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.</apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  let $cfg := flexrep:configuration-target-set-enabled(
	 $cfg,
	 $target-id,
	 fn:false())

  return flexrep:configuration-insert($cfg) 

  (: Disables push replication on the Master database. :)
  ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="configuration-get" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function gets the replication configuration for a CPF domain.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
    The id of the replicated domain.
    </apidoc:param>
    <apidoc:param name="assert" type="xs:boolean"  optional="true">
    Set to <code>true</code> to throw an exception if the configuration does 
    not exist. The default value is <code>false</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  return
      flexrep:configuration-get($domain, fn:true()) 
 
  (: Returns the replication configuration element for the "Replicated Content"
     domain. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="configuration-delete" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function deletes a replication configuration. This removes the 
  configuration document as well as any other documents that were created to track 
  replication state. The properties that track state within individual documents are 
  not removed.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
    The id of the replicated domain.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain := xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Replicated Content" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("MyTriggers")}</database>
         </options>)

  return flexrep:configuration-delete($domain)

  (: Deletes the replication configuration for the "Replicated Content" domain. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="target-create" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function creates a new target and add it to the specified 
  configuration. A random ID is chosen for the target. You must subsequently use 
  <code>flexrep:configuration-insert</code> to write the modified configuration 
  into the database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The configuration to which to add the target.
    </apidoc:param>
    <apidoc:param name="name" type="xs:string">
    The name of the target.
    </apidoc:param>
    <apidoc:param name="urls" type="xs:string*">
     The URLs to be used to push replicated content to, with the load spread
     across them if there is more than one. If none are specified, the target is expected to
     do a pull.   
    </apidoc:param>
    <apidoc:param name="retry-seconds-min" type="xs:unsignedInt?">
    The minimum time to wait before scheduling a push retry.
    </apidoc:param>
    <apidoc:param name="retry-seconds-max" type="xs:unsignedInt?">
    The maximum time to wait before scheduling a push retry.
    </apidoc:param>
    <apidoc:param name="documents-per-batch" type="xs:unsignedInt?">
    The number of documents to attempt to replicate from a
    single invocation of the scheduled replication task. 
    </apidoc:param>
    <apidoc:param name="enabled" type="xs:boolean?">
    Specifies whether or not this target is enabled.
    </apidoc:param>
    <apidoc:param name="http-options" type="element(flexrep:http-options)?">
    The HTTP options in XML format.
    </apidoc:param>
    <apidoc:param name="replicate-cpf" type="xs:boolean?">
    Determines whether to replicate CPF.  Set to <code>fn:true</code> to replicate CPF.  Otherwise
    set to <code>fn:false</code>.  In most circumstances, you will not want to replicate CPF.
    </apidoc:param>
    <apidoc:param name="filter-module" type="xs:string?">
    A main module to filter replication attempts.
    </apidoc:param>
    <apidoc:param name="filter-options" type="element(flexrep:filter-options)?">
    The options to pass to the filter module.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the id of the replicated CPF domain from the Triggers database. :)
  let $domain:= xdmp:eval(
    'xquery version "1.0-ml";
    import module namespace dom = "http://marklogic.com/cpf/domains" 
      at "/MarkLogic/cpf/domains.xqy";
    fn:data(dom:get( "Replicated Content" )//dom:domain-id)',
    (),
    <options xmlns="xdmp:eval">
      <database>{xdmp:database("MyTriggers")}</database>
    </options>)

  (: Obtain the replication configuration. :)
  let $cfg := flexrep:configuration-get($domain, fn:true()) 

  (: Specify the HTTP options for the replication target. :)
  let $http-options := 
    <flexrep:http-options
      xmlns:flexrep="http://marklogic.com/xdmp/flexible-replication">
      <http:authentication xmlns:http="xdmp:http">
        <http:username>admin</http:username>
        <http:password>admin</http:password>
      </http:authentication>
      <http:client-cert xmlns:http="xdmp:http"/>
      <http:client-key xmlns:http="xdmp:http"/>
      <http:pass-phrase xmlns:http="xdmp:http"/>
    </flexrep:http-options>

  (: Create the replication target. :)
  let $cfg := flexrep:target-create(
    $cfg,
    "Replica",
    "http://localhost:8011/",
    60,
    300,
    10,
    fn:true(),
    $http-options,
    fn:false(),
    (),
    () ) 

  (: Insert the changes to the replication configuration. :)
  return flexrep:configuration-insert($cfg) 
 
  (: Creates a replication target, named "Replica." :)   
    ]]></pre>
  </apidoc:example>
</apidoc:function>


<apidoc:function name="target-delete" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function deletes a target from a replication 
  configuration. You 
  must use the <code>flexrep:configuration-insert</code> function to
  insert the configuration for the delete to take place. When 
  the configuration 
  is inserted, any additional documents created to track state 
  for the target will be removed.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The target id.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: Execute on the Master database. :)
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  let $cfg := flexrep:target-delete(
        $cfg,
        $target-id)

  return flexrep:configuration-insert($cfg) 
 
  (: Deletes the target, named "Replica," from the Master database. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="configuration-targets" lib="flexrep" 
category="Flexible Replication" bucket="XQuery Library Modules" 
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the replication targets for a 
  configuration.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:target)*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true())

  return flexrep:configuration-targets($cfg) 

  (: Returns the replication targets configured for the Default Master domain. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
 
 
<apidoc:function name="configuration-target" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns a specified target for a 
  configuration, or throws an error if it does not exist.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
     The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The target id.
    </apidoc:param>
    <apidoc:param name="assert" type="xs:boolean"  optional="true">
    Set to <code>true</code> to throw an exception if the configuration 
    does not exist.
    The default value is <code>false</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:target)?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true())
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  return flexrep:configuration-target($cfg, $target-id, fn:true()) 

  (: Returns the configuration for the "Replica" target. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="configuration-target-get-id" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the id of the named replicaiton target.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-name" type="xs:string">
    The name of the replication target.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true())

  return
      flexrep:configuration-target-get-id($cfg, "Replica")

  (: Returns the id of the target named "Replica." :)    
     ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="configuration-target-get-name" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the name of the specified target.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
       The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
       The id of the replication target.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
 
  return
      flexrep:configuration-target-get-name($cfg, 5840231460767636990) 
 
  (: Returns the name of the specified target. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="configuration-target-get-urls" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the URLs for the specified targets.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  return
      flexrep:configuration-target-get-urls($cfg, $target-id) 
 
  (: Returns the URLs associated with the "Replica" target. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="configuration-target-get-retry-seconds-min" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the value of the minimum retry setting 
  for the replication target.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:integer</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  return
      flexrep:configuration-target-get-retry-seconds-min($cfg, $target-id) 
 
  (: Returns the retry value set for the target configuration. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>
 
 
 
<apidoc:function name="configuration-target-get-documents-per-batch" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the value of the documents-per-batch 
  setting for the replication target.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.</apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:integer</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  return
      flexrep:configuration-target-get-documents-per-batch($cfg, $target-id) 
 
  (: Returns the number of replicated documents set to be sent in each batch. :) 
      ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="configuration-target-get-enabled" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns <code>true</code> if the specified
  replication target is enabled, otherwise
  it returns <code>false</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.</apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  return
      flexrep:configuration-target-get-enabled($cfg, $target-id) 
 
  (: Returns True if the replication target is enabled.  Otherwise, False is
     returned. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="configuration-target-get-replicate-cpf" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns <code>true</code> if CFG 
  replcation is enabled for the specified replication target, 
  otherwise it returns <code>false</code>.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.</apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:boolean</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  return
      flexrep:configuration-target-get-replicate-cpf($cfg, $target-id) 
  
   (: Returns True if CPF replication is enabled for the target.  Otherwise, 
      False is returned. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="configuration-target-get-http-options" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the HTTP options configured 
  for the specified replcation target.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.</apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:http-options)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

      let $domain := flexrep:configuration-domain-ids( )

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true())
  let $target_id := flexrep:configuration-target-get-id($cfg, "Replica")

  return
      flexrep:configuration-target-get-http-options($cfg, $target_id)
  
  (: Returns the HTTP options for the "Replica" target. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="configuration-target-get-filter-module" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the filter module used by the 
  specified replcation target.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.</apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:filter-module)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  return
      flexrep:configuration-target-get-filter-module($cfg, $target-id) 
 
  (: Returns the name of the filter module used by the replication target. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="configuration-target-get-filter-options" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function retunrs the filter options configured 
  for the specified replcation 
  target.  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:filter-options)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true())
  let $target_id := flexrep:configuration-target-get-id($cfg, "Replica")

  return
      flexrep:configuration-target-get-filter-options($cfg, $target_id)

  (: Returns the filter options for the "Replica" target. :)
       ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="configuration-target-set-name" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the name of the specified 
  replcation target.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
    <apidoc:param name="val" type="xs:string*">
    The name of the target.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  let $cfg := 
      flexrep:configuration-target-set-name($cfg, $target-id, "NewTarget")

  return flexrep:configuration-insert($cfg) 
 
  (: Changes the name of the "Replica" target to "NewTarget." :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="configuration-target-set-urls" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the URLs for the specified
  replication target.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
    <apidoc:param name="urls" type="xs:string*">
    One or more URLs for the Replica App Servers.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  let $cfg := flexrep:configuration-target-set-urls(
         $cfg, 
         $target-id, 
         "http://server134:8005/")

  return flexrep:configuration-insert($cfg) 
 
  (: Sets the target URL for the "Replica" target to "http://server134:8005/". :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="configuration-target-set-retry-seconds-min" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the replication retry minimum 
  value for the specified replication target.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
    <apidoc:param name="val" type="xs:integer">
    The minimum retry value.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  let $cfg := 
      flexrep:configuration-target-set-retry-seconds-min($cfg, $target-id, 20)

  return flexrep:configuration-insert($cfg) 
 
  (: Sets the minimum retry setting for the "Replica" target to 20. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="configuration-target-get-retry-seconds-max" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary> This function sets the replication retry maximum value 
  for the specified replication target.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:integer</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  return
      flexrep:configuration-target-get-retry-seconds-max($cfg, $target-id)

  (: Returns the maximum retry setting for the "Replica" target. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="configuration-target-set-documents-per-batch" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the documents-per-batch value for 
  the specified replication target.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
    <apidoc:param name="val" type="xs:integer">
    The number of documents to be replicated in each
    batch.</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  let $cfg := 
      flexrep:configuration-target-set-documents-per-batch($cfg, $target-id, 20)

  return flexrep:configuration-insert($cfg) 

  (: Sets the replicated documents-per-batch setting for the "Replica" 
     target to 20. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="configuration-target-set-enabled" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function enables or disables the specified 
  replication target.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
    <apidoc:param name="val" type="xs:boolean">A value of <code>true</code> 
    enables the replcation
    target and a value of <code>false</code> disables the replication target.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
 
  let $target-id := flexrep:configuration-target-get-id(
	$cfg,
	"Replica")

  let $cfg := flexrep:configuration-target-set-enabled(
	 $cfg,
	 $target-id,
	 fn:false())

  return flexrep:configuration-insert($cfg) 

  (: Disables push replication on the Master database. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="configuration-target-set-replicate-cpf" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function enables and disables CPF replication.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
    <apidoc:param name="val" type="xs:boolean">
    A value of <code>true</code> enables CPF replcation on the 
    target and a value of <code>false</code> disables CPF replication 
    on the target.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  return flexrep:configuration-get($domain, fn:true()) 

  (: Returns the current replication configuration. :) 
      ]]></pre>
  </apidoc:example>
</apidoc:function>

 
<apidoc:function name="configuration-target-set-http-options" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the HTTP options on the specified 
  replication target.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
    <apidoc:param name="val" type="element(flexrep:http-options)">
    The HTTP options in XML format.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: Execute against the Master database. ;)
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true())

  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica") 

  let $http-options := 
    <flexrep:http-options 
     xmlns:flexrep="http://marklogic.com/xdmp/flexible-replication">
      <http:authentication xmlns:http="xdmp:http">
        <http:username>replicator</http:username>
        <http:password>admin</http:password>
      </http:authentication>
      <http:client-cert xmlns:http="xdmp:http"/>
      <http:client-key xmlns:http="xdmp:http"/>
      <http:pass-phrase xmlns:http="xdmp:http"/>
    </flexrep:http-options>

  let $cfg := 
      flexrep:configuration-target-set-http-options($cfg, $target-id, $http-options)

  return flexrep:configuration-insert($cfg) 

  (: Resets the username and password used to access the Replica App Server. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="configuration-target-set-filter-module" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the specified filter for this 
  replication configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
    <apidoc:param name="uri" type="xs:string">
    The URI for the filter module.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	    at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica") 

  let $cfg := 
      flexrep:configuration-target-set-filter-module($cfg, $target-id, "test.xqy")

  return flexrep:configuration-insert($cfg) 
 
  (: Resets the filter module used by the target to "test.xqy." :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="configuration-target-set-filter-options" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the specified filter options for 
  this replication configuration.  The options specified in the <code>$val</code>
  parameter are passed to the <code>xdmp:invoke</code> of the filter module, so any of the
  options you would specify in the <code>xdmp:eval</code> function are recognized.
  </apidoc:summary>
  <apidoc:params>
     <apidoc:param name="cfg" type="element(flexrep:configuration)">
     The replication configuration.
     </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
    <apidoc:param name="val" type="element(flexrep:filter-options)">
    The filter options in XML format.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
	   at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true())      
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  let $filter-opts := 
     <flexrep:filter-options>
       <user-id xmlns="xdmp:eval">{xdmp:user("John")}</user-id>
     </flexrep:filter-options>

  let $cfg := 
    flexrep:configuration-target-set-filter-options(
       $cfg, 
       $target-id, 
       $filter-opts)

  return flexrep:configuration-insert($cfg) 
  
  (: Sets the filter user to "John". ;)
   ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="pull-create" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function creates a configuration on a Replica database 
  to pull updates from the Master database.</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="name" type="xs:string">
    The name of the pull configuration.
    </apidoc:param>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
    The id of the domain containing the replicated
    content.  This value is obtained from the Trigger database used
    by the Master database.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.  This value is obtained from the Master 
    database.
    </apidoc:param>
    <apidoc:param name="urls" type="xs:string+">
    The URL of the Master App Server.
    </apidoc:param>
    <apidoc:param name="http-options" type="element(flexrep:http-options)?">
    The HTTP options in XML format.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:pull)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: This query must be executed on a Replica database. :)
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Specify the id of the replicated CPF domain obtained from the Master's 
     Triggers database. :)
  let $domain:= 9535475951259984368

  (: Specify the id of the replication target obtained from the Master database. :)
  let $target-id := 18130470845627037840

  (: Specify the HTTP options for the replication target. :)
  let $http-options := 
    <flexrep:http-options
     xmlns:flexrep="http://marklogic.com/xdmp/flexible-replication">
      <http:authentication xmlns:http="xdmp:http">
        <http:username>admin</http:username>
        <http:password>admin</http:password>
      </http:authentication>
      <http:client-cert xmlns:http="xdmp:http"/>
      <http:client-key xmlns:http="xdmp:http"/>
      <http:pass-phrase xmlns:http="xdmp:http"/>
    </flexrep:http-options>

  let $pullconfig := flexrep:pull-create(
    "Master",
    $domain,
    $target-id,
    "http://localhost:8010/",
    $http-options)

  (: Insert the pull configuration into the Replica database. :)
  return flexrep:pull-insert($pullconfig) 

  (: Creates a pull replication configuration element for the specified domain. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="pull-insert" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function inserts the specified pull 
  configuration into the Replica database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
    The pull replication configuration obtained by the
    <code>flexrep:pull-get</code> function.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: This query must be executed on a Replica database. :)
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Specify the id of the replicated CPF domain obtained from the Master's 
     Triggers database. :)
  let $domain:= 9535475951259984368

  (: Specify the id of the replication target obtained from the Master database. :)
  let $target-id := 18130470845627037840

  (: Specify the HTTP options for the replication target. :)
  let $http-options := 
    <flexrep:http-options 
     xmlns:flexrep="http://marklogic.com/xdmp/flexible-replication">
      <http:authentication xmlns:http="xdmp:http">
        <http:username>admin</http:username>
        <http:password>admin</http:password>
      </http:authentication>
      <http:client-cert xmlns:http="xdmp:http"/>
      <http:client-key xmlns:http="xdmp:http"/>
      <http:pass-phrase xmlns:http="xdmp:http"/>
    </flexrep:http-options>

  let $pullconfig := flexrep:pull-create(
    "Master",
    $domain,
    $target-id,
    "http://localhost:8010/",
    $http-options)

  (: Insert the pull configuration into the Replica database. :)
  return flexrep:pull-insert($pullconfig) 

  (: Inserts a pull replication configuration element into the Replica database. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="pull-delete" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function deletes the pull configuration from the Replica database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
    The id of the domain containing the replicated
    content.  This value is obtained from the Trigger database used
    by the Master database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: Execute against a Replica database. :)
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $domain := 9535475951259984368

  return  flexrep:pull-delete($domain)

  (: Removes the Pull Replication configuration element from the Replica database. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
 
 
<apidoc:function name="pull-get" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the pull replication configuration for the
  specified domain.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
    The id of the domain containing the replicated
    content.  This value is obtained from the Trigger database used
    by the Master database.
    </apidoc:param>
    <apidoc:param name="assert" type="xs:boolean"  optional="true">
    Set to <code>true</code> to throw an exception if the configuration does 
    not exist. The default value is <code>false</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:pull)?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: Execute against a Replica database. :)
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
    at "/MarkLogic/flexrep.xqy";

  flexrep:pull-get(9535475951259984368,  fn:true())

  (: Returns the Pull Configuration for the specified domain. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="pull-get-all" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the pull replication configurations for all of the 
  domains.
  </apidoc:summary>
  <apidoc:params/>
  <apidoc:return>element(flexrep:pull)*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: Execute against a Master database. :)  
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  flexrep:pull-get-all()

  (: Returns the Pull Configurations for all of the domains. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="pull-get-domain-id" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the id of the domain associated with the specified
  pull configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
    The pull configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: Execute against a Replica database. :)  
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  for $pull-config in flexrep:pull-get-all() 

  return flexrep:pull-get-domain-id($pull-config)

  (: Returns the domain ids associated with each pull configuration. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="pull-get-target-id" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the id of the target associated with the specified
  pull configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
    The pull replication configuration returned by the
    <code>flexrep:pull-get</code> function.    
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: Execute against a Replica database. :)   
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  for $pull-config in flexrep:pull-get-all() 

  return flexrep:pull-get-target-id($pull-config)

  (: Returns the target ids associated with each pull configuration. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="pull-get-urls" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the URLs associated with the specified pull
  configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
     The pull configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: Execute against a Replica database. :)   
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $pull-config := flexrep:pull-get(9535475951259984368, fn:true()) 

  return flexrep:pull-get-urls($pull-config)

  (: Returns the target URLs associated with the specified pull configuration. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="pull-get-http-options" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the HTTP options associated with the specified pull
  configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
    The pull replication configuration returned by the
    <code>flexrep:pull-get</code> function.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:http-options)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: Execute against a Replica database. :)   
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $pull-config := flexrep:pull-get(9535475951259984368, fn:true()) 

  return flexrep:pull-get-http-options($pull-config)

  (: Returns the HTTP options associated with the specified pull configuration. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="pull-set-urls" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the URLs for the specified pull
  configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
    The pull replication configuration returned by the
    <code>flexrep:pull-get</code> function.
    </apidoc:param>
    <apidoc:param name="urls" type="xs:string+">
    THe URLs to set for the pull configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:pull)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: Execute against a Replica database. :)   
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $pull-config := flexrep:pull-get(9535475951259984368, fn:true()) 
  let $pull-config := flexrep:pull-set-urls($pull-config, "http://server321:8010/")

  return flexrep:pull-insert($pull-config)

  (: Sets the URL for the specified Pull Configuration to "http://server321:8010/". :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="pull-set-http-options" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the HTTP options for the specified pull
  configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
    The pull replication configuration returned by the
    <code>flexrep:pull-get</code> function.
    </apidoc:param>
    <apidoc:param name="http-options" type="element(flexrep:http-options)">
    The HTTP options in XML format to set for the pull configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:pull)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $http-options :=
    <flexrep:http-options 
     xmlns:flexrep="http://marklogic.com/xdmp/flexible-replication">
      <http:authentication xmlns:http="xdmp:http">
        <http:username>replicator</http:username>
        <http:password>admin</http:password>
      </http:authentication>
      <http:client-cert xmlns:http="xdmp:http"/>
      <http:client-key xmlns:http="xdmp:http"/>
      <http:pass-phrase xmlns:http="xdmp:http"/>
    </flexrep:http-options>

  let $pull-config := flexrep:pull-get(9535475951259984368, fn:true()) 
  let $pull-config := flexrep:pull-set-http-options($pull-config, $http-options)

  return flexrep:pull-insert($pull-config)

  (: Sets the specified HTTP options for the specified Pull Configuration. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="configure-database" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function creates any indexes needed for CPF based replication. The 
  input configuration is returned from <code>admin:get-configuration</code>
  and the configuration returned from this function must be inserted again with 
  <code>admin:save-confguration</code> for the changes to take effect. 
  This function may be called multiple times for the same database with 
  no ill effect.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="config" type="element(configuration)">
    The server configuration returned from 
    <code>admin:get-configuration</code>
    </apidoc:param>
    <apidoc:param name="dbid" type="xs:unsignedLong">
    The id of the database to configure.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  import module namespace admin = "http://marklogic.com/xdmp/admin"
      at "/MarkLogic/admin.xqy";

  let $config := admin:get-configuration()

  let $config := flexrep:configure-database(
	$config,
	xdmp:database("Master")) 

  return admin:save-configuration($config)

  (: Creates the indexes needed by the Master database for CPF based replication. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>

 
<apidoc:function name="apply" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function applies an update element to the current database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="update" type="element(flexrep:update)">
    The update element to apply to the database.
    </apidoc:param>
    <apidoc:param name="content" type="document-node()?">
    The updated document node.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $update :=
    <flexrep:update xmlns:flexrep=
      "http://marklogic.com/xdmp/flexible-replication">
        <doc:uri xmlns:doc="xdmp:document-load">/content/foo.xml</doc:uri>
        <flexrep:last-updated>2010-03-04T14:30:16.56-08:00</flexrep:last-updated>
        <doc:format xmlns:doc="xdmp:document-load">xml</doc:format>
        <doc:permissions xmlns:doc="xdmp:document-load"/>
        <doc:collections xmlns:doc="xdmp:document-load"/>
        <doc:document-quality xmlns:doc="xdmp:document-load">0</doc:document-quality>
        <prop:properties xmlns:prop="http://marklogic.com/xdmp/property"/>
    </flexrep:update>

    let $doc := fn:doc("/content/foo.xml")

    return flexrep:apply($update, $doc)

   (: Applies the specified update element to /content/foo.xml. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="delete" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function applies a delete element to the current database.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="delete" type="element(flexrep:delete)">
    The delete element to apply to the database.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $delete :=
    <flexrep:delete xmlns:flexrep="http://marklogic.com/xdmp/flexible-replication">
        <doc:uri xmlns:doc="xdmp:document-load">/content/foo.xml</doc:uri>
        <flexrep:last-updated>2010-03-04T14:35:12.714-08:00</flexrep:last-updated>
    </flexrep:delete>

   return flexrep:delete($delete)
  
   (: Applies the specified delete element to /content/foo.xml.  This effectively
      deletes the document from both the Master and Replica databases. :) 
     ]]></pre>
  </apidoc:example>
</apidoc:function>
 

<apidoc:function name="poll" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" hidden="true">
  <apidoc:summary>
  This function is used on the master to determine which documents need to be 
  replicated. This function could be used to customize the way pull polling is 
  done (e.g. multiple hosts on the target are polling the master for updates 
  and you want to either have some hosts poll specific forests or
  you want to have them process different parts of the list of pending documents.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
    The id of the replicated domain.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
    <apidoc:param name="start" type="xs:integer?">
    Parameter description...
    </apidoc:param>
    <apidoc:param name="size" type="xs:integer?">
    Parameter description...
    </apidoc:param>
    <apidoc:param name="forest-ids" type="xs:unsignedLong*">
    Parameter description...
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>node()*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

     ]]></pre>
  </apidoc:example>
</apidoc:function>
 
 
<apidoc:function name="process" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function processes one or more replicated updates for the specified 
  domain id, ordered by oldest changes first, and returns the results.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
    The id of the replicated domain.
    </apidoc:param>
    <apidoc:param name="size" type="xs:unsignedInt?" optional="true">
    The maximum number of replications.  If not specified, the maximum is
    one. 
    </apidoc:param>
    <apidoc:param name="targets" type="xs:unsignedLong*" optional="true">
    The ids of the replication targets.
    </apidoc:param>
    <apidoc:param name="forest-ids" type="xs:unsignedLong*" optional="true">
    The forest ids from which to process replications. If none are 
    specified, replications from all forests are considered.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:results)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain := xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
		  at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Replicated Content" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("MyTriggers")}</database>
         </options>)

  return flexrep:process($domain) 

  (: Processes the replicated updates for the "Replicated Content" domain. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="do-pull" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function is used by a Replica to pull updates from the Master.  It returns a list of elements;
  the first element is the response element that was set back to the master, followed by 
  one or more <code>flexrep:ack</code> elements that were posted back to the master.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
    The pull replication configuration returned by the
    <code>flexrep:pull-get</code> function.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element()*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $pull := flexrep:pull-get(8720056888183458895) 

  return flexrep:do-pull($pull)

  (: Returns the response and ACK elements last sent to the master. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
 
 
 
<apidoc:function name="domain-status" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the replication status for the specified 
  replicated CPF domain.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
    The id of the replicated domain.
    </apidoc:param>
    <apidoc:param name="with-targets" type="xs:boolean" optional="true">
    Set to <code>true</code> to include status information for each target.
    Otherwise set to <code>false</code>.
    </apidoc:param>
    <apidoc:param name="terse" type="xs:boolean" optional="true">
     Set to <code>true</code> to prevent counts from being returned for 
     each of the individual states (deleted, error, updated, and so on).
     Otherwise set to <code>false</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:domain-status)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain := xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Replicated Content" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("MyTriggers")}</database>
         </options>)
 
  let $cfg := flexrep:configuration-get($domain, fn:true())
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  return flexrep:domain-status($domain, fn:true(), fn:false())

  (: Returns the status of the domain and its targets. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="target-status" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function  returns the replication status for the specified targets
  within the specified replicated domain.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
    The id of the replicated domain.
    </apidoc:param>
    <apidoc:param name="target-ids" type="xs:unsignedLong*">
    The ids of the replication targets.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:target-status)*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain := xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Replicated Content" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("MyTriggers")}</database>
         </options>)
 
  let $cfg := flexrep:configuration-get($domain, fn:true())
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  return flexrep:target-status($domain, $target) 

  (: Returns the status of the specified target. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="remote-target-status" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the status of the target in a pull replication configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
    The pull replication configuration containing the pull target (master database).
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:target-status)?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: Execute on the Replica database. :) 
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $pullconfig := flexrep:pull-get-by-id(2261113583548708683)

  return flexrep:remote-target-status($pullconfig) 

  (: Returns the status of the master database from which replca is pulling
     updates. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="document-status" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the <code>flexrep:document-status</code> element for the 
  document at the 
  specified URI in the specified domain.  The returned <code>flexrep:document-status</code> 
  element is extracted from the document's properties, which remain even if the document has
  been deleted.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
    The id of the replicated domain.
    </apidoc:param>
    <apidoc:param name="uri" type="xs:string">
    The URI of the document.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:document-status)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $domain := xdmp:eval(
    'xquery version "1.0-ml";
    import module namespace dom = "http://marklogic.com/cpf/domains" 
      at "/MarkLogic/cpf/domains.xqy";
    fn:data(dom:get( "Replicated Content" )//dom:domain-id)',
    (),
    <options xmlns="xdmp:eval">
      <database>{xdmp:database("MyTriggers")}</database>
    </options>)

  return
    flexrep:document-status($domain, "/content/foo.xml")

  (: Returns the status of the document associated with the specified URI and domain. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="pull-get-id" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the id for the specified pull configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
    The pull replication configuration returned by the
    <code>flexrep:pull-get</code> function.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $pull-config := flexrep:pull-get(9535475951259984368, fn:true()) 

  return flexrep:pull-get-id($pull-config) 

  (: Returns the id for the specified pull configuration. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="pull-get-name" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function returns the name of the specified pull configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
    The pull replication configuration returned by the
    <code>flexrep:pull-get</code> function.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $pull-config := flexrep:pull-get(9535475951259984368, fn:true()) 

  return flexrep:pull-get-name($pull-config) 
 
  (: Returns the name of the specified pull configuration. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="pull-set-name" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the name of the specified pull configuration
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
    The pull replication configuration returned by the
    <code>flexrep:pull-get</code> function.
    </apidoc:param>
    <apidoc:param name="name" type="xs:string">
    The name to be set for the pull configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:pull)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $pull-config := flexrep:pull-get(9535475951259984368, fn:true()) 
  let $pull-config := flexrep:pull-set-name($pull-config, "MasterRep") 

  return flexrep:pull-insert($pull-config) 
 
  (: Sets the name of the specified pull configuration to "MasterRep." :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="pull-set-domain-id" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function sets the domain id for the specified pull configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
    The pull replication configuration returned by the
    <code>flexrep:pull-get</code> function.
    </apidoc:param>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
    The domain id to set for the pull configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:pull)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $pull-config := flexrep:pull-get(9535475951259984368, fn:true()) 
  let $pull-config := flexrep:pull-set-domain-id($pull-config, 2235475951259984368) 

  return flexrep:pull-insert($pull-config) 

  (: Sets the domain id for the pull configuration. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="pull-set-target-id" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
   This function sets the id of the replication target for the specified pull 
   replication configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull" type="element(flexrep:pull)">
    The pull replication configuration obtained by the
    <code>flexrep:pull-get</code> function.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:pull)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  let $pull-config := flexrep:pull-get(9535475951259984368, fn:true()) 
  let $pull-config := flexrep:pull-set-target-id($pull-config, 11130470845627037840) 

  return flexrep:pull-insert($pull-config) 

  (: Sets the id of the replication target for the specified pull configuration. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="configuration-get-id" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the id of the replication configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:unsignedLong</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Replicated Content" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("MyTriggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true())

  return flexrep:configuration-get-id($cfg)

  (: Returns the id of the specified replication configuration. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="configuration-get-domain-name" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the domain name associated
  with the specified replication configuration.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Replicated Content" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("MyTriggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true())

  return flexrep:configuration-get-domain-name($cfg)

  (: Returns the domain name for the specified replication configuration. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="domain-target-statuses" lib="flexrep" 
category="Flexible Replication" bucket="XQuery Library Modules" 
xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the status for each domain target.
  </apidoc:summary>
  <apidoc:params/>
  <apidoc:return>element(flexrep:domain-target-status)*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  return flexrep:domain-target-statuses()

  (: Returns the status for the targets in each domain configured for the database. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="target-error-documents" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns status information for documents that failed to replicate 
  for the specified domain and targets. The sequence of status elements returned is ordered in reverse 
  chronological order of the last time replication was attempted for the document.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
     The id of the replicated domain.
    </apidoc:param>
    <apidoc:param name="target-ids" type="xs:unsignedLong*">
    The id of the replication target.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:document-target-status)*</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain := xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Replicated Content" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("MyTriggers")}</database>
         </options>)
 
  let $cfg := flexrep:configuration-get($domain, fn:true())
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  return flexrep:target-error-documents($domain, ($target-id))

  (: Returns the status of the documents in the "Replicated Content" domain
    that failed to replicate to the "Replica" target.  :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="domain-target-reset" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>
  This function resets the URI status for the specified replication targets. 
  A reset involves retaining any record of last success, clearing any failure status, and 
  setting the time for the next replication attempt to the current time.  The status is reset
  for the specified <code>$target-ids</code>. 
  <p/> 
  Resetting the URI status for a target is useful if the document has errored out due to too 
  many failures, or if you want to replicate the document again.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
     The id of the replicated domain.
    </apidoc:param>
    <apidoc:param name="target-ids" type="xs:unsignedLong*">
    The id of the replication target.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain := xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Replicated Content" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("MyTriggers")}</database>
         </options>)
 
  let $cfg := flexrep:configuration-get($domain, fn:true())
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  return flexrep:domain-target-reset($domain, ($target-id))

  (: Resets the URI status for the "Replica" target. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="document-reset" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function resets the URI status for all replication targets. 
  A reset involves retaining any record of last success, clearing any failure status, and 
  setting the time for the next replication attempt to the current time.  The status is reset
  for the specified <code>$target-ids</code>.  If no <code>$target-ids</code> parameter is
  specified, then the URI status for all replication targets is reset.
   <p/> 
  Resetting the URI status for a target is useful if the document has errored out due to too 
  many failures, or if you want to replicate the document again.
</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri" type="xs:string">
    The URI to be assigned the new status.
    </apidoc:param>
    <apidoc:param name="domain-id" type="xs:unsignedLong">
     The id of the replicated domain.
    </apidoc:param>
    <apidoc:param name="target-ids" type="xs:unsignedLong*" optional="true">
    The id of the replication target.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>empty-sequence()</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain := xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Replicated Content" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("MyTriggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true())
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  return
      flexrep:document-reset("http://localhost:8011/", $domain, $target-id)

  (: Resets the URI status for the "Replica" target. :)
     ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="configuration-target-set-retry-seconds-max" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function sets the replication retry maximum 
  value for the specified replication target.
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">
    The replication configuration.
    </apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">
    The id of the replication target.
    </apidoc:param>
    <apidoc:param name="val" type="xs:integer">
    The maximum retry value.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:configuration)</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  (: Obtain the domain id from the database used by the Master to enable CPF. :)
  let $domain:= xdmp:eval(
        'xquery version "1.0-ml";
         import module namespace dom = "http://marklogic.com/cpf/domains" 
            at "/MarkLogic/cpf/domains.xqy";
         fn:data(dom:get( "Default Master" )//dom:domain-id)',
         (),
         <options xmlns="xdmp:eval">
            <database>{xdmp:database("Triggers")}</database>
         </options>)

  let $cfg := flexrep:configuration-get($domain, fn:true()) 
 
  let $target-id := flexrep:configuration-target-get-id($cfg, "Replica")

  let $cfg := 
      flexrep:configuration-target-set-retry-seconds-max($cfg, $target-id, 200)

  return flexrep:configuration-insert($cfg) 
 
  (: Sets the minimum retry setting for the "Replica" target to 200. :)
      ]]></pre>
  </apidoc:example>
</apidoc:function>



<apidoc:function name="validate-url" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" hidden="true">
  <apidoc:summary>This function....</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="url" type="xs:string">Parameter description...</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve">
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexrep" 
      at "/MarkLogic/flexrep.xqy";

    </pre>
  </apidoc:example>
</apidoc:function>
<apidoc:function name="apply-encoded-updates" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" hidden="true">
  <apidoc:summary>This function....</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="dts" type="element(flexrep:domain-target-status)">Parameter description...</apidoc:param>
    <apidoc:param name="boundary" type="xs:string">Parameter description...</apidoc:param>
    <apidoc:param name="data" type="binary()">Parameter description...</apidoc:param>
  </apidoc:params>
  <apidoc:return>element()*</apidoc:return>
  <apidoc:example><pre xml:space="preserve">
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexrep" 
      at "/MarkLogic/flexrep.xqy";

    </pre>
  </apidoc:example>
</apidoc:function>
 
<apidoc:function name="replicate" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" hidden="true">
  <apidoc:summary>This function....</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="uri" type="xs:string">Parameter description...</apidoc:param>
    <apidoc:param name="label" type="xs:string">Parameter description...</apidoc:param>
    <apidoc:param name="cfg" type="element(flexrep:configuration)">Parameter description...</apidoc:param>
    <apidoc:param name="domain" type="element(dom:domain)">Parameter description...</apidoc:param>
    <apidoc:param name="doc-status" type="element(flexrep:document-status)">Parameter description...</apidoc:param>
    <apidoc:param name="is-delete" type="xs:boolean">Parameter description...</apidoc:param>
    <apidoc:param name="is-retry" type="xs:boolean">Parameter description...</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(error:error)?</apidoc:return>
  <apidoc:example><pre xml:space="preserve">
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexrep" 
      at "/MarkLogic/flexrep.xqy";

    </pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="multipart-encode" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" hidden="true">
  <apidoc:summary>This function....</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="boundary" type="xs:string">Parameter description...</apidoc:param>
    <apidoc:param name="parts" type="node()*">Parameter description...</apidoc:param>
  </apidoc:params>
  <apidoc:return>binary()</apidoc:return>
  <apidoc:example><pre xml:space="preserve">
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexrep" 
      at "/MarkLogic/flexrep.xqy";

    </pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="ack-apply" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" hidden="true">
  <apidoc:summary>This function....</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="domain-id" type="xs:unsignedLong">Parameter description...</apidoc:param>
    <apidoc:param name="target-id" type="xs:unsignedLong">Parameter description...</apidoc:param>
    <apidoc:param name="acks" type="element(flexrep:ack)*">Parameter description...</apidoc:param>
  </apidoc:params>
  <apidoc:return>element(error:error)?</apidoc:return>
  <apidoc:example><pre xml:space="preserve">
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexrep" 
      at "/MarkLogic/flexrep.xqy";

    </pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="validate-name" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc" hidden="true">
  <apidoc:summary>This function....</apidoc:summary>
  <apidoc:params>
    <apidoc:param name="name" type="xs:string">Parameter description...</apidoc:param>
  </apidoc:params>
  <apidoc:return>xs:string</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  flexrep:"validate-name("Master")

  (:  :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>

<apidoc:function name="pull-get-by-id" lib="flexrep" category="Flexible Replication" bucket="XQuery Library Modules" xmlns:apidoc="http://marklogic.com/xdmp/apidoc">
  <apidoc:summary>This function returns the pull replication configuration for the specified
  Pull ID. 
  </apidoc:summary>
  <apidoc:params>
    <apidoc:param name="pull-id" type="xs:unsignedLong">
    The ID of the pull replication configuration.
    </apidoc:param>
    <apidoc:param name="assert" type="xs:boolean" optional="true">
    Determines whether to generate an error if the pull configuration does not exist.
    Set to <code>fn:true()</code> to generate an error, or <code>fn:false()</code> 
    to return an empty sequence if the pull configuration does not exist.  The default is
    <code>fn:false()</code>.
    </apidoc:param>
  </apidoc:params>
  <apidoc:return>element(flexrep:pull)?</apidoc:return>
  <apidoc:example><pre xml:space="preserve"><![CDATA[
  (: Execute on the Replica database. :) 
  xquery version "1.0-ml"; 

  import module namespace flexrep = "http://marklogic.com/xdmp/flexible-replication" 
      at "/MarkLogic/flexrep.xqy";

  flexrep:pull-get-by-id(2261113583548708683)

  (: Returns the pull replication configuration for the specified ID. :)
    ]]></pre>
  </apidoc:example>
</apidoc:function>


</apidoc:module>
